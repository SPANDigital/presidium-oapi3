// Code generated for package tpl by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/index.gomd
// templates/info.gomd
// templates/operation.gomd
// templates/partials/content.gomd
// templates/partials/headers.gomd
// templates/partials/parameters.gomd
// templates/partials/request_body.gomd
// templates/partials/responses.gomd
// templates/partials/schema.gomd
// templates/partials/security.gomd
// templates/responses.gomd
// templates/schemas.gomd
// templates/tag.gomd
package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\x0b\x01\x31\x15\x6a\x6b\xb9\x40\xe2\x80\x00\x00\x00\xff\xff\xff\xd8\xd2\xd8\x1c\x00\x00\x00")

func templatesIndexGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexGomd,
		"templates/index.gomd",
	)
}

func templatesIndexGomd() (*asset, error) {
	bytes, err := templatesIndexGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInfoGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x3b\xab\x83\x30\x14\xc7\xf7\x7c\x8a\x03\xd9\x02\x09\xdc\x55\xc4\xe5\xde\xbb\x49\x0b\x56\xbb\x8b\x8d\x6d\xc0\x47\x89\xc1\x0e\xe2\x77\x2f\x27\x49\x7d\xa4\x1d\xea\x74\xfe\x8f\xf3\x3b\x12\xce\x39\x31\xca\x34\x32\x82\x69\x02\x91\xe3\x08\xf3\x4c\x1e\x52\x5d\x6f\x26\x82\x1f\x82\x0d\x42\x29\xdd\xe5\x30\x0a\x94\x67\xa9\x07\xd5\x77\xb8\x40\x50\xff\xc9\xa1\xd2\xea\x6e\x56\x8f\x83\xaa\x41\xe4\x52\xb7\xc3\xb1\x3e\x49\x3d\xaa\xca\xf2\x09\x00\x00\xa5\x60\x13\xe8\x6b\xf0\x59\xe4\x92\xd8\x1e\x0b\xb7\x12\x47\x94\xdd\x05\x11\x2f\xf8\x6f\xdf\x99\xb2\x32\x5b\xaa\xb7\x9c\x0e\x7a\xe2\x50\xb6\xf6\x17\xc0\x7f\x8c\xa1\xc3\x98\x7b\x81\xb0\xb5\x20\xfc\xd5\x4f\xc4\xff\xb6\x54\xcd\x1e\x69\xad\x90\xb9\xf4\xbe\x81\x16\x59\xba\x47\x16\x59\x8a\xc0\x78\x4b\x74\xa5\xe4\x0d\xb8\x8e\xcf\x00\x00\x00\xff\xff\x83\x10\xc4\x02\xe1\x01\x00\x00")

func templatesInfoGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesInfoGomd,
		"templates/info.gomd",
	)
}

func templatesInfoGomd() (*asset, error) {
	bytes, err := templatesInfoGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/info.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOperationGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4a\xc4\x30\x10\xc6\xef\x79\x8a\xa1\xc7\x42\xfa\x00\x1e\x3c\x48\x2f\x82\xff\xd8\x15\xbc\x36\x74\x3f\xdd\x40\xd3\xc6\x64\x8a\x94\x90\x77\x97\xe9\xb6\x56\xdc\x7a\xcb\x6f\xe6\x37\xdf\x0c\xd1\x5a\xab\x94\x34\xd9\x77\xaa\x1e\xc1\xe7\xe1\xf4\x6a\xb9\x03\xe5\xac\x58\x1e\x37\x94\xd2\xda\xa1\x9c\x67\x7a\x32\x6e\x16\x52\x22\x74\xf1\xaf\xfb\xec\x11\x0c\xdb\xa1\xbf\xaf\x2f\x92\x26\xf4\x32\xab\xbe\x60\x3f\xce\x7c\xb1\xde\xe6\xb7\x54\xe5\x02\xd5\x34\x8d\xfa\x7f\x91\x74\xa5\x2d\x47\xd6\xf0\x01\xad\x61\x88\x55\x96\x1b\x96\xe5\xaf\x55\xab\x7d\x1c\x9d\x33\x61\x92\xc0\xdb\x94\x56\x9c\xe3\xaf\xdc\x1a\xb1\x0d\xd6\xcb\xe9\x94\xb3\xec\xbf\xaa\x6c\x13\x9a\x18\xce\x77\x86\x41\x85\x37\xc1\x38\x30\x42\x7c\xb0\x91\x0b\xaa\x5e\x7e\x0a\xeb\x0f\x6c\x72\xc0\xe7\x88\xc8\x77\xc3\x69\x2a\xa8\x3a\x6c\xb4\xa7\x46\x3f\xf4\x11\x4b\xea\x61\xc1\x9d\xd0\x88\x76\x0c\x96\xa7\xc5\x3c\x2e\x48\x39\x7f\x07\x00\x00\xff\xff\x34\x7c\xcc\x01\xe0\x01\x00\x00")

func templatesOperationGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesOperationGomd,
		"templates/operation.gomd",
	)
}

func templatesOperationGomd() (*asset, error) {
	bytes, err := templatesOperationGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/operation.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsContentGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3f\x6f\xb3\x30\x10\xc6\x77\x3e\xc5\x23\x8b\xc9\x7a\x03\x7b\xa4\x77\xea\x9f\xa9\x55\x2a\x9a\xee\x71\xf1\xd1\x58\xaa\x0d\x05\x67\x88\x2c\x7f\xf7\x0a\x02\xb6\x4b\xda\xa1\x65\x42\xbe\xdf\xd9\xcf\xfd\xce\xb9\x0d\x4a\x8e\x9b\xd6\x58\x32\x16\x96\x74\xf7\x2e\x2c\x81\x97\xd8\x78\x9f\x8d\x65\x49\x8d\x32\x04\x56\x5f\x18\xe6\x7d\x06\x00\x63\x29\xef\x7a\x1a\x94\x54\x27\x5d\x51\xf3\x52\x3d\x60\xfb\x1f\xc5\xd3\xea\x2c\xe1\x7b\x61\xde\x08\xb9\x11\x9a\xfe\x21\xd7\x24\x95\xd8\x9f\x3b\x9a\xda\x96\x08\x33\x3e\x7e\x9c\xdf\xb7\xbd\x16\x76\xcb\x39\x0e\xce\x4d\x7d\xde\x1f\xb2\x00\x38\x17\x13\xb3\x70\x1d\x83\x54\xb5\x05\x7b\x8c\x07\xc9\x5b\x6c\x95\x8f\x5d\x4f\x91\x24\x26\x23\x67\x0d\xf1\xaf\xe4\xb8\x33\x12\x6d\xf3\xa3\xb6\x05\xab\xc8\x48\xea\x07\x08\x84\x2c\xa9\xd9\x92\x63\xbf\xbb\xdd\xcd\x18\xec\x91\x30\xe5\xc4\x1a\x5c\x56\x10\x47\xfc\xc3\x12\x42\x83\x6a\x50\x84\x3c\xc5\x73\x7d\x24\x2d\x52\xed\x5f\xac\x0e\x53\x79\x51\x7a\x81\x2b\x6a\xd8\x37\x57\xfc\xda\x2c\xa2\x5a\x5c\xb9\xed\xe9\xe3\x44\x83\xc5\x6b\x2b\xcf\xb3\x8b\xcf\x00\x00\x00\xff\xff\x8e\x9d\xe9\x63\xad\x02\x00\x00")

func templatesPartialsContentGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsContentGomd,
		"templates/partials/content.gomd",
	)
}

func templatesPartialsContentGomd() (*asset, error) {
	bytes, err := templatesPartialsContentGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/content.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeadersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x3d\x4f\xc3\x30\x14\xdc\xfb\x2b\x4e\x51\x07\xb0\x68\xca\x8c\xc4\x56\x24\x06\xa6\x52\xb1\x5b\xf1\xb9\xb5\x94\x38\xc1\x75\x07\xe4\xe4\xbf\xa3\x7c\x34\xb2\x1b\x3a\x90\xe9\xe9\xde\xdd\x29\xef\xce\x21\x6c\xb0\x15\x78\xa7\x54\x74\x38\xb0\x6a\x4a\xe9\x09\xb1\xc5\xa6\xeb\x56\x21\x28\x6a\x63\x89\xec\x34\x10\xb2\x01\x05\x80\x5e\xb7\x1e\x41\xbc\xbc\x22\xff\x92\xe5\x85\x88\x97\x8e\x7a\xd8\xec\xa9\x63\xdc\xe8\x59\x37\xa1\xcb\x4d\xbe\xe7\xf7\xc5\x38\xaa\x98\x22\xdc\x04\x8a\x48\x45\xab\x12\x97\xd8\x64\xc7\xc6\xb1\x90\xfe\xc6\x46\xcd\xf0\xc2\x08\x2d\x42\xf0\xd7\x0c\xb2\xba\xa1\x93\xde\xd4\xf6\xb3\x38\xb1\x92\x87\x9f\x86\xd9\xec\x3e\x62\x18\x44\x22\x4a\x23\xdf\xf1\x5c\x38\xd3\xf4\xba\x3e\x2d\x81\x76\xbe\x9d\x76\xf8\x95\x69\x9c\xa6\xad\xc0\x9b\x55\xa8\xf5\xbd\x12\x56\x49\x47\x1f\xe6\xec\xe1\x17\x3d\x21\x2d\xaa\x67\xa5\x65\x19\x8d\xa3\xc7\x43\x49\x8b\xfc\x11\xcf\xb7\xe1\x3b\x69\x8f\xc4\xda\xca\x8a\x4f\x49\xb1\x11\xaf\xff\x5a\x08\x11\xc2\x48\x44\xd7\x09\x91\x24\x76\x7d\x25\x77\x1a\x9e\xee\xff\x57\x1c\x7f\xde\xfb\x1b\x00\x00\xff\xff\x1b\x02\x9f\x55\xb6\x02\x00\x00")

func templatesPartialsHeadersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeadersGomd,
		"templates/partials/headers.gomd",
	)
}

func templatesPartialsHeadersGomd() (*asset, error) {
	bytes, err := templatesPartialsHeadersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/headers.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsParametersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xd4\x30\x10\xbd\xe7\x57\x3c\xa5\x7b\x68\x2d\x36\xcb\x19\x89\x1b\x20\xad\x54\x21\x28\x88\xbb\x95\x4c\xba\x16\x89\x93\xda\x5e\xa0\x4a\xfc\xdf\x91\x1d\x27\xb1\xf7\xa3\xad\x0f\xbb\xb1\x9f\xdf\xcc\xf8\xcd\xc7\x30\x6c\xb1\x63\x30\x07\xa1\x61\xa8\xed\x1b\x6e\x08\x8a\x4a\x12\x7f\x48\x83\xe3\x1b\x57\xbc\x25\x43\xea\x81\x6a\xfc\x3d\x88\xf2\x80\xb2\x93\x86\x0b\xe9\x50\x77\xc8\x65\x15\xdf\x03\xdb\x61\x6b\x6d\xe6\x0c\x57\x54\x0b\x49\xc8\xfb\x19\xcc\x61\x6d\x06\x00\x0e\xdd\x2c\xc7\xf8\xf0\x11\xc5\x2f\xde\x1c\x29\xc1\x15\xd5\x1e\x71\x5e\xa2\x73\x51\xc7\xd4\x00\xb8\x35\x82\xb1\x61\x88\xc0\xe2\x2b\x6f\x9d\x49\xc6\x2e\x60\x7b\x39\x21\xc3\x90\x5a\x2c\x1e\xe8\xe9\x28\x14\x55\xb0\x16\x4c\x85\x8d\xbb\x47\xb2\xb2\xf6\xfc\xfe\x27\xea\x15\x95\xdc\x4c\x0c\xb0\x6a\xd9\xaf\xa4\xd1\x47\xbe\x08\xbc\x2a\xf2\xf3\xb9\xa7\x3c\xb6\xf6\xa3\x3c\x50\xcb\x11\x38\x48\x1d\xe9\x52\x89\xde\x88\x4e\x3a\x78\x11\x84\xa4\xf3\x9c\x85\xcf\xf0\xb5\x63\xf8\x2c\x2b\x74\x35\xfa\xd3\xd4\x64\xd7\x92\x2e\x68\x4a\x7a\x88\xa1\xee\x14\xf8\x39\xfd\x62\x66\xa7\x77\xbc\x21\x7b\x1b\x3d\x19\x4f\x52\x9e\xe4\x56\xad\x84\xf9\x78\xe2\xdc\x0b\xf9\x3b\x81\xfd\x8b\x1b\x4d\x9e\xa6\x67\xe1\x12\xa6\xa8\x41\x4f\x33\x58\xb8\x28\x91\x73\xa5\xf8\x73\xee\xdf\x82\x68\xbd\x9c\xa1\x60\x61\x6f\xa8\xd5\x09\x35\x0e\x42\x76\x26\xf5\x75\xee\x23\x72\xd1\x08\x6d\xbe\x1f\xb9\x34\xa2\x16\xa4\x74\x7e\xed\x0d\xde\xfa\x85\x60\x13\x4f\xbe\x32\xb7\x91\x12\xc5\x97\x4e\xb5\xdc\x38\xe0\x76\x18\xd2\x43\x6b\xef\xe6\xd2\x4c\x3d\x4d\x95\x74\xb9\xb0\xb0\x56\x16\x12\x75\x5e\xad\xab\x79\x98\xdc\x0b\x6d\x5c\x45\x26\x43\xe5\xa5\xaa\xd2\x8e\x91\x9f\x34\xff\xa3\xc1\x6d\x43\x12\xc5\x1d\xde\x2f\xc5\xe3\xd6\xcd\x0d\x5c\xef\x92\x36\xab\x07\x9d\x45\xe3\xc1\x8f\x83\x11\x7b\x89\x11\x3e\xf0\x11\x51\x4f\x85\x8e\xf2\x57\xb7\x7e\x8d\xcb\xcf\xf2\x17\xd6\x98\xc8\xa6\xb8\x7c\x24\x6c\x84\xac\xe8\xdf\xbb\xd3\xb9\xf6\xb6\x2a\xcb\xaf\xcc\xb4\x48\xfb\xa0\xc1\x9a\x8a\x93\xa4\x84\x76\x5f\x9f\x3e\xe9\x1d\xf4\xfd\x1f\x00\x00\xff\xff\x2f\x0e\x01\x21\xe9\x05\x00\x00")

func templatesPartialsParametersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsParametersGomd,
		"templates/partials/parameters.gomd",
	)
}

func templatesPartialsParametersGomd() (*asset, error) {
	bytes, err := templatesPartialsParametersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/parameters.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsRequest_bodyGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcb\x6e\x83\x30\x10\xbc\xf3\x15\x23\x92\x13\x2a\xe4\x1e\x29\x97\x3e\x8e\xed\x81\x56\xbd\xbb\xb0\x04\x4b\xc1\xa6\xe0\xb4\x8a\x8c\xff\xbd\x32\xaf\xda\x2e\xf5\xc9\xbb\x33\xb3\xf6\x7a\xd6\x5a\xa7\x38\x24\x50\x35\xef\xa1\xa8\x69\x2f\x4c\x11\x3a\x2a\x88\x7f\x51\x0f\x86\x9c\xce\x57\xea\xd5\xbd\x2c\x6f\x39\x55\xf8\xae\x79\x51\xa3\x90\x42\x31\x2e\x26\xbc\x02\x13\x25\x18\xde\xd9\xe5\x4a\x48\x0e\x48\x8d\x89\x6c\xd9\x92\x2a\x2e\x08\x71\x47\x9f\x4b\x89\xd8\x98\x08\x00\x2c\xcc\x2b\x64\x70\xe2\xbd\xc3\xc3\xf1\x84\x6c\x2c\xe8\x13\xaa\x11\xc8\xa9\x9a\xd3\x4e\x2d\x4f\xee\xc0\x76\xed\x76\xc8\x27\x14\x16\x8e\x3c\x50\xeb\x50\x9e\x59\x32\xef\xa8\x84\x31\x49\xb2\x04\x49\xa2\x35\x5d\x7a\xb2\xb9\x17\xa9\xe0\xe5\x45\x69\x8c\x5f\x76\xc0\x33\x95\x9c\xbd\xdd\x5a\xc2\x80\x47\xea\x8b\x8e\xb7\x8a\x4b\x81\x01\xaf\x45\x4d\x0d\xc3\xe0\x0b\xd2\xdf\xe5\xee\x9d\x68\x08\x2e\x9e\xa2\x63\xe2\x4c\xd8\x0b\xd6\xd0\x1d\xf6\xcd\x7a\xe2\xf1\xe4\x77\xf4\x20\x85\x22\xa1\xc2\x87\x71\xdf\x6f\x15\x67\xf3\xf5\x36\xb8\xab\x15\xfd\x48\xc9\x27\x43\xfe\x48\x03\x87\xfe\x51\x6f\x4b\x5d\xd7\xc3\x35\x40\xeb\xb1\x57\x63\xc6\xbd\xdf\xa3\xfb\xc6\x0b\x61\x1d\xe9\x58\xb6\xd4\x31\x8b\x4d\xe7\xd8\x23\xe3\xcd\xa6\x03\x5b\x96\x4b\x4f\x16\x6f\x67\xa3\x20\xe5\x8e\xf5\x1c\x06\xdb\x43\x82\x27\x51\x42\x56\x98\x3b\xc0\x87\x9d\xdb\xf9\xf7\xfc\x04\x00\x00\xff\xff\x24\xd9\x72\x61\x95\x03\x00\x00")

func templatesPartialsRequest_bodyGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsRequest_bodyGomd,
		"templates/partials/request_body.gomd",
	)
}

func templatesPartialsRequest_bodyGomd() (*asset, error) {
	bytes, err := templatesPartialsRequest_bodyGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/request_body.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4b\x6f\x9c\x30\x10\xbe\xf3\x2b\x46\xb0\x87\x36\xca\x92\x9e\x2b\xb5\x97\x6d\xa5\x1c\xb6\x51\x44\xb6\xbd\x56\x68\x19\x12\xab\x8b\x41\xd8\x7b\xa8\x80\xff\x5e\xf9\x81\x5f\x38\x5b\xa2\x0d\x27\x6c\x7f\xe3\x79\x7d\xf3\x79\x18\xb6\x70\x77\x03\x05\xb2\xae\xa5\x0c\x81\x63\xd3\x9d\x4a\x8e\x70\x73\x07\xdb\x69\x4a\xc4\x79\x85\x35\xa1\x08\x69\xaf\x41\x29\x4c\x53\x02\x00\x20\x0e\x37\x3d\xd6\xf0\xf9\x0b\xe4\xf3\x15\x79\x81\x75\x00\xd0\x77\x7b\xa8\x5f\xe5\xe9\x8c\x1e\x8e\xf1\x92\x9f\x99\x44\x3d\xa9\x5f\xe7\x94\xd4\x50\xd2\x4a\x79\x33\x37\xe6\xbb\x96\x72\xa4\x5c\xe3\x66\x6c\x5f\xd2\x67\x84\x0d\x2d\x1b\xbc\x85\x4d\x83\x15\x29\x0f\x7f\x3b\xe9\x7f\x61\x0a\x8e\xad\xf8\x46\x18\x06\x1d\xc9\x34\xc9\x95\x63\xf3\x0d\xd9\xb1\x27\x1d\x27\x2d\x05\x73\x2a\xdc\x98\x15\x3b\xbe\x60\x53\xee\x09\xfd\xa3\x42\x15\xfb\x5e\x6c\x48\x2b\x37\x2d\x3c\x31\x14\xb9\x49\xb4\x13\xca\xdb\xc2\xd8\xfe\xc7\xb9\xeb\xe9\x62\x05\xae\xad\x9e\xee\x94\xb5\xca\x9f\x64\x4c\x21\xce\xf6\x5c\x1e\x17\x8a\x42\x0b\x33\x41\xa5\xcb\x96\x71\x33\xc9\xad\x88\x61\xa4\xaa\x6f\xea\xae\x19\x8e\xb4\xed\xb0\x2f\x05\x52\x79\x14\xce\xd3\x68\xda\x4e\xfb\x1d\x0a\x04\x25\xb7\x3b\xa6\x53\x57\x71\x61\xeb\xf6\x5d\xde\xed\x50\x4f\x4f\xfc\x77\x5a\x41\x5b\xbf\x3e\xf8\x49\xa0\x0c\x7b\xc2\xf8\x2a\x75\x10\x40\x47\x21\x04\x1f\x9e\x39\x7c\x38\x21\x85\xfc\x23\x7c\x72\x33\xcb\x32\x73\x3d\x4b\x9c\x7c\xef\x0f\x87\x47\xd8\xb5\x15\xc2\x08\x6e\x82\x23\xfc\x30\x74\x1c\x41\xd7\xd8\x16\x78\xdc\xda\xcf\xfd\xf7\x57\xe6\x7f\x8c\xd1\x5e\xd5\xf9\x36\x50\xad\x18\xcf\x2d\x19\xac\x2e\x56\xe4\xc8\x21\x2d\xcc\xda\xde\x92\x2a\x49\x4b\x8d\xcc\x2d\x29\x20\xb6\xae\x0b\x69\xd6\x62\x4b\x0f\x47\x8b\x03\xa0\x02\x28\x15\xf6\x4c\x3c\x61\x0e\x06\x7b\x6e\xa4\x6f\x9f\xdf\x63\x59\x61\xcf\x74\x77\x17\x63\x97\x65\x59\x26\x59\x6b\x52\x07\x6d\xb1\xc4\x8e\xf0\x20\x26\x6e\x04\xdd\x64\xaf\xfd\x4b\xb4\xd7\xd2\xa0\xe7\x51\xdd\xb0\x5d\x7b\x91\x21\x28\xb6\xc6\xf3\x89\x15\xc1\xd1\xef\xc8\x56\x30\x66\xd7\x4d\xdc\x6f\x2d\x71\x6b\x86\x4e\xcd\x42\x7a\xe9\x5d\x2e\xb0\x5e\xf7\x34\x0b\xe0\xf2\x75\xee\x7a\x64\xa4\x22\xe7\xa6\xc0\xfa\x67\xb1\x97\x16\x8f\xc1\x9e\x8b\x97\xc2\x29\x40\x0f\x4a\x41\x13\xf7\x29\xa7\x2d\x9f\x9f\x28\x53\xca\xaf\xc3\x10\x95\x35\x7f\x2a\xa2\x2c\xbc\x44\xc0\xf5\x84\x5a\x4f\xa6\x15\x44\x8a\x71\x28\x3e\xe7\xf1\x8c\xf4\x03\x1b\x08\xa6\xb6\xb0\xbe\x8f\x0a\x36\x2b\xcf\x6e\x5e\x2e\x5f\xea\x34\x68\x56\xfa\x6a\xfb\xde\x9d\xd7\xc9\xbf\x00\x00\x00\xff\xff\x69\x5e\x64\x23\x65\x0a\x00\x00")

func templatesPartialsResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsResponsesGomd,
		"templates/partials/responses.gomd",
	)
}

func templatesPartialsResponsesGomd() (*asset, error) {
	bytes, err := templatesPartialsResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSchemaGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5d\x53\xdb\x38\x17\xbe\xe7\x57\x9c\x31\xf0\x4e\xe2\x69\xe0\xed\x5e\x66\x97\xce\x30\xdd\x76\xa6\x33\xb4\x64\x43\xbb\x37\x9d\x5e\x98\x44\x06\x6d\x15\x39\xf8\x83\x25\xe3\xf8\xbf\xef\x48\xb2\xac\x23\x59\x8e\x0d\x01\xca\x0d\xb1\x74\x7c\x74\xbe\xf4\xe8\x39\x56\x59\x4e\x60\x49\x62\xca\x09\x04\xd9\xe2\x96\xac\xa2\xa0\xaa\x0e\x00\x00\xc4\xcc\x51\x4a\x62\x98\x9e\xc1\xc9\x95\x9c\x9a\x93\xf8\x64\x4e\x62\xc0\x12\xea\x25\x47\xe8\xef\x88\x15\xc4\x12\x5b\xa7\x24\xa3\x4b\x5a\xac\xe6\x24\xfe\x36\xbf\x90\xf2\x33\x67\x0c\xcb\xf3\x68\x45\xa4\xd0\x17\xf1\x03\xcd\x9c\x86\xf0\x29\x86\xfc\x96\x66\x50\x2f\x4d\x33\x88\x20\x25\x31\x49\x09\x5f\x10\x08\x4f\x61\x82\xe4\x69\x0c\x3c\xc9\x95\x27\x55\x75\x20\xc7\xd1\x5c\xc4\x97\x8d\x0f\xf5\xff\x93\x3f\x49\xb6\x48\xe9\x3a\xa7\x09\x87\xaa\x82\x30\x44\x03\xd3\x30\x14\xef\x76\xc9\x8a\x29\xc2\x97\xce\x4a\x62\x21\xfd\xc2\xd7\xcd\xba\xf1\x67\x80\x2d\xb5\x38\x84\xa1\xf8\x25\x56\x47\x8b\xd7\x93\x7f\x5c\xa7\xef\x9a\x95\x27\x55\xa5\xf5\x69\xb1\x39\x89\x96\x97\x9c\x6d\x94\x1e\xf1\x04\xe2\x51\x79\x32\xe9\x7a\xeb\x4b\xc1\x58\x74\xcd\xea\xd5\xf5\x93\xf3\xd2\x81\xe3\x07\xe4\x64\xb5\x66\x51\x4e\x20\x48\x49\x96\xa7\x74\x21\x22\x93\x05\x8d\x5f\xc8\x73\xaf\x1a\x3b\x58\xb3\x34\x59\x93\x34\xa7\x24\x03\x77\xad\x30\x34\x93\xd3\x30\xdc\x61\xc8\xba\x91\x0b\x60\x49\x17\x39\x04\xaa\x50\x8d\x51\x81\x53\x89\x41\xbb\x5e\x83\x79\x92\xe4\xa2\x16\x83\xba\x36\x77\xfa\x4e\x39\xa3\x9c\xcc\x5e\x7c\x61\x7f\xb5\x61\xd7\x29\xcf\xff\x2a\x22\x9e\xd3\x98\x92\xf4\x59\xed\x08\x7c\x46\xe9\x9c\x56\xd5\x81\x95\x5e\x0c\x33\x38\x1f\x36\xd6\xdc\x15\x34\x25\x4b\x84\x25\x27\x73\x3d\x86\x05\x8b\x94\xf5\xe2\x47\x5a\x5b\x2b\x05\xb5\xe9\x8d\x99\x5b\x90\x8f\x5b\x90\x3b\x68\x0b\x78\x17\x6f\x61\x8e\x2a\x17\xb6\xea\x85\x89\xfc\xb3\xff\x4d\x7c\x4f\x93\x6d\x63\x44\x1a\xf1\x1b\xa2\x02\xf4\x46\x04\x54\xba\xbd\xc1\xee\xd9\xf5\x8d\x37\x46\xab\x7c\x37\x3a\x77\xb3\xe6\xd9\xa8\x0c\x3e\x16\x8c\x75\x26\x07\xa7\xae\x89\x8b\x27\xe5\x22\xae\x18\x3a\x75\xf6\x3a\x33\x49\x73\xb2\xca\x66\x1d\xe9\xdc\x2b\x4b\x8d\xc4\xa2\x48\x53\xc2\x8d\xd0\x7b\xf4\x8c\x8b\xae\x3f\xd6\xf2\x4c\xda\x11\xf1\xa3\x98\x0b\x71\xb9\x65\x62\x08\x8e\x33\x78\x07\xc7\x02\xb9\xb0\x09\x4d\xb5\x3f\x4f\xae\x62\xfe\x4a\x99\x32\x86\x3d\x69\xc7\x59\xf1\xd4\x4e\x0d\x3b\xaf\x8f\xe2\xda\x5d\x39\xab\x7d\x7f\x81\x4a\xb9\x97\x9c\x63\x7a\x66\xac\xf5\xd0\x90\xfc\x96\xcc\x15\xa5\x31\x52\x88\xd1\x6c\xe5\xe9\xda\x58\x3c\x69\x86\xad\x33\x7a\x24\x09\x85\x52\x35\x86\x11\xb9\xab\x17\x57\xe7\x71\x90\x5c\xff\x43\x16\x79\x30\xd6\xa3\xa8\xe4\x26\xa8\x72\xbe\x97\xa5\x8c\x5a\x55\xfd\x18\x95\x65\x50\x96\xc7\xd7\x51\x46\x8a\x94\x1d\x57\x55\x50\x55\x65\x29\xe2\x52\x55\xa7\x8b\x64\xb5\x4e\x38\xe1\x79\x76\xaa\xd0\x3a\x3b\x3d\xb4\xab\x2e\xf5\x14\x4d\x55\x4d\xca\x12\x58\xf2\x2f\x49\x9b\xa2\x1d\x9b\x7a\x61\xd9\x8e\x2a\x56\xcb\x08\x67\x76\xd6\xf1\xbe\x85\x8b\x98\xcf\x88\xf2\xab\x3c\xa5\xfc\xe6\x8a\xd1\x05\x41\x85\x29\xb5\x8f\x25\xb3\x12\xcc\x45\x8d\x4a\x12\x64\x0a\xdd\xd1\x55\x47\x1d\x93\x1e\x87\xf5\xf4\xbf\x8c\xb9\x8f\x4d\x7e\xdc\x77\xdd\xe7\xad\x66\x30\x4a\x91\x43\x0f\xcb\x12\xae\x53\x12\xfd\xbc\x10\x9b\xb2\x53\xa4\xa5\xaf\x93\x54\xdd\xd7\x05\x0e\x5b\x97\xef\x8e\xf6\x2a\xd4\xb1\x5b\x1c\x1a\x5e\x05\xb6\xca\xdd\xd3\x2a\x6d\x0f\xa5\xed\x44\x54\xae\xa0\xd4\xf7\xce\x30\x2c\xed\x04\xd1\xbd\x0a\xb1\x2b\xaf\xdd\xe7\x5f\x8b\xe6\x99\x23\x69\x28\xba\x0e\x80\xbf\x3e\x36\xb3\x2f\xd7\x68\xba\x3c\x84\x84\x6d\x58\x35\x68\xea\xeb\xa1\x46\xba\xc9\x7a\x1c\x20\x3a\x15\x70\x78\x28\xdd\xad\xf1\x0a\x4a\x78\x22\xd2\x81\x5b\x58\x2d\x74\xb3\x99\xf0\x9c\xc4\xdd\xd0\xe6\x2f\x9e\x81\xb5\xf3\x4b\x12\x84\xfc\xd6\xe9\x49\x52\x1d\xfd\x73\xc6\x2e\x1b\x7c\x3a\xe7\x1b\xf3\x70\xc9\xc9\xa5\xc8\x9f\x49\xe5\xab\xa5\x67\x17\x62\xf6\x03\xe5\xae\xde\xaf\xa7\x01\x52\xd1\xeb\xc8\xb1\x1f\x4c\x9c\xbe\x07\xad\x5b\x77\x3e\x83\xf1\xa3\x6d\x1d\xda\xf3\xad\x0f\x2b\x68\xee\x51\x5f\x53\x3a\xc9\x59\x2f\xab\xc2\xad\xb8\x2c\x0e\x3d\x15\x86\x97\x9c\xc0\x65\x2c\x1a\xef\x56\xcc\xef\xba\xc2\x6d\x3e\x03\xd4\xda\x1e\xd9\x76\xee\x4c\x81\xd3\x0a\xdb\xc6\xab\x9a\x6f\x8c\x3f\x67\x6c\x1f\xe3\x95\xb6\xd7\x33\x5e\xee\x51\x63\x3c\xdf\xec\x65\xbc\xd4\xf6\x32\xc6\x77\x16\xfa\x9d\x53\xe3\xcf\x72\xf6\xed\xac\xee\xa7\xb6\xf6\x03\x7b\x7a\xba\x7c\xf0\xa3\x78\x1b\xbb\x15\x49\x78\x9f\x14\x3c\x17\x72\x6f\x3b\xf1\xbb\xa3\x6f\x81\x81\xbd\x0b\xbc\x54\xa3\x82\x00\x4e\x53\xb9\xab\x75\x92\xc3\x6f\x53\x38\x3e\xbc\x6f\x1f\x87\xfa\xef\xfb\x27\xe9\x39\xa8\xc0\x40\x59\xe2\x50\xbc\x60\xd7\x83\xce\x9a\xaa\x9a\xa8\x35\x27\x4a\xc9\xc4\x35\x62\xec\xf1\xd2\xc9\xd9\x19\x64\xc5\xca\x1e\x7a\xeb\x63\xae\x6e\x4f\x85\xe7\x7e\x49\x6f\xe5\x1e\x43\xa6\x48\x9e\xb7\x45\x81\xa7\xb4\x29\x5d\xfc\xe8\x19\x37\xd6\x2f\x65\xb5\x0e\x6f\x3a\x04\x77\x33\xd8\xf6\x3f\x8a\x4d\x3d\xa6\xc0\x9f\x89\x09\xf7\xd5\xdd\x53\x3b\xa9\xd3\x10\xcc\x8e\x80\xaf\xda\xb4\xfa\x0e\xa7\x7d\x39\xa5\x36\x8e\xef\x86\x6a\xe6\x81\x44\xf7\x82\x6a\xd6\xfd\x61\xa8\xfb\xfb\x55\xff\x97\xa7\x01\xdf\xaf\xc4\x76\xf3\xdd\x40\x29\xe3\x2e\x28\xff\x69\xcf\x37\x80\x62\x78\x80\x1b\x63\x1a\x83\x28\x49\x7c\x15\x14\x44\x69\x1a\x6d\x02\x2f\x0a\x1c\xc9\x8f\xb5\xf2\xf4\xa8\x5f\xf9\x24\x07\x7c\xb2\x34\x06\xd1\x2f\xc8\x37\xea\xef\xa6\x75\xa3\x60\x0d\xa9\x46\x02\x0f\x29\x5a\xe7\x3f\x3c\x70\x69\x33\x9a\xd9\xbc\x17\x6b\xf1\x83\x98\x08\x86\x4f\xf1\xf7\x47\xe0\xab\xe5\xf8\x3e\x18\xfb\xa3\x17\x64\x71\x02\x5b\x69\xaa\xa1\xc3\x9f\x27\xdf\x17\x66\xad\x49\xc2\x11\x56\xe5\x6a\x78\x85\x8f\x8a\x16\xfa\x8c\xdb\x66\xfa\x7c\x72\x2e\x33\x9d\x9b\xc6\x8f\x49\xba\x8a\x24\x06\x8e\xca\xd2\x1e\xac\xaa\x31\x94\x25\xe1\x4b\x0f\xc0\xd8\xf8\x82\xd0\xa5\xfe\x79\x1a\xc2\x07\xbe\x84\x24\xde\x05\x31\x5a\x12\x9f\x58\x26\x0a\x1e\x1c\xb2\x8f\xb6\x89\x59\x6b\x4e\xf8\x92\xa4\x10\x31\x66\x2b\x6b\xdf\x47\x9f\x7c\x2e\x58\x4e\xd7\x4c\x35\x54\x10\x86\xfa\x19\x92\x38\x0c\xa7\x02\xa4\x6d\x11\x7d\xc1\xdb\x06\x56\xa9\x2d\x7a\xa8\xd5\x44\x0f\x74\x55\xac\x1a\x15\x72\x7c\xf7\xbb\x1f\x1e\x16\xac\xc8\xe8\x3d\x69\x94\x34\x23\xb0\x32\xea\xf2\xb4\x20\x3d\x46\xd0\xfa\xae\xfc\x33\xe5\x96\x11\x72\x7c\xa8\x11\x5a\x09\x32\xc2\xa8\x1b\x60\x44\xf4\x70\x41\xf8\x4d\x7e\x6b\xc5\x03\x98\x1c\x43\x61\x69\x84\x7a\x7d\xb2\xd4\x29\x53\x5c\x75\x48\x68\xb7\xba\x59\x94\xe7\x24\xad\x3d\xac\x1f\xb4\x16\x33\xd7\xeb\xa1\x42\x2f\xcb\x41\x09\x9e\xc8\x3f\x2d\xd2\xeb\x1e\xd6\x55\x7b\x67\xeb\x32\x22\xbb\x75\x7d\xe3\xf4\xae\x20\x48\x1d\x1a\x18\x9c\x3b\x81\xd4\x8e\x67\xe6\xae\x18\xb9\xa7\xe5\x7a\xdd\xc3\x0a\x6b\xf7\x3c\x0a\x8d\x5c\x97\x42\xa9\xef\x7c\xb9\xa4\x62\x47\x47\xcc\x30\xbd\x73\x26\xd0\x70\xa9\x96\x30\x02\x68\x15\x81\x07\x42\x64\x50\x10\x6e\x72\x18\x31\xc2\xe1\xe4\x03\x2f\x56\x63\xf8\xbf\x05\xef\x61\x28\x46\xc3\x70\xfa\x3f\x7e\x9d\xad\x7f\xf7\x7d\x9e\x57\xe4\xd9\x70\x5b\xf1\x82\xff\x90\x91\x32\x55\xe5\x51\x35\x84\xba\xd9\xe8\xea\x85\x4e\x07\x5e\x6b\x70\x14\x27\x09\xc8\x03\xce\x87\xac\xcd\x89\xe3\x64\xb2\x75\xb0\x8e\x32\x56\xdc\xd0\x78\x03\x23\x75\x18\x9d\x8c\xc7\x43\x6d\xee\x32\x44\xcf\x8b\xbc\x45\xc2\x95\xab\x61\xb4\xd4\x23\xef\xe7\xa7\x3b\x68\xa9\xdd\x82\x38\x74\x11\xfb\xed\x61\x8b\x2e\x43\xe8\x26\x8b\xcd\x21\x4c\x73\xe6\xe7\x58\xdd\x12\x9d\x0c\xec\x91\x44\x14\xda\x84\xcd\x1b\xc0\x16\x45\xf5\x10\xae\xa1\x94\x08\xdc\xb6\xa7\x4d\x3e\xdb\x31\x83\x01\x4d\xfd\xf3\xb2\x1a\x68\x33\x1b\xcf\xd0\xb0\x1d\x39\xa4\x88\xad\x2a\x76\x43\xd2\x2e\x54\xd9\x39\xd4\x94\x1f\x6f\xb5\xa3\x44\xde\x07\x06\x72\x26\x70\x36\xae\xf5\xe5\xb2\xa5\xf0\x4c\x0b\xb8\x95\x26\x74\x0a\x95\x62\x32\xf0\x15\xb9\xfd\x31\xda\xa7\xb8\xdd\x88\x20\xc5\x72\x32\xe8\xbe\xae\x09\x43\xd1\x9e\x27\x6b\xa8\xaa\x69\x7d\xe5\x6b\x01\xac\xd9\xba\xcd\x92\x13\xc1\xad\x87\x96\xb5\x90\x7e\xd3\x99\xca\xff\x02\x00\x00\xff\xff\x37\x84\x8b\x5e\x92\x29\x00\x00")

func templatesPartialsSchemaGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSchemaGomd,
		"templates/partials/schema.gomd",
	)
}

func templatesPartialsSchemaGomd() (*asset, error) {
	bytes, err := templatesPartialsSchemaGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/schema.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSecurityGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbf\x4e\xc3\x40\x0c\xc6\xf7\x3c\xc5\xa7\xb4\x03\x44\xbd\x86\x19\x89\x81\x81\x0d\xb1\x94\x17\x38\x25\x4e\x39\xd4\x38\x55\xe3\x4a\xa0\xe4\xde\x1d\xf9\x9a\xff\x04\x09\x0f\x51\xe2\x9f\xed\xf8\xfb\xdc\x34\x06\x69\x82\x03\x65\xd7\x8b\x93\x6f\xbc\x53\x79\x3e\x59\x21\x24\x29\x8c\xf7\x91\xf2\x9c\x0a\xc7\x84\xb8\xee\x8a\xe2\x81\x5c\x2c\x1f\x09\x5b\xb6\x25\xed\xb0\xad\xb3\xea\x4c\x35\x1e\x9f\xb0\x87\xf7\x51\x8b\xa6\xb9\x31\x78\x8f\xf0\xf5\x59\x39\x1e\xea\xe2\x1d\xe2\x40\xc2\x28\xe2\xbc\x1b\x3a\xbe\xa5\x09\x5e\x38\x47\x55\xfc\xbd\x5f\xb4\x10\xf0\xea\x6a\x59\x11\xf1\x4b\x83\xd6\xe9\xdf\x23\x00\xd0\x19\xae\xb8\x6d\x8d\x2e\xba\xdc\x51\x70\x77\x22\xc6\xfe\x1e\x0f\x8a\x07\xae\xb1\xd9\xe0\xf9\x2a\x1f\xc4\xe2\x32\x2b\xae\xe2\x39\x6e\xdf\x6c\x49\xed\x21\xa8\x6d\xe7\xc4\x18\x63\xc2\xc3\x98\x39\x99\xb8\xea\x38\xa7\x2f\xb5\xb5\xd7\xde\x1b\x8b\x45\x68\x8f\xf4\x92\x27\x57\x1a\x3b\x17\x4d\xa3\xcb\xeb\x99\xff\xdf\x63\xcd\xee\x9f\x00\x00\x00\xff\xff\x45\xb9\xf2\x04\x53\x02\x00\x00")

func templatesPartialsSecurityGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSecurityGomd,
		"templates/partials/security.gomd",
	)
}

func templatesPartialsSecurityGomd() (*asset, error) {
	bytes, err := templatesPartialsSecurityGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/security.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\xcc\x3e\x39\x80\x67\x10\x91\x88\x07\x08\xed\x14\x03\x8d\x96\xe6\xb9\x0a\xbd\xbb\x04\xb2\x90\x2e\xe7\x5b\xfc\xe3\xbd\x77\x96\x6d\xd5\x05\xad\x21\xdc\x52\x11\x8e\xc3\x75\x76\xad\xc1\x54\xb6\x35\x99\xc0\x5d\x75\xfb\xbc\xab\x1e\xd3\x4b\x25\x11\x73\x9e\x0c\x8c\x43\xa3\x16\x22\xfc\x2d\xb0\xa7\x38\x8a\xbc\xef\xaa\x79\xce\xdf\x12\xb5\x3c\xe3\x95\x08\x27\xe9\xa7\xbf\x00\x00\x00\xff\xff\x56\x01\xc5\xa0\x8c\x00\x00\x00")

func templatesResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesResponsesGomd,
		"templates/responses.gomd",
	)
}

func templatesResponsesGomd() (*asset, error) {
	bytes, err := templatesResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemasGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x09\x73\x55\x57\x2b\x94\xa4\xe6\x16\xe4\x24\x96\xa4\x2a\x28\x15\x27\x67\xa4\xe6\x26\x2a\x29\xa4\x64\x26\x97\x28\x28\x05\x83\x79\x41\xa9\x69\x4a\x0a\x7a\x70\xb6\x82\x12\x48\xbb\x12\xd4\x14\xa5\x80\xa2\xd4\xe2\xcc\x94\xcc\xd2\xdc\xa0\xd4\xb4\xd0\x20\x1f\x25\x05\x3d\x34\x11\x90\x45\x80\x00\x00\x00\xff\xff\xf5\x76\x34\x32\x80\x00\x00\x00")

func templatesSchemasGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemasGomd,
		"templates/schemas.gomd",
	)
}

func templatesSchemasGomd() (*asset, error) {
	bytes, err := templatesSchemasGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTagGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\x28\xc9\x77\x4e\xcc\x4d\xcd\x51\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x49\x73\x55\x57\x2b\xe8\xb9\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x81\xc4\xb9\xaa\xab\x75\x15\x32\xd3\x14\xf4\x5c\x2b\x4a\x52\x8b\xf2\x12\x73\x5c\xf2\x93\x8b\x41\x12\x0a\x0a\x0a\x0a\xd8\xe4\xd0\x0d\x50\x80\x82\x68\x90\xe1\x78\x14\xc6\x6a\x60\x28\x08\x0d\xf2\x51\xa8\xad\xd5\x84\x5b\x95\x9a\x53\x9c\x8a\x6c\xa4\x0d\x0e\x1d\x76\x08\x1d\x79\x29\x20\x0d\x08\x26\x20\x00\x00\xff\xff\x21\xf8\x46\x74\x06\x01\x00\x00")

func templatesTagGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesTagGomd,
		"templates/tag.gomd",
	)
}

func templatesTagGomd() (*asset, error) {
	bytes, err := templatesTagGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tag.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.gomd":                 templatesIndexGomd,
	"templates/info.gomd":                  templatesInfoGomd,
	"templates/operation.gomd":             templatesOperationGomd,
	"templates/partials/content.gomd":      templatesPartialsContentGomd,
	"templates/partials/headers.gomd":      templatesPartialsHeadersGomd,
	"templates/partials/parameters.gomd":   templatesPartialsParametersGomd,
	"templates/partials/request_body.gomd": templatesPartialsRequest_bodyGomd,
	"templates/partials/responses.gomd":    templatesPartialsResponsesGomd,
	"templates/partials/schema.gomd":       templatesPartialsSchemaGomd,
	"templates/partials/security.gomd":     templatesPartialsSecurityGomd,
	"templates/responses.gomd":             templatesResponsesGomd,
	"templates/schemas.gomd":               templatesSchemasGomd,
	"templates/tag.gomd":                   templatesTagGomd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.gomd":     &bintree{templatesIndexGomd, map[string]*bintree{}},
		"info.gomd":      &bintree{templatesInfoGomd, map[string]*bintree{}},
		"operation.gomd": &bintree{templatesOperationGomd, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"content.gomd":      &bintree{templatesPartialsContentGomd, map[string]*bintree{}},
			"headers.gomd":      &bintree{templatesPartialsHeadersGomd, map[string]*bintree{}},
			"parameters.gomd":   &bintree{templatesPartialsParametersGomd, map[string]*bintree{}},
			"request_body.gomd": &bintree{templatesPartialsRequest_bodyGomd, map[string]*bintree{}},
			"responses.gomd":    &bintree{templatesPartialsResponsesGomd, map[string]*bintree{}},
			"schema.gomd":       &bintree{templatesPartialsSchemaGomd, map[string]*bintree{}},
			"security.gomd":     &bintree{templatesPartialsSecurityGomd, map[string]*bintree{}},
		}},
		"responses.gomd": &bintree{templatesResponsesGomd, map[string]*bintree{}},
		"schemas.gomd":   &bintree{templatesSchemasGomd, map[string]*bintree{}},
		"tag.gomd":       &bintree{templatesTagGomd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
