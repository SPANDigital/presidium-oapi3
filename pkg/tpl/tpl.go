// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/.DS_Store (6.148kB)
// templates/index.gomd (28B)
// templates/info.gomd (481B)
// templates/operation.gomd (481B)
// templates/partials/content.gomd (712B)
// templates/partials/headers.gomd (694B)
// templates/partials/parameters.gomd (1.522kB)
// templates/partials/request_body.gomd (927B)
// templates/partials/responses.gomd (2.713kB)
// templates/partials/schema.gomd (12.345kB)
// templates/partials/security.gomd (595B)
// templates/responses.gomd (140B)
// templates/schemas.gomd (165B)
// templates/tag.gomd (262B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x31\x6a\x85\x40\x10\x86\xff\xd9\x58\x2c\xa4\xd9\x32\xe5\x5e\x21\x37\x58\xc4\x9c\x20\x17\x88\x89\x4d\x40\x30\xc4\xa4\xb7\xca\xb9\x72\xb4\x60\xf6\x7f\x28\xa8\x60\xf3\x78\xbe\xc7\xff\xc1\xf2\x15\xce\x8c\x62\xb1\x3b\xb3\x00\xac\xfc\x6e\x1e\x81\x00\xc0\x23\x1b\x3f\x58\xc5\x73\x2d\x70\xb4\xe5\x15\x80\x77\xd4\x68\xd1\x37\xfd\x5b\xbb\x5e\x6b\x81\xfd\x17\xff\x40\x8d\x4f\x7c\xcd\xf3\x5f\xbb\xae\xb5\x9d\x45\x84\x10\x42\x08\xb1\x1b\x1e\xaf\xfe\xfe\xd2\x1f\x22\x84\x38\x1c\xe3\xfe\x10\xe9\x44\x0f\xd9\xc6\xe7\x8e\x2e\x66\x39\x81\x8e\x74\xa2\x87\x6c\x63\x9c\xa3\x0b\xda\xd3\x81\x8e\x74\xa2\x87\x6c\x6e\x5a\xc6\xe1\xc3\xf8\x66\xe3\x84\x62\x81\x8e\x74\x3a\xcf\xbf\x11\xe2\xda\xb9\xcb\x0a\xe3\xf9\xff\xb4\x3d\xff\x0b\x21\x6e\x18\x2b\xaa\xe7\xaa\x9c\x06\x82\x05\x8e\x8d\xc0\x0b\x63\x7e\x4f\x89\x1b\x8d\x80\xcb\x17\x86\x0f\x98\xe2\xd4\x0c\x08\x71\x20\xfe\x02\x00\x00\xff\xff\x5b\xb4\xcc\xaf\x04\x18\x00\x00")

func templatesDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_templatesDs_store,
		"templates/.DS_Store",
	)
}

func templatesDs_store() (*asset, error) {
	bytes, err := templatesDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.DS_Store", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0x87, 0x1b, 0xd6, 0x5d, 0x9d, 0x1, 0x8d, 0x77, 0x78, 0x24, 0xb9, 0x1a, 0x9a, 0x47, 0x3b, 0x65, 0x7d, 0x16, 0x83, 0xf5, 0xc9, 0xc2, 0x3c, 0x64, 0x4a, 0x14, 0x2a, 0xc, 0x9f, 0x5c, 0x4c}}
	return a, nil
}

var _templatesIndexGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\x0b\x01\x31\x15\x6a\x6b\xb9\x40\xe2\x80\x00\x00\x00\xff\xff\xff\xd8\xd2\xd8\x1c\x00\x00\x00")

func templatesIndexGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexGomd,
		"templates/index.gomd",
	)
}

func templatesIndexGomd() (*asset, error) {
	bytes, err := templatesIndexGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0x7f, 0x37, 0xbd, 0xfa, 0xcb, 0x2, 0xbf, 0xb4, 0xb5, 0x43, 0x3a, 0x0, 0x8d, 0x36, 0x5c, 0x20, 0x16, 0xa9, 0xb4, 0x6a, 0x50, 0x14, 0xec, 0x73, 0xbf, 0x7, 0x47, 0xe6, 0x6b, 0xf6, 0xd3}}
	return a, nil
}

var _templatesInfoGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x3b\xab\x83\x30\x14\xc7\xf7\x7c\x8a\x03\xd9\x02\x09\xdc\x55\xc4\xe5\xde\xbb\x49\x0b\x56\xbb\x8b\x8d\x6d\xc0\x47\x89\xc1\x0e\xe2\x77\x2f\x27\x49\x7d\xa4\x1d\xea\x74\xfe\x8f\xf3\x3b\x12\xce\x39\x31\xca\x34\x32\x82\x69\x02\x91\xe3\x08\xf3\x4c\x1e\x52\x5d\x6f\x26\x82\x1f\x82\x0d\x42\x29\xdd\xe5\x30\x0a\x94\x67\xa9\x07\xd5\x77\xb8\x40\x50\xff\xc9\xa1\xd2\xea\x6e\x56\x8f\x83\xaa\x41\xe4\x52\xb7\xc3\xb1\x3e\x49\x3d\xaa\xca\xf2\x09\x00\x00\xa5\x60\x13\xe8\x6b\xf0\x59\xe4\x92\xd8\x1e\x0b\xb7\x12\x47\x94\xdd\x05\x11\x2f\xf8\x6f\xdf\x99\xb2\x32\x5b\xaa\xb7\x9c\x0e\x7a\xe2\x50\xb6\xf6\x17\xc0\x7f\x8c\xa1\xc3\x98\x7b\x81\xb0\xb5\x20\xfc\xd5\x4f\xc4\xff\xb6\x54\xcd\x1e\x69\xad\x90\xb9\xf4\xbe\x81\x16\x59\xba\x47\x16\x59\x8a\xc0\x78\x4b\x74\xa5\xe4\x0d\xb8\x8e\xcf\x00\x00\x00\xff\xff\x83\x10\xc4\x02\xe1\x01\x00\x00")

func templatesInfoGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesInfoGomd,
		"templates/info.gomd",
	)
}

func templatesInfoGomd() (*asset, error) {
	bytes, err := templatesInfoGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/info.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x2f, 0xf3, 0x6e, 0x83, 0x2c, 0xba, 0x22, 0xe9, 0x49, 0x9d, 0x6c, 0x87, 0x50, 0x42, 0xcb, 0x74, 0xb1, 0x50, 0x61, 0xe5, 0x89, 0xb3, 0xe0, 0xe0, 0xe1, 0x47, 0xd, 0x78, 0x22, 0x4e, 0x15}}
	return a, nil
}

var _templatesOperationGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcb\x6a\xc4\x30\x0c\x45\xf7\xf9\x0a\x91\x65\xc0\xf9\x80\x2e\xba\x28\xd9\x14\xfa\x62\xa6\xd0\x6d\x4c\xe6\xb6\x63\xc8\xc3\xb5\x15\x4a\x10\xfe\xf7\xa2\x4c\xd2\x94\x36\xb3\xf3\x91\x8e\xae\x84\x8d\x31\x99\x88\x21\xf7\x4e\xe5\x23\xf8\x3c\x9c\x5e\x1d\xb7\xa0\x94\x32\xd6\xc7\x0d\x89\xac\x1d\x4a\x69\xa6\x27\xdb\xcd\x82\x08\xa1\x8d\x7f\xdd\x67\x8f\x60\xd9\x0d\xfd\x7d\x75\x91\x0c\xa1\xd7\xd9\xec\x0b\xee\xe3\xcc\x17\xeb\x6d\x7e\x6b\x55\x2f\xc8\xea\xba\xce\xae\x2f\xd2\xae\xb6\xf5\xc8\x0a\x3e\xa0\xb1\x0c\xb5\x8a\x62\xc3\xa2\xf8\xb5\x6a\xb5\x8f\x63\xd7\xd9\x30\x69\xe0\xad\xc8\x8a\x73\xfc\x3f\xb7\x42\x6c\x82\xf3\x7a\x3a\xa5\x24\x42\x3b\xa5\x6d\xc4\x10\xa3\xf3\xad\x65\x50\xee\x6d\xb0\x1d\x18\x21\x3e\xb8\xc8\x39\x95\x2f\x3f\x85\xf5\x0b\x36\x39\xe0\x73\x44\xe4\xbb\xe1\x34\xe5\x54\x1e\x36\xda\x53\xa3\x1f\xfa\x88\x25\xf5\xb0\xe0\x4e\x68\x44\x33\x06\xc7\xd3\x62\x1e\x17\xa4\x94\xbe\x03\x00\x00\xff\xff\x7a\xb2\x89\xd0\xe1\x01\x00\x00")

func templatesOperationGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesOperationGomd,
		"templates/operation.gomd",
	)
}

func templatesOperationGomd() (*asset, error) {
	bytes, err := templatesOperationGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/operation.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x7c, 0xb, 0x2c, 0x51, 0xa5, 0x5, 0x79, 0x46, 0x37, 0x5f, 0x94, 0xf1, 0x9, 0x51, 0x94, 0xc6, 0x68, 0x7d, 0xfd, 0x22, 0x21, 0x90, 0x7a, 0x87, 0x7f, 0x9e, 0x60, 0x3, 0x1d, 0x11, 0x26}}
	return a, nil
}

var _templatesPartialsContentGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3d\x6f\x83\x30\x10\x86\x77\x7e\xc5\x2b\x8b\xc9\x6a\x60\x8f\xd4\xa9\x1f\x53\xdb\x54\x34\xdd\xe3\xe2\xa3\xb1\x54\x1b\x0a\xce\x10\x59\xfe\xef\x15\x04\xb0\x4b\x52\xa9\x0a\x0b\xc8\xf7\x9c\x79\xef\x39\xe7\x56\xc8\x39\xee\x6a\x63\xc9\x58\x58\xd2\xcd\x97\xb0\x04\x9e\x63\xe5\x7d\xd2\x97\x25\x55\xca\x10\x58\x79\x62\x98\xf7\x09\x00\xf4\xa5\xb4\x69\xa9\x53\x52\x1d\x74\x41\xd5\x7b\xf1\x84\xf5\x2d\xb2\xd7\xc5\x59\xc4\xb7\xc2\x7c\x12\x52\x23\x34\xdd\x20\xd5\x24\x95\xd8\x1e\x1b\x1a\xda\xa6\x08\x23\xde\x3f\x9c\x3f\xd6\xad\x16\x76\xcd\x39\x76\xce\x0d\x7d\xde\xef\x92\x19\x70\x2e\x24\x66\xf3\x75\x0c\x52\x95\x16\xec\x39\x1c\x44\xff\x62\x8b\x7c\xec\x7c\x0a\xf6\x22\x74\xdf\x94\xf5\xef\x38\x3f\x19\x39\x4a\x09\x5f\x39\xc7\x83\x91\xa8\xab\x3f\x25\x4e\x58\x41\x46\x52\xdb\x41\x60\x4e\x16\x7b\xce\x39\xb6\x9b\xfb\xcd\x88\xc1\xee\x09\x43\x6a\x2c\xc1\x69\x21\x61\xe0\x2b\x56\x32\x37\xa8\x0a\xd9\x9c\x27\x7b\x2b\xf7\xa4\x45\xbc\x84\x5f\x8e\xbb\xa1\x3c\x09\x3e\xc1\x05\x55\xec\xc2\x15\xff\xf7\x7c\x49\x33\x82\x67\x9c\x89\x6e\xe9\xfb\x40\x9d\xc5\x47\x2d\x8f\xa3\x98\x9f\x00\x00\x00\xff\xff\xc5\x1a\x74\x85\xc8\x02\x00\x00")

func templatesPartialsContentGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsContentGomd,
		"templates/partials/content.gomd",
	)
}

func templatesPartialsContentGomd() (*asset, error) {
	bytes, err := templatesPartialsContentGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/content.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0xcb, 0x64, 0x8f, 0x5, 0xb, 0xd, 0xc0, 0x85, 0x62, 0x98, 0x5e, 0x7, 0xa4, 0xea, 0xe5, 0x95, 0xed, 0x9f, 0xc9, 0xaa, 0x42, 0x9e, 0x9d, 0xdd, 0xcc, 0xa9, 0x9, 0x6d, 0x24, 0xa3, 0xf0}}
	return a, nil
}

var _templatesPartialsHeadersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x3d\x4f\xc3\x30\x14\xdc\xfb\x2b\x4e\x51\x07\xb0\x68\xca\x8c\xc4\x56\x24\x06\xa6\x52\xb1\x5b\xf1\xb9\xb5\x94\x38\xc1\x75\x07\xe4\xe4\xbf\xa3\x7c\x34\xb2\x1b\x3a\x90\xe9\xe9\xde\xdd\x29\xef\xce\x21\x6c\xb0\x15\x78\xa7\x54\x74\x38\xb0\x6a\x4a\xe9\x09\xb1\xc5\xa6\xeb\x56\x21\x28\x6a\x63\x89\xec\x34\x10\xb2\x01\x05\x80\x5e\xb7\x1e\x41\xbc\xbc\x22\xff\x92\xe5\x85\x88\x97\x8e\x7a\xd8\xec\xa9\x63\xdc\xe8\x59\x37\xa1\xcb\x4d\xbe\xe7\xf7\xc5\x38\xaa\x98\x22\xdc\x04\x8a\x48\x45\xab\x12\x97\xd8\x64\xc7\xc6\xb1\x90\xfe\xc6\x46\xcd\xf0\xc2\x08\x2d\x42\xf0\xd7\x0c\xb2\xba\xa1\x93\xde\xd4\xf6\xb3\x38\xb1\x92\x87\x9f\x86\xd9\xec\x3e\x62\x18\x44\x22\x4a\x23\xdf\xf1\x5c\x38\xd3\xf4\xba\x3e\x2d\x81\x76\xbe\x9d\x76\xf8\x95\x69\x9c\xa6\xad\xc0\x9b\x55\xa8\xf5\xbd\x12\x56\x49\x47\x1f\xe6\xec\xe1\x17\x3d\x21\x2d\xaa\x67\xa5\x65\x19\x8d\xa3\xc7\x43\x49\x8b\xfc\x11\xcf\xb7\xe1\x3b\x69\x8f\xc4\xda\xca\x8a\x4f\x49\xb1\x11\xaf\xff\x5a\x08\x11\xc2\x48\x44\xd7\x09\x91\x24\x76\x7d\x25\x77\x1a\x9e\xee\xff\x57\x1c\x7f\xde\xfb\x1b\x00\x00\xff\xff\x1b\x02\x9f\x55\xb6\x02\x00\x00")

func templatesPartialsHeadersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeadersGomd,
		"templates/partials/headers.gomd",
	)
}

func templatesPartialsHeadersGomd() (*asset, error) {
	bytes, err := templatesPartialsHeadersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/headers.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0xa8, 0x21, 0x1d, 0x3a, 0xd0, 0xac, 0x34, 0xc6, 0xb3, 0x9b, 0x87, 0xfa, 0x12, 0xb9, 0x80, 0xf3, 0xf, 0x3e, 0x7c, 0x8d, 0x1e, 0xa3, 0xf, 0xe4, 0x93, 0xfc, 0x3, 0x1c, 0x37, 0x95, 0x81}}
	return a, nil
}

var _templatesPartialsParametersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x06\x8a\x0f\x09\x51\xcb\x3d\x17\xe8\xad\x2d\x60\xc0\x28\xda\xb4\xe8\x9d\x95\x56\x31\x11\x89\x52\x48\xba\x6d\x20\xf1\xdf\x0b\x52\x94\x44\xfa\x91\x84\x07\x5b\xe4\x70\xf6\x31\xbb\xdc\xbe\xdf\x60\xcb\x60\x0e\x42\xc3\x50\xd3\xd5\xdc\x10\x14\x15\x24\xfe\x90\x06\xc7\x37\xae\x78\x43\x86\xd4\x3d\x55\xf8\x7b\x10\xc5\x01\x45\x2b\x0d\x17\xd2\xa1\xee\x90\xcb\x32\xbe\x07\xb6\xc5\xc6\xda\x95\x33\x5c\x52\x25\x24\x21\xeb\x26\x30\x83\xb5\x2b\x00\x70\xe8\x7a\x3e\xc6\x87\x8f\xc8\x7f\xf1\xfa\x48\x09\xae\xa8\xf2\x88\xf3\x12\x9d\x8b\x2a\xa6\x06\xc0\xad\x01\x8c\xf5\x7d\x04\xe6\x5f\x79\xe3\x4c\x32\x76\x01\xdb\xc9\x11\xe9\xfb\xd4\x62\x7e\x4f\x4f\x47\xa1\xa8\x84\xb5\x60\x2a\x6c\xdc\x3d\x92\xa5\xb5\xe7\xf7\x3f\x51\xa7\xa8\xe0\x66\x64\x80\x95\xf3\x7e\x21\x0d\x3e\xf2\x59\xe0\x45\x91\x9f\xcf\x1d\x65\xb1\xb5\x1f\xc5\x81\x1a\x8e\xc0\xc1\x6f\x45\xfc\x71\xef\x54\x4c\x3c\xea\x42\x89\xce\x88\x56\xba\x7b\xb3\x32\x24\x5d\x08\xab\xf0\x19\xbe\xb6\x0c\x9f\x65\x89\xb6\x42\x77\x5a\xa3\xd5\xb5\xea\x0b\x1a\xab\x1f\x82\xa9\x5a\x05\x7e\x4e\xbf\x58\xe2\x31\xa1\x37\x94\x71\xad\x47\xe3\x49\xed\x93\x22\xab\x85\x30\x1d\x8f\x9c\xbd\x90\x8f\x09\xec\x33\xae\x35\x79\x9a\x9e\x14\x4c\x98\xa2\x02\x3d\x4d\x60\xee\xa2\x44\xc6\x95\xe2\xcf\x99\xcf\x05\xd1\x7a\xb9\x54\xc1\xc2\xce\x50\xa3\x13\x6a\x1c\x84\x6c\x4d\xea\xeb\xdc\x47\xe4\xa2\x16\xda\x7c\x3f\x72\x69\x44\x25\x48\xe9\xec\x5a\x0e\xde\xfa\x85\x60\x13\x4f\xbe\x45\x37\x91\x12\xf9\x97\x56\x35\xdc\x38\xe0\xb6\xef\xd3\x43\x6b\xef\xa6\x1e\x4d\x3d\x8d\x9d\x74\xb9\xb1\xb0\x74\x16\x12\x75\x5e\xed\xab\x69\xaa\xec\x85\x36\xae\x23\x93\xe9\xf2\x52\x57\x69\xc7\xc8\x4e\xa6\xc0\x83\xc1\x6d\x4d\x12\xf9\x1d\xde\xcf\xcd\xe3\xd6\xcd\x0d\xdc\x23\x26\x6d\x16\x0f\x7a\x15\xcd\x09\x3f\x17\x06\xec\x24\x06\xf8\xc0\x07\x44\x6f\x2a\xbc\x28\x7f\x75\xe3\xd7\x30\xff\xcc\x7f\x61\x0d\x89\x6c\x8a\xcb\x07\xc2\x5a\xc8\x92\xfe\xbd\x3b\x1d\x70\x6f\xeb\xb2\xec\xca\x70\x8b\xb4\x0f\x1a\x2c\xa5\x38\x29\x4a\x78\xee\x4b\xea\xa3\xde\x41\xdf\xff\x01\x00\x00\xff\xff\xcb\x87\x72\x8a\xf2\x05\x00\x00")

func templatesPartialsParametersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsParametersGomd,
		"templates/partials/parameters.gomd",
	)
}

func templatesPartialsParametersGomd() (*asset, error) {
	bytes, err := templatesPartialsParametersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/parameters.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0x75, 0x68, 0x78, 0x2e, 0x4d, 0x22, 0x2, 0x8, 0xe5, 0xea, 0x1a, 0x8a, 0x42, 0x47, 0x52, 0x75, 0xf0, 0x6a, 0x8c, 0x90, 0xf6, 0x9c, 0xe4, 0x41, 0x42, 0x77, 0x7b, 0xc2, 0xa1, 0xf0, 0x7a}}
	return a, nil
}

var _templatesPartialsRequest_bodyGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x4d\x6f\xab\x30\x10\xbc\xf3\x2b\x46\x24\x27\xf4\x20\xf7\x48\xb9\xbc\x8f\xdb\x6b\x0f\xb4\xea\xdd\x81\x25\x58\x0d\x86\x1a\xa7\x55\x64\xfc\xdf\x2b\xf3\x55\xdb\xa5\x3e\x79\x77\x66\xd6\x5e\xcf\x5a\xeb\x14\x87\x04\xaa\xe6\x3d\x14\x35\xdd\x95\x29\x82\xa4\x82\xf8\x3b\xf5\x60\xc8\xe9\x72\xa3\x5e\xfd\x6e\xcb\x7b\x4e\x15\x3e\x6a\x5e\xd4\x28\x5a\xa1\x18\x17\x13\x5e\x81\x89\x12\x0c\x2f\xec\x7a\x23\x24\x07\xa4\xc6\x44\xb6\x6c\x49\x15\x17\x84\x58\xd2\xdb\x52\x22\x36\x26\x02\x00\x0b\xf3\x0a\x19\x9c\x78\xef\xf0\x70\x3c\x21\x1b\x0b\xfa\x84\x6a\x04\x72\xaa\xe6\xb4\x53\xcb\x93\x3b\xb0\x5d\xbb\x1d\xf2\x09\x85\x85\x23\x0f\xd4\x3a\x94\x67\x96\xcc\x25\x95\x30\x26\x49\x96\x20\x49\xb4\xa6\x6b\x4f\x36\xf7\xd8\x2a\x78\x79\x51\x1a\xe3\x97\x1d\xf0\x40\x25\x67\xcf\xf7\x8e\x30\xe0\x2f\xf5\x85\xe4\x9d\xe2\xad\xc0\x80\xa7\xa2\xa6\x86\x61\xf0\x05\xe9\xd7\x72\xf7\x4e\x34\x04\x17\x4f\x21\x99\xb8\x10\xf6\x82\x35\xf4\x0b\xfb\x66\x3d\xf1\x78\xf2\x3b\xfa\xd3\x0a\x45\x42\x85\x0f\xe3\xbe\xdf\x2a\xce\xe6\xeb\x6d\x70\x57\x2b\xfa\x91\x92\x4f\x86\x7c\x93\x06\x0e\xfd\xa0\xde\x96\xba\xae\x87\x6b\x80\xd6\x63\xaf\xc6\x8c\x7b\x9c\x25\xb1\xd7\xff\x76\xca\xbc\x6e\xdd\xd7\x5e\xa8\xeb\x70\xc7\x6d\x47\x92\x59\x6c\x3a\xd1\x1e\x1e\x6f\xb6\x1f\x18\xb4\x5c\x7f\x32\x7b\x3b\x1b\x05\x29\x77\xc0\xe7\x30\xd8\x1e\x12\xfc\x13\x25\xda\x0a\x73\x07\x38\xdb\x09\x9e\xff\xd1\x67\x00\x00\x00\xff\xff\xc3\xef\x05\xfd\x9f\x03\x00\x00")

func templatesPartialsRequest_bodyGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsRequest_bodyGomd,
		"templates/partials/request_body.gomd",
	)
}

func templatesPartialsRequest_bodyGomd() (*asset, error) {
	bytes, err := templatesPartialsRequest_bodyGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/request_body.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0xa2, 0xe1, 0xbe, 0x5d, 0xf, 0x84, 0x22, 0x62, 0x4d, 0x3, 0xcc, 0x18, 0x30, 0x48, 0xd8, 0x1b, 0xb9, 0x20, 0xc2, 0xe9, 0xb5, 0x96, 0x79, 0x78, 0x62, 0x6c, 0xba, 0x8c, 0x2a, 0x58, 0x6b}}
	return a, nil
}

var _templatesPartialsResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\x9c\x3c\x10\xbe\xf3\x2b\x46\x66\x0f\xef\x1b\x65\x49\xcf\x95\xda\xcb\xb6\x52\x0e\xdb\x28\x22\xdb\x5e\x2b\x77\x19\x12\x94\xc5\x20\xec\x3d\x54\xc0\x7f\xaf\xfc\x81\x6d\x8c\xbb\x45\xdd\x94\x13\xb6\x9f\xb1\xe7\xe3\x99\x67\xfa\x7e\x0b\x77\x37\x90\x23\x6f\x1b\xc6\x11\x04\xd6\xed\x89\x0a\x84\x9b\x3b\xd8\x8e\x63\x22\xcf\x0b\x2c\x2b\x86\x40\x3a\x03\x22\x30\x8e\x09\x00\x80\x3c\xdc\x74\x58\xc2\xfb\x0f\x90\x4d\x57\x64\x39\x96\x01\xc0\xdc\x3d\x43\x7d\xa3\xa7\x33\xce\x70\x5c\x50\x71\xe6\x0a\xf5\xa4\x7f\xbd\xd3\xaa\x04\xca\x0a\xfd\x9a\xbd\x31\xdb\x35\x4c\x20\x13\x06\x37\x61\x3b\xca\x9e\x11\x36\x8c\xd6\x78\x0b\x9b\x1a\x8b\x8a\x1e\x7e\xb6\xea\xfd\x85\x29\x78\xb6\xf2\x1b\xa0\xef\x8d\x27\xe3\xa8\x56\xf0\xa3\x43\xfa\xba\x97\x19\x70\xd6\x9f\x90\x1f\xbb\xaa\x15\x55\xc3\x60\xc2\xa9\x07\xed\x8a\x1f\x5f\xb0\xa6\xfb\x8a\xbd\x6a\xa7\xe5\xfe\xcc\x4b\x64\x85\x1f\x20\x9e\x38\xca\x28\x15\xda\x73\xea\x6f\x1d\xda\xfe\xc1\x0d\xff\xcd\x8b\x59\xb9\x36\xa3\xa6\x7a\xce\x2a\x7b\x52\x3e\x85\x38\xc7\x03\x75\x9c\x6b\x5a\x2d\xcc\x24\xbd\x2e\x5b\xc6\xcd\x14\xdf\x22\x86\x6f\x56\x70\xdb\x39\xa4\x69\xb1\xa3\x12\xa9\x9f\x96\x5e\x90\x68\xfc\x1e\x23\x3c\x56\x04\xb9\x77\x3b\xb6\x64\x6f\x44\x8f\xad\x4f\x05\xf5\x8a\xc7\x4b\x23\x0c\x9f\x59\x01\x4d\xf9\x7b\x7d\x48\x02\x01\xd9\x57\x5c\xac\x12\x11\x09\xf4\x84\x44\x52\xe4\x59\xc0\x7f\x27\x64\x90\xfd\x0f\xef\xfc\x18\xd3\xd4\x5e\xcf\x13\x2f\xf2\xfb\xc3\xe1\x11\x76\x4d\x81\x30\x80\x1f\xe0\x00\x5f\x2c\x43\x07\x30\xd9\x76\xa9\x1e\xb6\xee\xf3\xff\xe7\x2b\xfb\x3f\xc4\x3a\x41\x67\xfc\x36\x10\xb7\x18\xf5\x1d\x2d\x9c\x7c\x16\xd5\x51\x00\xc9\xed\xda\xdd\x42\xb4\xf2\x11\xab\x86\x4b\x32\xc8\xad\xeb\x5c\x9a\x24\xdb\xd1\xc3\x93\xec\x00\xa8\x01\x5a\xac\x67\x26\x33\xfd\x0e\x7a\x7d\x2a\xe4\xdc\x3e\xbb\x47\x5a\x60\xc7\x4d\x75\x17\x9d\x98\xa6\x69\xaa\xda\xca\x86\x0e\xc6\x62\x89\x1d\xe0\x41\xf6\xde\x00\xa6\xc8\xb3\xf2\x2f\xd1\xb3\x92\x06\x35\x8f\x4a\x89\xab\xda\x8b\x72\x41\xb3\x35\x1e\x4f\x2c\x09\x9e\xb8\x47\xb6\x82\x36\xbb\xae\xe3\xbe\x1b\xd5\x5b\xd3\x74\xba\x17\xc8\xa5\xf1\x9d\x63\xb9\x6e\x82\x4b\xe0\x72\x88\xb7\x1d\xf2\xaa\xa8\xce\x75\x8e\xe5\xd7\x7c\xaf\x2c\x1e\x83\x3d\x1f\xaf\x24\x54\x82\x1e\xb4\x96\x26\xfe\xc4\x67\x8d\x98\xa6\x96\x4d\xe5\xc7\xbe\x8f\xca\xda\xbc\x2b\xa2\x2c\xbc\x44\xc0\xf5\x84\x5a\x4f\xa6\x15\x44\x8a\x71\x28\xde\xe7\xf1\x88\xcc\xcc\x0d\x04\xd3\x58\xb8\xb7\x8f\x1a\x36\x29\xcf\x6e\x5a\x2e\x87\x37\x09\x8a\x45\x96\xe5\x23\x32\x53\xc4\x55\xec\x9f\x90\x3c\xf9\x15\x00\x00\xff\xff\x3b\x63\xf5\xf8\x99\x0a\x00\x00")

func templatesPartialsResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsResponsesGomd,
		"templates/partials/responses.gomd",
	)
}

func templatesPartialsResponsesGomd() (*asset, error) {
	bytes, err := templatesPartialsResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0x6, 0x7d, 0xe0, 0xb5, 0x6f, 0xf8, 0x32, 0x64, 0xf3, 0x25, 0xd4, 0x1c, 0x7d, 0x9a, 0x92, 0xb, 0x15, 0x32, 0xca, 0xe8, 0x66, 0x84, 0x43, 0xcf, 0xe2, 0x75, 0xc9, 0xe2, 0xbf, 0xdc, 0x3e}}
	return a, nil
}

var _templatesPartialsSchemaGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x5b\x6f\xdb\x3a\x12\x7e\xcf\xaf\x18\x28\xc9\xc2\x16\x8e\x9c\x3d\xfb\xe8\xdd\x1c\x20\xd8\xed\x01\x0a\xa4\x8d\xd7\x69\xfb\x52\xf4\x41\xb1\xa9\x84\x5b\x99\x72\x74\xc9\xc6\x90\xf5\xdf\x0f\x48\x8a\xd2\xf0\x66\xcb\xa9\x93\x36\x2f\xb1\xc8\xe1\x70\x38\xf3\x71\x6e\x52\x5d\x47\xb0\x24\x09\x65\x04\x82\x62\xf1\x40\x56\x71\xd0\x34\x27\x00\x00\x7c\xe6\x2c\x27\x09\x4c\x2f\x61\x72\x2b\xa6\xe6\x24\x99\xcc\x49\x02\x98\x42\x2e\x32\x88\xbe\xc4\x69\x45\x34\xb2\x75\x4e\x0a\xba\xa4\xd5\x6a\x4e\x92\xcf\xf3\x6b\x41\x3f\x33\xc6\x30\x3d\x8b\x57\x44\x10\x7d\xe4\x3f\x34\x91\xb2\xac\xfc\xa8\x66\xe7\xea\x61\xcb\x4f\x11\x57\x69\xd9\xae\x88\xd0\x92\x8b\x10\xde\x27\x50\x3e\xd0\x02\x5a\x69\x69\x01\x31\xe4\x24\x21\x39\x61\x0b\x02\xe1\x85\x46\x4f\x13\x60\x59\x29\x0f\xdf\x34\x27\x62\x1c\xcd\xc5\x6c\xd9\x1d\xbb\xfd\x3f\xf9\x0f\x29\x16\x39\x5d\x97\x34\x63\xd0\x34\x10\x86\x68\x60\x1a\x86\x7c\xad\x8f\x96\x4f\x11\xb6\x34\x76\xe2\x1b\xa9\x05\x9f\x36\xeb\x4e\x05\x03\x64\x69\xc9\x21\x0c\xf9\x2f\xbe\x3b\xda\xbc\x9d\xfc\xd7\x5d\xfe\x47\xb7\x73\xd4\x34\x8a\x9f\x22\x9b\x93\x78\x79\xc3\xd2\x8d\xe4\xc3\x9f\x80\x3f\xca\x93\x44\xbe\x55\x1f\xab\x34\x8d\xef\xd2\x76\x77\xf5\x64\x2c\x3a\x31\xce\x01\x25\x59\xad\xd3\xb8\x24\x10\xe4\xa4\x28\x73\xba\xe0\x9a\x29\x82\xee\x5c\xe8\xe4\x4e\x36\xba\xb2\x66\x79\xb6\x26\x79\x49\x49\x01\xe6\x5e\x61\xd8\x4f\x4e\xc3\x70\x87\x20\xeb\x8e\x2e\x80\x25\x5d\x94\x10\x48\x6c\xf7\x42\x05\x06\x78\x03\x1b\xe2\x81\x02\x67\x80\x40\x1b\xbc\x67\x29\x65\x64\x86\x36\x98\x98\x43\x96\xe0\x08\x94\x36\x71\x64\x20\xc3\x3a\x0c\x23\x45\x49\x96\xb3\x57\x3b\x92\x03\x99\xca\x46\x48\x1e\x07\xc4\xb1\xbe\x29\x2b\xff\x5b\xc5\xac\xa4\x09\x25\xf9\xb1\x44\x14\x4e\x24\x70\xc8\x7b\x82\x05\x6d\x9a\x13\x0d\x57\xd8\x25\x62\x20\xe8\x7e\xf1\xb1\xa2\x39\x59\x22\xbf\x37\x99\xab\x31\x4c\x58\xe5\xe9\x5e\x5f\xe7\xf6\x68\x98\x82\x9a\x46\xe7\x94\x5e\xd8\x6c\xa1\x75\x89\xe2\xb2\x6f\x01\x3b\x9c\x2d\xcc\xd1\x25\x83\xad\x5c\x10\x89\x3f\xfd\x5f\xe4\x7a\x8a\xb6\x9d\x50\x79\xcc\xee\x89\xd4\xf1\x6f\xdc\x0c\x42\x8c\x0d\x56\x88\x2e\x1a\xc6\x87\x75\xd3\x36\xca\xe2\xb3\xee\xb9\x67\x19\xfc\x59\xa5\xa9\xcb\xa4\xf2\xc1\x79\xcd\x6c\xa0\x70\x4b\x38\x6e\x9f\xad\x5b\x1c\x0a\x14\x28\xf6\x01\x64\xf3\x42\x78\x68\x6a\x53\x67\x1f\x18\x08\x93\x56\x2b\x62\x56\xa9\xe8\x15\xc0\xf7\x24\x82\xf9\xf4\xb2\x97\xd6\x11\xdf\xcb\x07\x32\x97\xb9\x42\x4f\x85\x52\x85\xad\x88\x41\x9d\xc4\x51\x37\xac\x45\xb2\x91\x08\xbb\x92\xd5\x18\x46\xe4\xb1\xdd\x5c\x46\xad\x20\xbb\xfb\x1f\x59\x94\xc1\x58\x8d\x7a\x9c\xe0\xd7\xba\x16\x5a\x6b\x9a\x6f\xa3\xba\x0e\xea\xfa\xfc\x2e\x2e\x48\x95\xa7\xe7\x4d\x13\x34\x4d\x5d\x73\xbd\x34\xcd\xc5\x22\x5b\xad\x33\x46\x58\x59\x5c\x48\xf7\x52\x5c\x9c\xea\xe0\xcc\x9d\xde\x2e\xaa\x6b\x48\xb3\xff\x93\xbc\x35\x4e\xd3\x8c\x7b\xbc\xa4\x05\xf1\x83\x5d\x6e\xc3\x0f\xb3\x13\xee\x2f\x45\x77\x64\x6c\x4c\x13\x18\x51\x76\x5b\xe6\x94\xdd\xdf\xa6\x74\x41\x10\x30\x05\xf7\xb1\xc8\x3f\x78\x7c\x97\xa3\x22\x55\x70\x79\x6f\x19\xe5\xa5\xd6\x71\x6a\x60\xe4\x06\xfb\x17\xe3\x0c\x41\x4f\x11\xcc\xb5\xe6\xf3\x56\xc5\x79\xc9\xc8\x48\xa2\xea\x1a\xee\x72\x12\x7f\xbf\xe6\x97\xd2\x4b\x62\xf1\xf3\xa6\x1e\x4f\x2d\xc0\x61\x7b\x82\xd3\xc2\xdd\xd1\x57\xe9\xdc\x01\xe5\x2c\xdf\x01\x67\x49\xdb\x4f\x8d\x1d\x08\x1f\xbb\xc2\xac\x72\xc1\xdc\xff\x8a\xab\x67\xdd\x0b\x67\x6e\xc0\x7d\x07\xe3\xf4\x22\xec\x26\x10\x9c\x17\xf0\x07\x9c\x17\x0a\x73\x67\xcc\xb7\x6e\x98\xdf\xd6\x1c\x76\xc2\x7a\x40\xbf\x18\xcd\xfe\xbc\xc2\x0f\x1a\xaf\xcb\xb6\xf3\xa1\x6e\xf5\x50\xcf\x3d\xc0\xb5\xee\xf0\xac\x47\x09\xa1\x5d\x69\x86\xbc\xac\xed\xb2\x75\x4f\xdd\xcd\xc7\xcb\x25\xe5\x50\x8f\x53\xbe\x01\x82\xce\x95\x36\xe1\xd9\x99\x96\x64\x55\xa0\x45\xef\xc5\xb3\xa7\x52\x1a\xa9\x52\xea\x18\xb7\xc0\xc4\xe5\xe9\xa9\xd0\x74\xeb\x86\xa1\x86\x17\x3a\x70\x30\xa1\x66\x39\x6d\x3d\x23\x9d\x93\xc4\xef\xb1\x77\xa6\x1e\x01\x94\x79\xe5\x71\xeb\xfb\x0b\x9d\xbe\xe6\x33\x2c\x68\xdd\x15\x38\x93\x30\x57\x41\x59\xa7\x37\x41\xa3\xaf\xf9\xd2\x05\x7c\x63\x55\x07\x26\x5f\x29\x2a\x6d\xd8\xed\x8c\x4c\x8e\x38\xbb\x0d\x6f\x12\x8c\x2d\x8f\xf7\x8a\x06\x3f\xc0\xe8\x86\xe2\x8f\x6f\xfa\x21\xbe\xce\x8a\xae\x54\x5d\x41\xd3\xa2\x7c\x42\x61\x40\x10\xf9\x4c\xcf\x27\x7b\xc3\x4b\xd2\x81\xf6\x6e\xf7\x40\xd6\xee\x98\xb9\x6d\xad\x4f\xff\xaa\x96\x96\x3a\xfd\x89\x06\x76\x0e\xfc\x9c\x98\xd1\x19\x3c\xcb\xbb\x50\x91\xa6\x37\x5d\x3a\x76\xc5\x36\xfd\xc3\x0d\x23\x37\xc9\x18\x7b\xfe\x37\x73\xdb\xbb\x12\xc4\xfd\x79\xe1\xae\x86\xd0\x9e\x06\x85\xd4\x9e\x0f\x1f\xce\xb4\x07\x03\xcb\xd9\x2b\x31\x31\xb0\xa3\x08\x35\xa5\x43\x69\x88\xd5\xa0\x45\x73\x07\x75\x65\xbd\xb5\xe8\xde\x22\x12\xf7\xe7\x04\x38\xd4\x54\x18\xde\x30\x02\x37\xc9\x34\x0c\x4f\x2c\x9d\x3f\xfa\xd4\xdd\xf7\x06\x5b\x6e\x2f\x6e\xc6\x39\x4c\x60\xb4\xaa\x74\xe1\x25\xe6\x3b\xe1\xaf\xd2\xf4\x47\x84\x97\xdc\xde\x4e\x78\x71\x47\x7b\xe1\xd9\xe6\x87\x84\x17\xdc\x5e\x47\x78\x2f\xd0\x1f\x0d\x8c\x1f\x25\x1d\xdf\x89\xee\x97\x36\xd1\x06\x76\xcf\xe8\xf2\xd9\xed\xc5\x1d\x59\xb7\x88\x31\xff\xce\x2a\x56\x72\xba\xdf\xbd\xfe\xdb\xd3\xa6\x81\x81\xad\x1a\x78\xad\xbe\x0c\x72\x70\xaa\xf0\xbc\x5d\x67\x25\xfc\x63\x0a\xe7\xa7\x4f\xad\xab\x74\xd0\x7f\x95\xd1\x15\xa4\x62\xa0\xae\xb1\x2a\x5e\xb1\xc9\x83\x62\x4d\xd3\x44\x72\xcf\x48\x32\x89\x4c\x21\xc6\xee\x32\x1b\xdb\xec\x12\x8a\x6a\xa5\x0f\xfd\xee\x4c\x0b\x8c\x16\x12\x9e\xfb\x29\xad\x24\x33\x0c\xf5\x20\x39\x6e\x47\x06\x0e\xe9\xca\x98\x42\xbd\xe2\xc5\x3a\x30\x69\xda\x57\x04\x1f\x70\x7b\xcc\x94\xe4\xf4\xf4\x14\xcc\xcb\xa0\xcb\x7f\x50\x36\x75\x08\xc0\x8f\x54\x21\xef\xc3\xdd\x4b\x7b\x3b\x17\x21\xf4\x37\x02\x3e\x29\xd1\xda\x17\xbb\xf6\x4b\x6e\x79\x71\x5c\x6f\xba\x67\x0e\x97\x68\xbe\xe8\x9e\xf9\xfb\xe0\x87\xbe\xb7\x3e\xb4\x5d\xef\xe8\xdc\xa8\x80\xec\x69\xdd\xe0\xfe\xa5\xf3\x95\xb6\x5c\x7f\x4d\xd9\x77\x7d\xbe\x73\x46\x7d\x0e\x61\xda\x87\x26\xc0\xe1\x8c\xdf\x2d\x07\x71\x9e\xc7\x9b\xc0\xe9\x41\x50\xe7\xa8\x5d\x22\x5b\x47\x2e\x5a\x9a\x00\xaf\x35\x50\x21\xaa\x8a\x0c\x6d\x48\x16\x21\x78\x48\xa6\x84\xee\xc0\x83\xaf\x45\x4a\x0b\x3d\x67\xd6\x8a\x5e\xa7\x03\xe4\xca\xf0\x31\xee\xaa\x70\x01\x1c\x17\x95\x8d\x84\x4b\xb8\x27\xe5\x9c\x24\x1c\x0d\xed\x85\x1e\xc0\xe3\xeb\x1b\xbc\xe0\xd0\x5c\xc3\xf8\x9b\xf3\xc4\x5e\x75\x80\x7c\x09\x33\x38\x5c\x69\x58\xf8\x91\x90\xe5\x91\xd3\x88\x31\xbe\x71\x8c\x77\x0b\xd5\xad\x97\xb6\x18\xbd\xb9\x2d\x9c\xe2\x8a\xf0\x82\xe5\xf5\xdc\x28\x47\xeb\xd0\x0b\xb5\xfd\x50\x1d\xd2\x53\x74\xab\xff\x17\xd0\x9a\xcb\x3d\x19\x1f\xd0\x18\x5f\xb7\xfc\x99\xe5\xab\x58\x84\xd8\x51\x5d\xeb\x83\x4d\x33\x86\xba\x26\x6c\xe9\x88\x5f\x7a\xf8\x42\xc1\xab\xfd\x79\x11\xc2\x3b\xb6\x84\x2c\xd9\x15\xc1\x14\x25\x4e\x88\x7a\x2d\x38\xc2\x9c\x9e\x39\x45\xfd\x5e\x73\xc2\x96\x24\x87\x38\x4d\x75\x66\xf6\x37\x50\x93\x0f\x55\x5a\xd2\x75\x2a\xeb\x75\x08\x43\xf5\x0c\x59\x12\x86\x53\x9e\x03\xe8\x24\xea\xa3\x22\x3b\x6e\x0b\x6e\xf1\x73\xcb\x26\x7e\xa6\xab\x6a\xd5\xb1\x10\xe3\xbb\xd7\xbe\x7b\x5e\xa4\x55\x41\x9f\x48\xc7\xa4\x1b\x81\x55\xcf\xae\xcc\x2b\xb2\x47\x08\xda\x7e\x9f\xf5\x81\x32\x4d\x08\x31\x3e\x54\x08\xc5\x04\x09\xd1\xb3\x1b\x20\x44\xfc\x7c\x4d\xd8\x7d\xf9\xa0\xe9\x03\x52\x31\x86\xd4\xd2\x11\xed\x3d\x93\xc6\x4e\x8a\x62\xb2\x43\x44\xbb\xd9\xcd\xe2\xb2\x24\x79\x7b\xc2\xf6\x41\x71\xe9\xe7\xf6\x9e\x50\xbd\x14\x42\x07\x14\xa1\x0d\x9d\x4f\x91\xec\x3d\x1e\xe6\xd5\x9e\x4e\xe7\xd5\x93\xec\xe6\xf5\x99\xd1\xc7\x8a\x20\x76\x68\x60\xb0\xed\xb8\xb3\x33\x4e\xd6\x7f\x26\x84\x8e\xa7\xe8\xf6\x1e\x0f\x33\x6c\x8f\xe7\x60\xd8\xd3\xf9\x18\x0a\x7e\xae\x34\xf0\x2a\xe5\xde\x70\x29\xb7\xe8\x09\xd0\x2e\xdc\x1f\x70\x92\x41\x4a\xb8\x2f\x61\x94\x12\x06\x93\x77\xac\x5a\x8d\xe1\xef\x9a\x7b\x0f\x43\x3e\x1a\x86\xd3\xbf\xb1\xbb\x62\xfd\x4f\xcd\x1d\x6a\xb5\x59\x5f\x3a\xf1\x05\xee\x7c\x51\xd0\x34\x8d\x83\xd5\x90\xca\x40\xf7\xae\x4e\xd7\x69\xb8\xd7\xd6\x39\xf2\x48\x02\x22\x01\x71\x79\xd6\x2e\xe2\x18\x96\xb4\x92\x89\x51\x91\x56\xf7\x34\xd9\xc0\x48\x06\xa3\xc9\x78\x3c\x54\x66\x9f\x20\x6a\x9e\xdb\x2d\xe6\x47\xb9\x1d\x56\xf5\x38\xe8\xdd\xe5\xcf\x8e\xaa\x47\xaf\x70\x8d\x8a\x02\x9f\xdb\x51\x50\x98\x09\x8b\xbf\x9e\xe8\x82\x30\x2d\x53\x77\x1e\xe3\xa7\xf0\x66\xa5\x07\xd6\x2a\x60\x27\xb0\x4e\x05\x5a\x55\xcc\x37\x77\xcd\x30\x24\x43\x03\xb3\xaa\xb6\xeb\x13\x5b\x67\x30\xa0\x67\x74\xdc\xac\x06\xec\xcc\xc6\x31\x34\xec\x46\x0e\x01\xb1\x86\x62\x53\x25\x36\x50\xe5\x97\x91\xb2\x2a\xc4\x57\xed\x4c\xd6\xca\x81\x98\x09\x8c\x8b\xab\x35\xc6\x2d\x86\x97\x8a\xc0\x44\x1a\xe7\xc9\x59\xf2\xc9\xc0\x05\x72\xfd\x5d\x87\x8b\xb1\x5d\xab\x22\xc6\x62\x32\x70\x7a\x8c\xb6\x85\x5f\xd7\x82\xb6\x69\xa6\xed\x07\x54\x9a\x83\xed\xaf\x6e\xb7\x65\xc4\x73\xeb\xa1\xb0\xe6\xd4\xbf\x79\x4d\xf9\x57\x00\x00\x00\xff\xff\xdc\xd1\xb5\x21\x39\x30\x00\x00")

func templatesPartialsSchemaGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSchemaGomd,
		"templates/partials/schema.gomd",
	)
}

func templatesPartialsSchemaGomd() (*asset, error) {
	bytes, err := templatesPartialsSchemaGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/schema.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xc0, 0x8c, 0x1e, 0xf4, 0xd7, 0xe5, 0x1, 0x99, 0xd1, 0xc6, 0x8c, 0x4e, 0xf8, 0x3c, 0x84, 0xce, 0xd5, 0x6d, 0xc9, 0x8a, 0x38, 0x48, 0x7a, 0xe3, 0x24, 0xf7, 0xdd, 0x1d, 0x8b, 0x17, 0x50}}
	return a, nil
}

var _templatesPartialsSecurityGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbf\x4e\xc3\x40\x0c\xc6\xf7\x3c\xc5\xa7\xb4\x03\x44\xbd\x86\x19\x89\x81\x81\x0d\xb1\x94\x17\x38\x25\x4e\x39\xd4\x38\x55\xe3\x4a\xa0\xe4\xde\x1d\xf9\x9a\xff\x04\x09\x0f\x51\xe2\x9f\xed\xf8\xfb\xdc\x34\x06\x69\x82\x03\x65\xd7\x8b\x93\x6f\xbc\x53\x79\x3e\x59\x21\x24\x29\x8c\xf7\x91\xf2\x9c\x0a\xc7\x84\xb8\xee\x8a\xe2\x81\x5c\x2c\x1f\x09\x5b\xb6\x25\xed\xb0\xad\xb3\xea\x4c\x35\x1e\x9f\xb0\x87\xf7\x51\x8b\xa6\xb9\x31\x78\x8f\xf0\xf5\x59\x39\x1e\xea\xe2\x1d\xe2\x40\xc2\x28\xe2\xbc\x1b\x3a\xbe\xa5\x09\x5e\x38\x47\x55\xfc\xbd\x5f\xb4\x10\xf0\xea\x6a\x59\x11\xf1\x4b\x83\xd6\xe9\xdf\x23\x00\xd0\x19\xae\xb8\x6d\x8d\x2e\xba\xdc\x51\x70\x77\x22\xc6\xfe\x1e\x0f\x8a\x07\xae\xb1\xd9\xe0\xf9\x2a\x1f\xc4\xe2\x32\x2b\xae\xe2\x39\x6e\xdf\x6c\x49\xed\x21\xa8\x6d\xe7\xc4\x18\x63\xc2\xc3\x98\x39\x99\xb8\xea\x38\xa7\x2f\xb5\xb5\xd7\xde\x1b\x8b\x45\x68\x8f\xf4\x92\x27\x57\x1a\x3b\x17\x4d\xa3\xcb\xeb\x99\xff\xdf\x63\xcd\xee\x9f\x00\x00\x00\xff\xff\x45\xb9\xf2\x04\x53\x02\x00\x00")

func templatesPartialsSecurityGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSecurityGomd,
		"templates/partials/security.gomd",
	)
}

func templatesPartialsSecurityGomd() (*asset, error) {
	bytes, err := templatesPartialsSecurityGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/security.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0x9, 0x6c, 0x85, 0xb2, 0x19, 0x28, 0x1, 0x7d, 0xc0, 0x2c, 0x45, 0x55, 0x53, 0x37, 0xd5, 0x89, 0xf3, 0xcc, 0x6a, 0x51, 0x8e, 0x1d, 0xd9, 0xeb, 0x8b, 0xd5, 0xc0, 0xf0, 0xfc, 0x83, 0x7e}}
	return a, nil
}

var _templatesResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\xcc\x3e\x39\x80\x67\x10\x91\x88\x07\x08\xed\x14\x03\x8d\x96\xe6\xb9\x0a\xbd\xbb\x04\xb2\x90\x2e\xe7\x5b\xfc\xe3\xbd\x77\x96\x6d\xd5\x05\xad\x21\xdc\x52\x11\x8e\xc3\x75\x76\xad\xc1\x54\xb6\x35\x99\xc0\x5d\x75\xfb\xbc\xab\x1e\xd3\x4b\x25\x11\x73\x9e\x0c\x8c\x43\xa3\x16\x22\xfc\x2d\xb0\xa7\x38\x8a\xbc\xef\xaa\x79\xce\xdf\x12\xb5\x3c\xe3\x95\x08\x27\xe9\xa7\xbf\x00\x00\x00\xff\xff\x56\x01\xc5\xa0\x8c\x00\x00\x00")

func templatesResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesResponsesGomd,
		"templates/responses.gomd",
	)
}

func templatesResponsesGomd() (*asset, error) {
	bytes, err := templatesResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc7, 0x31, 0xa4, 0x7e, 0x5c, 0xed, 0xf8, 0x38, 0xe3, 0x75, 0xa7, 0x73, 0xeb, 0xdd, 0x9c, 0xc4, 0xb7, 0x1c, 0xc7, 0x62, 0xcd, 0x30, 0x6f, 0x3b, 0xe8, 0xd9, 0x9b, 0xe9, 0x1f, 0x71, 0x1, 0xcb}}
	return a, nil
}

var _templatesSchemasGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\xc1\xa9\xc3\x30\x10\x04\xd0\xbb\xaa\x18\xf6\x2e\x15\xf0\x3b\xf8\x10\x82\x51\x48\x01\xc2\x1e\x93\x05\xc9\x31\xd2\xe6\x24\xdc\x7b\x50\x08\x39\xf8\xb6\xfb\x60\x86\xf1\xde\x3b\x53\xcb\xfc\x43\xef\x08\xd7\x54\x88\xe3\x70\x83\x5d\xef\x30\x96\x3d\x27\x23\xa4\xcd\x0f\x96\x24\x58\x74\x36\xc8\xed\xf3\x45\xae\x82\xf0\xbb\x21\x23\x2e\xdf\x16\x99\x2a\x9b\x2e\xfa\x2a\x91\xeb\x3d\x5e\x04\xe1\x24\x90\xff\x2d\xeb\xc6\xa9\x3e\x77\x56\x53\x36\x41\x38\xd3\x58\xf3\x0e\x00\x00\xff\xff\x4e\xae\x18\x82\xa5\x00\x00\x00")

func templatesSchemasGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemasGomd,
		"templates/schemas.gomd",
	)
}

func templatesSchemasGomd() (*asset, error) {
	bytes, err := templatesSchemasGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0xab, 0x51, 0xb5, 0xc2, 0x27, 0xae, 0x8f, 0x1f, 0x86, 0xae, 0xf5, 0xe9, 0xf5, 0xcb, 0x77, 0x6e, 0x48, 0x1a, 0x31, 0xae, 0xa0, 0x2b, 0xa2, 0x61, 0xcd, 0x5d, 0xb5, 0x2f, 0xd0, 0xc2, 0xab}}
	return a, nil
}

var _templatesTagGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\x28\xc9\x77\x4e\xcc\x4d\xcd\x51\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x49\x73\x55\x57\x2b\xe8\xb9\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x81\xc4\xb9\xaa\xab\x75\x15\x32\xd3\x14\xf4\x5c\x2b\x4a\x52\x8b\xf2\x12\x73\x5c\xf2\x93\x8b\x41\x12\x0a\x0a\x0a\x0a\xd8\xe4\xd0\x0d\x50\x80\x82\x68\x90\xe1\x78\x14\xc6\x6a\x60\x28\x08\x0d\xf2\x51\xa8\xad\xd5\x84\x5b\x95\x9a\x53\x9c\x8a\x6c\xa4\x0d\x0e\x1d\x76\x08\x1d\x79\x29\x20\x0d\x08\x26\x20\x00\x00\xff\xff\x21\xf8\x46\x74\x06\x01\x00\x00")

func templatesTagGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesTagGomd,
		"templates/tag.gomd",
	)
}

func templatesTagGomd() (*asset, error) {
	bytes, err := templatesTagGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tag.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xd7, 0x8a, 0x2f, 0x69, 0x89, 0x7, 0x88, 0xa3, 0x8, 0x18, 0xa5, 0x54, 0xad, 0xc0, 0x37, 0xf, 0xe8, 0xf4, 0x91, 0x99, 0x4b, 0xaf, 0xc5, 0x2d, 0xa4, 0xa3, 0xfc, 0x3a, 0xe0, 0x9b, 0x73}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.DS_Store":                  templatesDs_store,
	"templates/index.gomd":                 templatesIndexGomd,
	"templates/info.gomd":                  templatesInfoGomd,
	"templates/operation.gomd":             templatesOperationGomd,
	"templates/partials/content.gomd":      templatesPartialsContentGomd,
	"templates/partials/headers.gomd":      templatesPartialsHeadersGomd,
	"templates/partials/parameters.gomd":   templatesPartialsParametersGomd,
	"templates/partials/request_body.gomd": templatesPartialsRequest_bodyGomd,
	"templates/partials/responses.gomd":    templatesPartialsResponsesGomd,
	"templates/partials/schema.gomd":       templatesPartialsSchemaGomd,
	"templates/partials/security.gomd":     templatesPartialsSecurityGomd,
	"templates/responses.gomd":             templatesResponsesGomd,
	"templates/schemas.gomd":               templatesSchemasGomd,
	"templates/tag.gomd":                   templatesTagGomd,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		".DS_Store":      {templatesDs_store, map[string]*bintree{}},
		"index.gomd":     {templatesIndexGomd, map[string]*bintree{}},
		"info.gomd":      {templatesInfoGomd, map[string]*bintree{}},
		"operation.gomd": {templatesOperationGomd, map[string]*bintree{}},
		"partials": {nil, map[string]*bintree{
			"content.gomd":      {templatesPartialsContentGomd, map[string]*bintree{}},
			"headers.gomd":      {templatesPartialsHeadersGomd, map[string]*bintree{}},
			"parameters.gomd":   {templatesPartialsParametersGomd, map[string]*bintree{}},
			"request_body.gomd": {templatesPartialsRequest_bodyGomd, map[string]*bintree{}},
			"responses.gomd":    {templatesPartialsResponsesGomd, map[string]*bintree{}},
			"schema.gomd":       {templatesPartialsSchemaGomd, map[string]*bintree{}},
			"security.gomd":     {templatesPartialsSecurityGomd, map[string]*bintree{}},
		}},
		"responses.gomd": {templatesResponsesGomd, map[string]*bintree{}},
		"schemas.gomd":   {templatesSchemasGomd, map[string]*bintree{}},
		"tag.gomd":       {templatesTagGomd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
