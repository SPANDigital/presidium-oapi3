// Code generated for package tpl by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/index.gomd
// templates/info.gomd
// templates/operation.gomd
// templates/partials/content.gomd
// templates/partials/headers.gomd
// templates/partials/parameters.gomd
// templates/partials/request_body.gomd
// templates/partials/responses.gomd
// templates/partials/schema.gomd
// templates/partials/security.gomd
// templates/responses.gomd
// templates/schemas.gomd
// templates/tag.gomd
package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\x0b\x01\x31\x15\x6a\x6b\xb9\x40\xe2\x80\x00\x00\x00\xff\xff\xff\xd8\xd2\xd8\x1c\x00\x00\x00")

func templatesIndexGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexGomd,
		"templates/index.gomd",
	)
}

func templatesIndexGomd() (*asset, error) {
	bytes, err := templatesIndexGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInfoGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x3b\xab\x83\x30\x14\xc7\xf7\x7c\x8a\x03\xd9\x02\x09\xdc\x55\xc4\xe5\xde\xbb\x49\x0b\x56\xbb\x8b\x8d\x6d\xc0\x47\x89\xc1\x0e\xe2\x77\x2f\x27\x49\x7d\xa4\x1d\xea\x74\xfe\x8f\xf3\x3b\x12\xce\x39\x31\xca\x34\x32\x82\x69\x02\x91\xe3\x08\xf3\x4c\x1e\x52\x5d\x6f\x26\x82\x1f\x82\x0d\x42\x29\xdd\xe5\x30\x0a\x94\x67\xa9\x07\xd5\x77\xb8\x40\x50\xff\xc9\xa1\xd2\xea\x6e\x56\x8f\x83\xaa\x41\xe4\x52\xb7\xc3\xb1\x3e\x49\x3d\xaa\xca\xf2\x09\x00\x00\xa5\x60\x13\xe8\x6b\xf0\x59\xe4\x92\xd8\x1e\x0b\xb7\x12\x47\x94\xdd\x05\x11\x2f\xf8\x6f\xdf\x99\xb2\x32\x5b\xaa\xb7\x9c\x0e\x7a\xe2\x50\xb6\xf6\x17\xc0\x7f\x8c\xa1\xc3\x98\x7b\x81\xb0\xb5\x20\xfc\xd5\x4f\xc4\xff\xb6\x54\xcd\x1e\x69\xad\x90\xb9\xf4\xbe\x81\x16\x59\xba\x47\x16\x59\x8a\xc0\x78\x4b\x74\xa5\xe4\x0d\xb8\x8e\xcf\x00\x00\x00\xff\xff\x83\x10\xc4\x02\xe1\x01\x00\x00")

func templatesInfoGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesInfoGomd,
		"templates/info.gomd",
	)
}

func templatesInfoGomd() (*asset, error) {
	bytes, err := templatesInfoGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/info.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOperationGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcb\x6a\xc4\x30\x0c\x45\xf7\xf9\x0a\x91\x65\xc0\xf9\x80\x2e\xba\x28\xd9\x14\xfa\x62\xa6\xd0\x6d\x4c\xe6\xb6\x63\xc8\xc3\xb5\x15\x4a\x10\xfe\xf7\xa2\x4c\xd2\x94\x36\xb3\xf3\x91\x8e\xae\x84\x8d\x31\x99\x88\x21\xf7\x4e\xe5\x23\xf8\x3c\x9c\x5e\x1d\xb7\xa0\x94\x32\xd6\xc7\x0d\x89\xac\x1d\x4a\x69\xa6\x27\xdb\xcd\x82\x08\xa1\x8d\x7f\xdd\x67\x8f\x60\xd9\x0d\xfd\x7d\x75\x91\x0c\xa1\xd7\xd9\xec\x0b\xee\xe3\xcc\x17\xeb\x6d\x7e\x6b\x55\x2f\xc8\xea\xba\xce\xae\x2f\xd2\xae\xb6\xf5\xc8\x0a\x3e\xa0\xb1\x0c\xb5\x8a\x62\xc3\xa2\xf8\xb5\x6a\xb5\x8f\x63\xd7\xd9\x30\x69\xe0\xad\xc8\x8a\x73\xfc\x3f\xb7\x42\x6c\x82\xf3\x7a\x3a\xa5\x24\x42\x3b\xa5\x6d\xc4\x10\xa3\xf3\xad\x65\x50\xee\x6d\xb0\x1d\x18\x21\x3e\xb8\xc8\x39\x95\x2f\x3f\x85\xf5\x0b\x36\x39\xe0\x73\x44\xe4\xbb\xe1\x34\xe5\x54\x1e\x36\xda\x53\xa3\x1f\xfa\x88\x25\xf5\xb0\xe0\x4e\x68\x44\x33\x06\xc7\xd3\x62\x1e\x17\xa4\x94\xbe\x03\x00\x00\xff\xff\x7a\xb2\x89\xd0\xe1\x01\x00\x00")

func templatesOperationGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesOperationGomd,
		"templates/operation.gomd",
	)
}

func templatesOperationGomd() (*asset, error) {
	bytes, err := templatesOperationGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/operation.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsContentGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3d\x6f\x83\x30\x10\x86\x77\x7e\xc5\x2b\x8b\xc9\x6a\x60\x8f\xd4\xa9\x1f\x53\xdb\x54\x34\xdd\xe3\xe2\xa3\xb1\x54\x1b\x0a\xce\x10\x59\xfe\xef\x15\x04\xb0\x4b\x52\xa9\x0a\x0b\xc8\xf7\x9c\x79\xef\x39\xe7\x56\xc8\x39\xee\x6a\x63\xc9\x58\x58\xd2\xcd\x97\xb0\x04\x9e\x63\xe5\x7d\xd2\x97\x25\x55\xca\x10\x58\x79\x62\x98\xf7\x09\x00\xf4\xa5\xb4\x69\xa9\x53\x52\x1d\x74\x41\xd5\x7b\xf1\x84\xf5\x2d\xb2\xd7\xc5\x59\xc4\xb7\xc2\x7c\x12\x52\x23\x34\xdd\x20\xd5\x24\x95\xd8\x1e\x1b\x1a\xda\xa6\x08\x23\xde\x3f\x9c\x3f\xd6\xad\x16\x76\xcd\x39\x76\xce\x0d\x7d\xde\xef\x92\x19\x70\x2e\x24\x66\xf3\x75\x0c\x52\x95\x16\xec\x39\x1c\x44\xff\x62\x8b\x7c\xec\x7c\x0a\xf6\x22\x74\xdf\x94\xf5\xef\x38\x3f\x19\x39\x4a\x09\x5f\x39\xc7\x83\x91\xa8\xab\x3f\x25\x4e\x58\x41\x46\x52\xdb\x41\x60\x4e\x16\x7b\xce\x39\xb6\x9b\xfb\xcd\x88\xc1\xee\x09\x43\x6a\x2c\xc1\x69\x21\x61\xe0\x2b\x56\x32\x37\xa8\x0a\xd9\x9c\x27\x7b\x2b\xf7\xa4\x45\xbc\x84\x5f\x8e\xbb\xa1\x3c\x09\x3e\xc1\x05\x55\xec\xc2\x15\xff\xf7\x7c\x49\x33\x82\x67\x9c\x89\x6e\xe9\xfb\x40\x9d\xc5\x47\x2d\x8f\xa3\x98\x9f\x00\x00\x00\xff\xff\xc5\x1a\x74\x85\xc8\x02\x00\x00")

func templatesPartialsContentGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsContentGomd,
		"templates/partials/content.gomd",
	)
}

func templatesPartialsContentGomd() (*asset, error) {
	bytes, err := templatesPartialsContentGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/content.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeadersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x3d\x4f\xc3\x30\x14\xdc\xfb\x2b\x4e\x51\x07\xb0\x68\xca\x8c\xc4\x56\x24\x06\xa6\x52\xb1\x5b\xf1\xb9\xb5\x94\x38\xc1\x75\x07\xe4\xe4\xbf\xa3\x7c\x34\xb2\x1b\x3a\x90\xe9\xe9\xde\xdd\x29\xef\xce\x21\x6c\xb0\x15\x78\xa7\x54\x74\x38\xb0\x6a\x4a\xe9\x09\xb1\xc5\xa6\xeb\x56\x21\x28\x6a\x63\x89\xec\x34\x10\xb2\x01\x05\x80\x5e\xb7\x1e\x41\xbc\xbc\x22\xff\x92\xe5\x85\x88\x97\x8e\x7a\xd8\xec\xa9\x63\xdc\xe8\x59\x37\xa1\xcb\x4d\xbe\xe7\xf7\xc5\x38\xaa\x98\x22\xdc\x04\x8a\x48\x45\xab\x12\x97\xd8\x64\xc7\xc6\xb1\x90\xfe\xc6\x46\xcd\xf0\xc2\x08\x2d\x42\xf0\xd7\x0c\xb2\xba\xa1\x93\xde\xd4\xf6\xb3\x38\xb1\x92\x87\x9f\x86\xd9\xec\x3e\x62\x18\x44\x22\x4a\x23\xdf\xf1\x5c\x38\xd3\xf4\xba\x3e\x2d\x81\x76\xbe\x9d\x76\xf8\x95\x69\x9c\xa6\xad\xc0\x9b\x55\xa8\xf5\xbd\x12\x56\x49\x47\x1f\xe6\xec\xe1\x17\x3d\x21\x2d\xaa\x67\xa5\x65\x19\x8d\xa3\xc7\x43\x49\x8b\xfc\x11\xcf\xb7\xe1\x3b\x69\x8f\xc4\xda\xca\x8a\x4f\x49\xb1\x11\xaf\xff\x5a\x08\x11\xc2\x48\x44\xd7\x09\x91\x24\x76\x7d\x25\x77\x1a\x9e\xee\xff\x57\x1c\x7f\xde\xfb\x1b\x00\x00\xff\xff\x1b\x02\x9f\x55\xb6\x02\x00\x00")

func templatesPartialsHeadersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeadersGomd,
		"templates/partials/headers.gomd",
	)
}

func templatesPartialsHeadersGomd() (*asset, error) {
	bytes, err := templatesPartialsHeadersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/headers.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsParametersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x06\x8a\x0f\x09\x51\xcb\x3d\x17\xe8\xad\x2d\x60\xc0\x28\xda\xb4\xe8\x9d\x95\x56\x31\x11\x89\x52\x48\xba\x6d\x20\xf1\xdf\x0b\x52\x94\x44\xfa\x91\x84\x07\x5b\xe4\x70\xf6\x31\xbb\xdc\xbe\xdf\x60\xcb\x60\x0e\x42\xc3\x50\xd3\xd5\xdc\x10\x14\x15\x24\xfe\x90\x06\xc7\x37\xae\x78\x43\x86\xd4\x3d\x55\xf8\x7b\x10\xc5\x01\x45\x2b\x0d\x17\xd2\xa1\xee\x90\xcb\x32\xbe\x07\xb6\xc5\xc6\xda\x95\x33\x5c\x52\x25\x24\x21\xeb\x26\x30\x83\xb5\x2b\x00\x70\xe8\x7a\x3e\xc6\x87\x8f\xc8\x7f\xf1\xfa\x48\x09\xae\xa8\xf2\x88\xf3\x12\x9d\x8b\x2a\xa6\x06\xc0\xad\x01\x8c\xf5\x7d\x04\xe6\x5f\x79\xe3\x4c\x32\x76\x01\xdb\xc9\x11\xe9\xfb\xd4\x62\x7e\x4f\x4f\x47\xa1\xa8\x84\xb5\x60\x2a\x6c\xdc\x3d\x92\xa5\xb5\xe7\xf7\x3f\x51\xa7\xa8\xe0\x66\x64\x80\x95\xf3\x7e\x21\x0d\x3e\xf2\x59\xe0\x45\x91\x9f\xcf\x1d\x65\xb1\xb5\x1f\xc5\x81\x1a\x8e\xc0\xc1\x6f\x45\xfc\x71\xef\x54\x4c\x3c\xea\x42\x89\xce\x88\x56\xba\x7b\xb3\x32\x24\x5d\x08\xab\xf0\x19\xbe\xb6\x0c\x9f\x65\x89\xb6\x42\x77\x5a\xa3\xd5\xb5\xea\x0b\x1a\xab\x1f\x82\xa9\x5a\x05\x7e\x4e\xbf\x58\xe2\x31\xa1\x37\x94\x71\xad\x47\xe3\x49\xed\x93\x22\xab\x85\x30\x1d\x8f\x9c\xbd\x90\x8f\x09\xec\x33\xae\x35\x79\x9a\x9e\x14\x4c\x98\xa2\x02\x3d\x4d\x60\xee\xa2\x44\xc6\x95\xe2\xcf\x99\xcf\x05\xd1\x7a\xb9\x54\xc1\xc2\xce\x50\xa3\x13\x6a\x1c\x84\x6c\x4d\xea\xeb\xdc\x47\xe4\xa2\x16\xda\x7c\x3f\x72\x69\x44\x25\x48\xe9\xec\x5a\x0e\xde\xfa\x85\x60\x13\x4f\xbe\x45\x37\x91\x12\xf9\x97\x56\x35\xdc\x38\xe0\xb6\xef\xd3\x43\x6b\xef\xa6\x1e\x4d\x3d\x8d\x9d\x74\xb9\xb1\xb0\x74\x16\x12\x75\x5e\xed\xab\x69\xaa\xec\x85\x36\xae\x23\x93\xe9\xf2\x52\x57\x69\xc7\xc8\x4e\xa6\xc0\x83\xc1\x6d\x4d\x12\xf9\x1d\xde\xcf\xcd\xe3\xd6\xcd\x0d\xdc\x23\x26\x6d\x16\x0f\x7a\x15\xcd\x09\x3f\x17\x06\xec\x24\x06\xf8\xc0\x07\x44\x6f\x2a\xbc\x28\x7f\x75\xe3\xd7\x30\xff\xcc\x7f\x61\x0d\x89\x6c\x8a\xcb\x07\xc2\x5a\xc8\x92\xfe\xbd\x3b\x1d\x70\x6f\xeb\xb2\xec\xca\x70\x8b\xb4\x0f\x1a\x2c\xa5\x38\x29\x4a\x78\xee\x4b\xea\xa3\xde\x41\xdf\xff\x01\x00\x00\xff\xff\xcb\x87\x72\x8a\xf2\x05\x00\x00")

func templatesPartialsParametersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsParametersGomd,
		"templates/partials/parameters.gomd",
	)
}

func templatesPartialsParametersGomd() (*asset, error) {
	bytes, err := templatesPartialsParametersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/parameters.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsRequest_bodyGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x4d\x6f\xab\x30\x10\xbc\xf3\x2b\x46\x24\x27\xf4\x20\xf7\x48\xb9\xbc\x8f\xdb\x6b\x0f\xb4\xea\xdd\x81\x25\x58\x0d\x86\x1a\xa7\x55\x64\xfc\xdf\x2b\xf3\x55\xdb\xa5\x3e\x79\x77\x66\xd6\x5e\xcf\x5a\xeb\x14\x87\x04\xaa\xe6\x3d\x14\x35\xdd\x95\x29\x82\xa4\x82\xf8\x3b\xf5\x60\xc8\xe9\x72\xa3\x5e\xfd\x6e\xcb\x7b\x4e\x15\x3e\x6a\x5e\xd4\x28\x5a\xa1\x18\x17\x13\x5e\x81\x89\x12\x0c\x2f\xec\x7a\x23\x24\x07\xa4\xc6\x44\xb6\x6c\x49\x15\x17\x84\x58\xd2\xdb\x52\x22\x36\x26\x02\x00\x0b\xf3\x0a\x19\x9c\x78\xef\xf0\x70\x3c\x21\x1b\x0b\xfa\x84\x6a\x04\x72\xaa\xe6\xb4\x53\xcb\x93\x3b\xb0\x5d\xbb\x1d\xf2\x09\x85\x85\x23\x0f\xd4\x3a\x94\x67\x96\xcc\x25\x95\x30\x26\x49\x96\x20\x49\xb4\xa6\x6b\x4f\x36\xf7\xd8\x2a\x78\x79\x51\x1a\xe3\x97\x1d\xf0\x40\x25\x67\xcf\xf7\x8e\x30\xe0\x2f\xf5\x85\xe4\x9d\xe2\xad\xc0\x80\xa7\xa2\xa6\x86\x61\xf0\x05\xe9\xd7\x72\xf7\x4e\x34\x04\x17\x4f\x21\x99\xb8\x10\xf6\x82\x35\xf4\x0b\xfb\x66\x3d\xf1\x78\xf2\x3b\xfa\xd3\x0a\x45\x42\x85\x0f\xe3\xbe\xdf\x2a\xce\xe6\xeb\x6d\x70\x57\x2b\xfa\x91\x92\x4f\x86\x7c\x93\x06\x0e\xfd\xa0\xde\x96\xba\xae\x87\x6b\x80\xd6\x63\xaf\xc6\x8c\x7b\x9c\x25\xb1\xd7\xff\x76\xca\xbc\x6e\xdd\xd7\x5e\xa8\xeb\x70\xc7\x6d\x47\x92\x59\x6c\x3a\xd1\x1e\x1e\x6f\xb6\x1f\x18\xb4\x5c\x7f\x32\x7b\x3b\x1b\x05\x29\x77\xc0\xe7\x30\xd8\x1e\x12\xfc\x13\x25\xda\x0a\x73\x07\x38\xdb\x09\x9e\xff\xd1\x67\x00\x00\x00\xff\xff\xc3\xef\x05\xfd\x9f\x03\x00\x00")

func templatesPartialsRequest_bodyGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsRequest_bodyGomd,
		"templates/partials/request_body.gomd",
	)
}

func templatesPartialsRequest_bodyGomd() (*asset, error) {
	bytes, err := templatesPartialsRequest_bodyGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/request_body.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\x9c\x3c\x10\xbe\xf3\x2b\x46\x66\x0f\xef\x1b\x65\x49\xcf\x95\xda\xcb\xb6\x52\x0e\xdb\x28\x22\xdb\x5e\x2b\x77\x19\x12\x94\xc5\x20\xec\x3d\x54\xc0\x7f\xaf\xfc\x81\x6d\x8c\xbb\x45\xdd\x94\x13\xb6\x9f\xb1\xe7\xe3\x99\x67\xfa\x7e\x0b\x77\x37\x90\x23\x6f\x1b\xc6\x11\x04\xd6\xed\x89\x0a\x84\x9b\x3b\xd8\x8e\x63\x22\xcf\x0b\x2c\x2b\x86\x40\x3a\x03\x22\x30\x8e\x09\x00\x80\x3c\xdc\x74\x58\xc2\xfb\x0f\x90\x4d\x57\x64\x39\x96\x01\xc0\xdc\x3d\x43\x7d\xa3\xa7\x33\xce\x70\x5c\x50\x71\xe6\x0a\xf5\xa4\x7f\xbd\xd3\xaa\x04\xca\x0a\xfd\x9a\xbd\x31\xdb\x35\x4c\x20\x13\x06\x37\x61\x3b\xca\x9e\x11\x36\x8c\xd6\x78\x0b\x9b\x1a\x8b\x8a\x1e\x7e\xb6\xea\xfd\x85\x29\x78\xb6\xf2\x1b\xa0\xef\x8d\x27\xe3\xa8\x56\xf0\xa3\x43\xfa\xba\x97\x19\x70\xd6\x9f\x90\x1f\xbb\xaa\x15\x55\xc3\x60\xc2\xa9\x07\xed\x8a\x1f\x5f\xb0\xa6\xfb\x8a\xbd\x6a\xa7\xe5\xfe\xcc\x4b\x64\x85\x1f\x20\x9e\x38\xca\x28\x15\xda\x73\xea\x6f\x1d\xda\xfe\xc1\x0d\xff\xcd\x8b\x59\xb9\x36\xa3\xa6\x7a\xce\x2a\x7b\x52\x3e\x85\x38\xc7\x03\x75\x9c\x6b\x5a\x2d\xcc\x24\xbd\x2e\x5b\xc6\xcd\x14\xdf\x22\x86\x6f\x56\x70\xdb\x39\xa4\x69\xb1\xa3\x12\xa9\x9f\x96\x5e\x90\x68\xfc\x1e\x23\x3c\x56\x04\xb9\x77\x3b\xb6\x64\x6f\x44\x8f\xad\x4f\x05\xf5\x8a\xc7\x4b\x23\x0c\x9f\x59\x01\x4d\xf9\x7b\x7d\x48\x02\x01\xd9\x57\x5c\xac\x12\x11\x09\xf4\x84\x44\x52\xe4\x59\xc0\x7f\x27\x64\x90\xfd\x0f\xef\xfc\x18\xd3\xd4\x5e\xcf\x13\x2f\xf2\xfb\xc3\xe1\x11\x76\x4d\x81\x30\x80\x1f\xe0\x00\x5f\x2c\x43\x07\x30\xd9\x76\xa9\x1e\xb6\xee\xf3\xff\xe7\x2b\xfb\x3f\xc4\x3a\x41\x67\xfc\x36\x10\xb7\x18\xf5\x1d\x2d\x9c\x7c\x16\xd5\x51\x00\xc9\xed\xda\xdd\x42\xb4\xf2\x11\xab\x86\x4b\x32\xc8\xad\xeb\x5c\x9a\x24\xdb\xd1\xc3\x93\xec\x00\xa8\x01\x5a\xac\x67\x26\x33\xfd\x0e\x7a\x7d\x2a\xe4\xdc\x3e\xbb\x47\x5a\x60\xc7\x4d\x75\x17\x9d\x98\xa6\x69\xaa\xda\xca\x86\x0e\xc6\x62\x89\x1d\xe0\x41\xf6\xde\x00\xa6\xc8\xb3\xf2\x2f\xd1\xb3\x92\x06\x35\x8f\x4a\x89\xab\xda\x8b\x72\x41\xb3\x35\x1e\x4f\x2c\x09\x9e\xb8\x47\xb6\x82\x36\xbb\xae\xe3\xbe\x1b\xd5\x5b\xd3\x74\xba\x17\xc8\xa5\xf1\x9d\x63\xb9\x6e\x82\x4b\xe0\x72\x88\xb7\x1d\xf2\xaa\xa8\xce\x75\x8e\xe5\xd7\x7c\xaf\x2c\x1e\x83\x3d\x1f\xaf\x24\x54\x82\x1e\xb4\x96\x26\xfe\xc4\x67\x8d\x98\xa6\x96\x4d\xe5\xc7\xbe\x8f\xca\xda\xbc\x2b\xa2\x2c\xbc\x44\xc0\xf5\x84\x5a\x4f\xa6\x15\x44\x8a\x71\x28\xde\xe7\xf1\x88\xcc\xcc\x0d\x04\xd3\x58\xb8\xb7\x8f\x1a\x36\x29\xcf\x6e\x5a\x2e\x87\x37\x09\x8a\x45\x96\xe5\x23\x32\x53\xc4\x55\xec\x9f\x90\x3c\xf9\x15\x00\x00\xff\xff\x3b\x63\xf5\xf8\x99\x0a\x00\x00")

func templatesPartialsResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsResponsesGomd,
		"templates/partials/responses.gomd",
	)
}

func templatesPartialsResponsesGomd() (*asset, error) {
	bytes, err := templatesPartialsResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSchemaGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xdf\x73\xdb\xb8\x11\x7e\xf7\x5f\xb1\x43\xc7\x1d\x89\x73\x94\x7b\x7d\x54\xeb\x9b\xf1\x5c\x73\xd3\xcc\x24\xb1\x2b\xdf\xf5\x25\x73\x0f\xb4\x08\xda\xe8\x41\xa0\xcc\x1f\xa9\x35\x14\xff\xf7\x0e\x7e\x91\x0b\x10\xa4\x28\x47\xba\xe4\x25\x22\xb0\x58\xec\x82\x1f\xbe\xfd\x00\xba\xae\x23\x48\x48\x4a\x39\x81\xa0\x58\x3f\x93\x4d\x1c\x34\xcd\x05\x00\x80\xe8\x79\x97\x93\x14\x96\x37\xb0\x78\x90\x5d\x2b\x92\x2e\x56\x24\x05\x6c\xa1\x06\x39\x46\xff\x89\x59\x45\x2c\xb3\x6d\x4e\x0a\x9a\xd0\x6a\xb3\x22\xe9\x6f\xab\x8f\xd2\xfe\xde\x69\xc3\xf6\x3c\xde\x10\x69\xf4\x59\xfc\xb0\x42\xca\xb2\xf2\xb3\xe9\x5d\x99\x87\xbd\xc8\x22\xae\x58\xa9\x47\x44\x68\xc8\x75\x08\x1f\x52\x28\x9f\x69\x01\x3a\x5a\x5a\x40\x0c\x39\x49\x49\x4e\xf8\x9a\x40\x78\x6d\xd9\xd3\x14\x78\x56\xaa\xe4\x9b\xe6\x42\xb6\xa3\xbe\x98\x27\x6d\xda\xfa\xff\xc5\x3f\x49\xb1\xce\xe9\xb6\xa4\x19\x87\xa6\x81\x30\x44\x0d\xcb\x30\x14\x63\x87\x6c\x45\x17\xe1\x89\x33\x93\x98\xc8\x0c\xf8\x75\xb7\x6d\x97\x60\x42\x2c\xda\x1c\xc2\x50\xfc\x12\xb3\xa3\xc9\x75\xe7\x3f\x1e\xf3\x9f\xda\x99\xa3\xa6\x31\xfe\x8c\xd9\x8a\xc4\xc9\x1d\x67\x3b\xe5\x47\x3c\x81\x78\x54\x99\x44\x43\xa3\x3e\x57\x8c\xc5\x8f\x4c\xcf\x6e\x9e\x9c\x41\x17\x4e\x1e\x50\x92\xcd\x96\xc5\x25\x81\x20\x27\x45\x99\xd3\xb5\x58\x99\x22\x68\xf3\x42\x99\x7b\xdd\xd8\x8b\x75\x9f\x67\x5b\x92\x97\x94\x14\xe0\xce\x15\x86\x5d\xe7\x32\x0c\x47\x02\xd9\xb6\x76\x01\x24\x74\x5d\x42\xa0\xb0\xdd\x05\x15\x38\xe0\x0d\xfa\x10\x0f\x0c\x38\x03\x04\xda\xe0\xe7\x8c\xa7\xf4\x29\x80\x85\xfa\xd1\x0b\x12\x01\x50\x9b\x2c\x3e\x70\x46\x39\x41\x89\x45\x0e\x18\x7a\xf1\x73\x52\x94\x24\xb9\x3f\x5b\x16\x1e\x30\x9a\xd7\x82\xe2\xf1\xa0\x1a\x2f\x31\xe5\xe5\xbf\xab\x98\x97\x34\xa5\x24\x3f\x55\x88\x92\x37\x02\x4f\xbc\x17\x38\xd0\xa6\xb9\xb0\xa0\x84\x59\x10\xbf\x7b\x9b\x0a\x5f\x2a\x9a\x93\x04\x51\xdd\x62\x65\xda\xb0\x61\x95\xb3\x83\xf4\xe6\x27\x31\x6c\xb1\x56\xf0\x10\xfd\x1d\x52\x50\x2f\x2b\x44\x5f\xc1\xe8\xba\xcd\x37\x10\x9b\x3b\x80\x00\x11\x4c\xe0\x12\x9b\xf6\xbb\xf8\xc0\xd7\xac\x4a\xc8\xfb\xd7\x78\xb3\x65\x0e\xa4\x04\x5d\xc8\x09\x6e\x20\xde\x6e\xc5\x22\xa9\xc7\x40\x5b\x5b\xeb\x82\xdf\xbb\x7f\x8e\x15\xda\xd5\xd3\xe6\x59\x59\x3c\xe0\x99\xec\xc2\xc0\x49\xf0\xcb\xbf\x48\x9c\x90\x5c\x8f\xc5\xa1\xe4\x31\x7f\x22\x0a\x12\x3f\x08\xd4\xc8\xf7\xba\xc3\xef\xcf\x26\x0b\x0c\xe7\x1e\x17\xec\x0c\x40\xef\xdb\xe7\xce\x65\xf0\x4b\xc5\x98\x0f\x81\xea\xc1\x4b\x04\x7d\x5c\x0b\xe0\xb4\xfc\x60\x00\x10\x79\xd2\x3f\x84\xdd\xdd\x1b\x91\x6b\x2d\x91\xc9\x73\x62\x59\x4e\xf5\x0a\xc8\x5e\xb3\x1c\x67\xd8\x17\x5f\xa5\xb4\x58\xde\x74\xd1\x7a\xd4\x46\xf9\x4c\x56\x4a\xb9\x74\x56\xae\x70\x19\xdc\x60\x7b\x09\xcc\x36\x9f\xa8\x6d\xb6\xaa\xee\x4c\x4a\x04\x35\xd1\x1c\x66\xe4\x45\x87\xa6\x2a\x6c\x90\x3d\xfe\x97\xac\xcb\x60\x6e\x5a\x07\xd8\xfb\x4b\x5d\xcb\x35\x6d\x9a\xdf\x67\x97\x36\xee\x62\xbe\x7e\xce\xf2\x00\x16\x62\xc0\xbc\xc3\x00\x2b\xc8\x30\x58\x15\x69\x2a\x1e\x18\x81\xeb\x5b\xd1\x19\x39\x13\xd3\x14\x66\x94\x3f\x94\x39\xe5\x4f\x0f\x92\x8a\x3a\xb0\x49\xef\x73\xa9\x70\x84\x82\x50\xad\x52\x8c\xf8\x8a\x85\x22\x0e\xb5\x56\x58\x7c\x38\xea\xe3\xf0\x60\xac\x41\x6c\x11\xe2\x63\x2b\xfc\xbc\x37\x4a\x42\x39\x72\x64\x5a\x5d\xc3\x63\x4e\xe2\x3f\x3e\x8a\x8d\x36\x68\x72\x98\x0d\x7b\x8c\xbb\x97\x86\x9b\x38\x2f\x9e\x63\xa6\x4a\xbd\xf1\xaf\x6d\x07\x23\x3e\x82\x6f\xf7\xa3\x4a\xeb\xab\xbb\x83\xac\x75\xb9\xf0\x4f\x36\x22\x4a\x0c\x36\x3c\x1b\x25\xcb\x47\x36\x8b\xb2\xed\xba\xe6\x9e\xfd\x33\xf7\xa9\x0f\x43\xf5\x82\xe7\xe5\xb6\xef\xed\x3a\xaf\x64\x12\xbc\xc5\x85\xbd\x54\x23\x29\x04\x57\x05\xfc\x04\x57\x85\xd9\x1b\xef\xf8\xd0\xb8\x69\xf5\xc1\x2a\x0c\x29\xef\x36\xde\x69\x6a\x02\x0e\xc8\xb7\x2b\x86\xd0\x3e\x58\x3f\xfa\xba\xb1\x1d\x3d\xb5\x8c\x4c\xe0\xf9\x11\x9a\x3f\x49\xed\x6e\x4f\xad\x88\xf2\xfb\xf5\xa3\x2b\x1b\xbe\x03\xde\xcc\x9c\x00\x4f\x01\x59\x17\x44\x97\x97\x72\x15\xb8\x4a\x1a\x6a\x70\xa8\x3f\xf7\x4a\xee\xa8\xae\x81\x65\xff\x13\x52\xc7\x8c\x74\x61\xd0\xab\x04\xb6\xaa\x5e\x91\x74\xb8\x0c\x0c\x60\x4f\xed\xf3\x00\xca\xbc\x1a\xa8\x15\xd3\xce\x67\x72\x51\xb3\xdc\x2c\xce\x2d\x63\x77\x2d\xd5\xde\xf2\x5d\xf7\x70\xc7\xc9\x5d\x3a\xc7\x2f\xe0\x4f\x5b\xbd\x31\xf2\x3f\xcc\xf9\x63\xc7\xc9\x03\x67\x1d\x05\xca\xa1\x57\xe0\xa5\x0a\xfc\xee\x0e\x1d\xbb\xba\xab\x02\x95\xc3\x87\x92\x6c\x0a\xeb\x41\x6d\x86\x21\x95\xf2\xfd\x31\x8b\xe3\x3e\x2f\x6c\x7b\x30\x1e\x11\xdb\xee\x5b\x45\x0c\xd7\xbb\x16\x43\x7d\x47\xdd\x85\x0d\x6a\xee\x83\x62\x19\xdf\x8a\xc8\x4d\x65\xba\xc2\xf0\x8e\x13\xb8\x4b\x97\x61\x78\xd1\x7b\x07\x2f\x43\x30\xed\x6e\x64\xb4\xb7\x37\x5f\x81\x78\xa0\xeb\xc0\xd6\x0e\x5e\x71\x45\x1b\xfc\x2d\x63\xdf\x12\xbc\xf2\xf6\xe7\x05\x2f\xb9\xad\x0b\x9e\xef\xbe\x29\x78\xe9\xed\x3c\xc1\x0f\x02\xfd\xc5\xc1\xf8\x49\x2a\xfd\x28\xba\xf7\x20\xab\xec\x1e\x30\xdb\xee\xc1\x52\xb6\x7b\x65\x19\xc9\x7f\xfa\xbf\xc8\xf7\x14\xed\x5d\x55\x41\x93\x57\xbf\xa8\xe8\x4b\x09\x2a\x79\xe4\xe7\xac\xe2\xa5\xb0\xfb\x71\x50\x4e\x0c\x1c\x47\x61\xe2\x91\x14\xce\x75\xc2\x44\x44\x6b\x44\xee\xc3\x36\x2b\xe1\x6f\x4b\xb8\xba\xfc\xaa\xe9\xd2\x63\xff\x45\x1f\x45\xd4\xc2\x40\x5d\xe3\xa5\x10\xc7\xd5\xba\x0e\xea\xfa\xea\x31\x2e\x48\x95\xb3\xab\xa6\x09\x9a\xa6\xae\x85\xb7\xa6\xb9\x5e\x67\x9b\x6d\xc6\x09\x2f\x8b\x6b\x05\xdc\xe2\x7a\x6a\xb9\x40\xd5\xa2\x69\x22\x35\x67\xa4\x9c\x44\x6e\x10\x73\xbf\xa4\xc7\xef\xec\x06\x8a\x6a\x63\x37\xfd\xe8\xbd\xbe\x74\x8e\xd5\xb8\xef\xbb\x1c\xaf\x7d\x75\x09\xce\x70\x4a\x85\xc9\x87\x43\xd8\x0f\xdd\xc3\x9d\x63\x63\x9d\x58\xc3\x1f\xb1\x7b\x5c\x29\x77\x79\x79\x09\xee\x66\xb0\xe3\x3f\x4a\x0f\x1d\x03\xf0\x13\x09\xfc\x43\xb8\x7b\xeb\xb1\xf1\x3a\x84\x6e\x47\xc0\xaf\x26\x34\xfd\x39\xad\xff\x69\x51\x6d\x1c\xdf\xf7\xc5\xfb\xa1\x5b\x3a\xa4\xa3\xee\x87\xef\xfb\x8e\xfd\x5a\x78\xe4\xb5\xa4\xd8\x6e\x79\x1f\x87\x2a\xb6\x8f\x94\xff\x61\x75\xb7\x74\xd2\xa9\x00\x77\x24\x4d\x41\x00\x12\x7f\x93\x0b\xe2\x3c\x8f\x77\x81\x97\x03\xde\x51\x29\x7c\x45\xed\xd0\x43\x94\x12\xf6\xd9\xd2\x14\xc4\x29\x8b\x22\x55\xaf\x8f\x57\x56\x93\x3a\x7e\xe1\x26\x25\xea\xfc\xa5\x03\x03\x9b\xd1\xc2\x56\xbd\xd8\x8b\x9f\xc2\xc4\x62\xf8\x1c\x7f\x39\x82\x5d\xad\xc4\xbf\x85\x61\x7f\x9f\x76\x75\xa2\x5f\x60\xef\x35\x69\xe2\xe8\xe5\xf3\xa5\x03\xe2\xe8\x65\x2e\xae\x5a\x1e\xa4\x2c\x6e\x93\x84\x0a\xe6\x8d\xd9\x48\x41\x57\x41\x78\xfd\x48\xce\xc3\x11\x9f\x34\x50\x1f\x38\x9d\xcf\xce\xce\x37\xe1\x5f\xb2\x7c\x13\x4b\x8a\x9c\xd5\xb5\xdd\xd8\x34\x73\xa8\x6b\xc2\x13\x0f\xff\xd8\xf4\x83\xc8\x47\xff\xbc\x0e\xe1\x3d\x4f\x20\x4b\xc7\x18\xc8\x58\xe2\x82\xd6\xe5\xea\xa1\x29\xbb\xf2\x45\xdd\x5c\x2b\xc2\x13\x92\x43\xcc\x98\xed\xac\xff\x97\x03\x8b\x4f\x15\x2b\xe9\x96\xa9\xf3\x16\x84\xa1\x79\x86\x2c\x0d\xc3\xa5\xe0\x70\xdb\xc4\x7c\x8a\xf7\x5e\xed\x2e\x3e\xc5\xaf\xda\x4d\xfc\x4a\x37\xd5\xa6\x75\x21\xdb\xc7\xc7\xbe\x7f\x5d\xb3\xaa\xa0\x5f\x49\xeb\xa4\x6d\x81\x4d\xe7\x4e\x1c\x91\x0f\x04\x41\xf5\x5f\x35\x7c\xa2\xdc\x0a\x42\xb6\x4f\x0d\xc2\x38\x41\x41\x74\xee\x26\x04\x11\xbf\x7e\x24\xfc\xa9\x7c\xb6\xd6\x03\x98\x6c\x43\xcb\xd2\x1a\x1d\xcc\xc9\x72\xa7\x42\x71\xdd\x21\xa3\x71\x77\xf7\x71\x59\x92\x5c\x67\xa8\x1f\x8c\x97\xae\xef\x60\x86\x8a\xde\xac\x04\x25\xbb\xa2\xfc\x8c\xc9\xc1\xf4\xb0\x2f\x9d\x9d\xed\xab\x33\x19\xf7\xf5\x1b\xa7\x2f\x15\x41\xee\x50\xc3\xe4\x77\x27\xd8\xcc\xc9\xac\xfb\xd2\x8e\xd2\x33\x76\x07\xd3\xc3\x0e\x75\x7a\x1e\x87\x9d\xdd\x90\x43\xe9\xcf\xc7\xba\xb7\x4c\x48\xb5\x44\x4d\xd1\x19\xa0\x59\x04\x1f\x08\x93\x49\x8b\xf0\x54\xc2\x8c\x11\x0e\x8b\xf7\xbc\xda\xcc\xe1\xaf\x16\x31\x87\xa1\x68\x0d\xc3\xe5\x5f\xf8\x63\xb1\xfd\xbb\x45\x87\x96\xb6\xee\xa4\xaf\x18\xe0\x57\x0b\xd2\xa6\x69\x3c\xae\xa6\x28\x3b\x9b\x5d\xbd\xd4\xe9\xd0\xab\x26\x47\x51\x7b\x41\xd6\x15\x1f\xb3\xb6\x35\xda\x79\x93\xbd\xca\x3b\x2b\x58\xf5\x44\xd3\x1d\xcc\x94\x52\x5e\xcc\xe7\x53\x63\x1e\x0a\xc4\x8a\xc4\x54\x38\xec\xb3\x37\xa7\x91\x14\x6a\xee\x56\xb5\x4b\x7d\x39\xa0\x84\x05\x28\x62\xb1\x4e\x0f\xd3\x24\xb1\xc7\xde\xaf\x8d\x47\x24\xb1\x7d\xfc\x39\x97\x54\x6d\x2b\x3c\x2d\x99\x5f\xe1\x0d\x5b\x0c\xea\xbf\x23\x65\x30\xf4\xe5\xa2\x77\x01\x7b\x02\xd9\x23\xf7\xa6\x2a\x25\x70\x8f\x5c\x7d\xe9\xdb\x5f\x33\x98\x70\xa1\x70\x5a\xc9\x04\x7d\xd9\xe4\x69\x9a\xb6\xdd\xa7\x80\xd8\x42\xb1\xbb\x24\x7d\xa0\xca\x73\x8b\x3e\x70\xe0\x3d\xf7\x2e\x93\x5f\x6a\x03\xd9\x13\x38\xac\x60\xdd\x9a\xf6\x1c\xde\x18\x03\x17\x69\xc2\xa7\x70\x29\x3a\x03\x1f\xc8\xed\x8b\x70\x9f\xe3\xfe\x31\x08\x39\x96\x9d\x81\xff\x3b\x01\x48\x1a\xaf\x6b\x69\xdb\x34\x4b\xfd\x17\x07\x16\x7b\x77\x5b\xb7\x9d\x32\x6a\x9a\xe9\xb0\x16\xd6\x3f\x0c\xbe\xca\xff\x07\x00\x00\xff\xff\x95\xc4\xac\x40\xcc\x2b\x00\x00")

func templatesPartialsSchemaGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSchemaGomd,
		"templates/partials/schema.gomd",
	)
}

func templatesPartialsSchemaGomd() (*asset, error) {
	bytes, err := templatesPartialsSchemaGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/schema.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSecurityGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbf\x4e\xc3\x40\x0c\xc6\xf7\x3c\xc5\xa7\xb4\x03\x44\xbd\x86\x19\x89\x81\x81\x0d\xb1\x94\x17\x38\x25\x4e\x39\xd4\x38\x55\xe3\x4a\xa0\xe4\xde\x1d\xf9\x9a\xff\x04\x09\x0f\x51\xe2\x9f\xed\xf8\xfb\xdc\x34\x06\x69\x82\x03\x65\xd7\x8b\x93\x6f\xbc\x53\x79\x3e\x59\x21\x24\x29\x8c\xf7\x91\xf2\x9c\x0a\xc7\x84\xb8\xee\x8a\xe2\x81\x5c\x2c\x1f\x09\x5b\xb6\x25\xed\xb0\xad\xb3\xea\x4c\x35\x1e\x9f\xb0\x87\xf7\x51\x8b\xa6\xb9\x31\x78\x8f\xf0\xf5\x59\x39\x1e\xea\xe2\x1d\xe2\x40\xc2\x28\xe2\xbc\x1b\x3a\xbe\xa5\x09\x5e\x38\x47\x55\xfc\xbd\x5f\xb4\x10\xf0\xea\x6a\x59\x11\xf1\x4b\x83\xd6\xe9\xdf\x23\x00\xd0\x19\xae\xb8\x6d\x8d\x2e\xba\xdc\x51\x70\x77\x22\xc6\xfe\x1e\x0f\x8a\x07\xae\xb1\xd9\xe0\xf9\x2a\x1f\xc4\xe2\x32\x2b\xae\xe2\x39\x6e\xdf\x6c\x49\xed\x21\xa8\x6d\xe7\xc4\x18\x63\xc2\xc3\x98\x39\x99\xb8\xea\x38\xa7\x2f\xb5\xb5\xd7\xde\x1b\x8b\x45\x68\x8f\xf4\x92\x27\x57\x1a\x3b\x17\x4d\xa3\xcb\xeb\x99\xff\xdf\x63\xcd\xee\x9f\x00\x00\x00\xff\xff\x45\xb9\xf2\x04\x53\x02\x00\x00")

func templatesPartialsSecurityGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSecurityGomd,
		"templates/partials/security.gomd",
	)
}

func templatesPartialsSecurityGomd() (*asset, error) {
	bytes, err := templatesPartialsSecurityGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/security.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\xcc\x3e\x39\x80\x67\x10\x91\x88\x07\x08\xed\x14\x03\x8d\x96\xe6\xb9\x0a\xbd\xbb\x04\xb2\x90\x2e\xe7\x5b\xfc\xe3\xbd\x77\x96\x6d\xd5\x05\xad\x21\xdc\x52\x11\x8e\xc3\x75\x76\xad\xc1\x54\xb6\x35\x99\xc0\x5d\x75\xfb\xbc\xab\x1e\xd3\x4b\x25\x11\x73\x9e\x0c\x8c\x43\xa3\x16\x22\xfc\x2d\xb0\xa7\x38\x8a\xbc\xef\xaa\x79\xce\xdf\x12\xb5\x3c\xe3\x95\x08\x27\xe9\xa7\xbf\x00\x00\x00\xff\xff\x56\x01\xc5\xa0\x8c\x00\x00\x00")

func templatesResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesResponsesGomd,
		"templates/responses.gomd",
	)
}

func templatesResponsesGomd() (*asset, error) {
	bytes, err := templatesResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemasGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x31\x0a\x02\x31\x14\x44\xfb\x9c\x62\x98\x3e\x39\x80\xad\xad\x88\x44\x3c\x40\xd8\xfd\xd1\x0f\x1b\x15\xf7\x5b\x7d\x72\x77\x89\x8a\x85\xdd\x9b\x07\x33\x13\x63\x0c\xa6\xb6\xc8\x06\xee\x48\xfb\xd2\x04\xbd\x87\xa1\x83\x3b\x4c\xda\x7d\x29\x26\xe0\x3a\x5d\xa4\x15\x62\xd6\xc9\xc0\xe3\x3b\x65\xa9\x44\xfa\x31\x38\xea\xfc\xae\xf0\xf0\x90\x55\x67\x7d\xb6\x2c\xf5\x94\x77\x44\xfa\x33\xe0\xf6\x76\xad\x7a\x26\xd2\x07\xc6\xf3\x2b\x00\x00\xff\xff\x0f\xc4\x94\xab\x91\x00\x00\x00")

func templatesSchemasGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemasGomd,
		"templates/schemas.gomd",
	)
}

func templatesSchemasGomd() (*asset, error) {
	bytes, err := templatesSchemasGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTagGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\x28\xc9\x77\x4e\xcc\x4d\xcd\x51\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x49\x73\x55\x57\x2b\xe8\xb9\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x81\xc4\xb9\xaa\xab\x75\x15\x32\xd3\x14\xf4\x5c\x2b\x4a\x52\x8b\xf2\x12\x73\x5c\xf2\x93\x8b\x41\x12\x0a\x0a\x0a\x0a\xd8\xe4\xd0\x0d\x50\x80\x82\x68\x90\xe1\x78\x14\xc6\x6a\x60\x28\x08\x0d\xf2\x51\xa8\xad\xd5\x84\x5b\x95\x9a\x53\x9c\x8a\x6c\xa4\x0d\x0e\x1d\x76\x08\x1d\x79\x29\x20\x0d\x08\x26\x20\x00\x00\xff\xff\x21\xf8\x46\x74\x06\x01\x00\x00")

func templatesTagGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesTagGomd,
		"templates/tag.gomd",
	)
}

func templatesTagGomd() (*asset, error) {
	bytes, err := templatesTagGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tag.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.gomd":                 templatesIndexGomd,
	"templates/info.gomd":                  templatesInfoGomd,
	"templates/operation.gomd":             templatesOperationGomd,
	"templates/partials/content.gomd":      templatesPartialsContentGomd,
	"templates/partials/headers.gomd":      templatesPartialsHeadersGomd,
	"templates/partials/parameters.gomd":   templatesPartialsParametersGomd,
	"templates/partials/request_body.gomd": templatesPartialsRequest_bodyGomd,
	"templates/partials/responses.gomd":    templatesPartialsResponsesGomd,
	"templates/partials/schema.gomd":       templatesPartialsSchemaGomd,
	"templates/partials/security.gomd":     templatesPartialsSecurityGomd,
	"templates/responses.gomd":             templatesResponsesGomd,
	"templates/schemas.gomd":               templatesSchemasGomd,
	"templates/tag.gomd":                   templatesTagGomd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.gomd":     &bintree{templatesIndexGomd, map[string]*bintree{}},
		"info.gomd":      &bintree{templatesInfoGomd, map[string]*bintree{}},
		"operation.gomd": &bintree{templatesOperationGomd, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"content.gomd":      &bintree{templatesPartialsContentGomd, map[string]*bintree{}},
			"headers.gomd":      &bintree{templatesPartialsHeadersGomd, map[string]*bintree{}},
			"parameters.gomd":   &bintree{templatesPartialsParametersGomd, map[string]*bintree{}},
			"request_body.gomd": &bintree{templatesPartialsRequest_bodyGomd, map[string]*bintree{}},
			"responses.gomd":    &bintree{templatesPartialsResponsesGomd, map[string]*bintree{}},
			"schema.gomd":       &bintree{templatesPartialsSchemaGomd, map[string]*bintree{}},
			"security.gomd":     &bintree{templatesPartialsSecurityGomd, map[string]*bintree{}},
		}},
		"responses.gomd": &bintree{templatesResponsesGomd, map[string]*bintree{}},
		"schemas.gomd":   &bintree{templatesSchemasGomd, map[string]*bintree{}},
		"tag.gomd":       &bintree{templatesTagGomd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
