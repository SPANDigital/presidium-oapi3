// Code generated for package tpl by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/index.gomd
// templates/info.gomd
// templates/operation.gomd
// templates/partials/content.gomd
// templates/partials/headers.gomd
// templates/partials/parameters.gomd
// templates/partials/request_body.gomd
// templates/partials/responses.gomd
// templates/partials/schema.gomd
// templates/partials/security.gomd
// templates/responses.gomd
// templates/schemas.gomd
// templates/tag.gomd
package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\x0b\x01\x31\x15\x6a\x6b\xb9\x40\xe2\x80\x00\x00\x00\xff\xff\xff\xd8\xd2\xd8\x1c\x00\x00\x00")

func templatesIndexGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexGomd,
		"templates/index.gomd",
	)
}

func templatesIndexGomd() (*asset, error) {
	bytes, err := templatesIndexGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInfoGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\xbd\x0a\x83\x30\x10\x07\xf0\x3d\x4f\x71\x90\x2d\x90\x3c\x80\x88\x4b\xdb\x4d\x5a\xb0\xda\x5d\x6c\x84\x80\x1f\x25\x06\x17\xf1\xdd\xcb\x9d\xa9\x1f\x69\x87\x3a\xe5\xfe\xf7\xf7\x17\x95\x52\x32\x67\x5c\xa3\x23\x98\x26\x50\x39\x1e\x61\x9e\x19\xe6\x8c\x73\x7e\x48\x61\x54\x38\x3e\xb4\x1d\x4c\xdf\x61\x8d\xe1\x7c\xd6\x43\x65\xcd\xcb\x6d\x99\x04\x53\x83\xca\xb5\x6d\x87\x5b\x7d\xd7\x76\x34\x15\xa9\x0c\x00\x80\x73\xa0\x0d\xf4\x35\xf8\x5d\x44\x8b\x98\xee\x0a\x5f\x4a\x16\x50\x77\x4f\x14\x3e\xf6\xa9\xef\x5c\x59\xb9\x3d\xea\x23\x1a\x83\x9a\xba\x96\x2d\x7d\x00\xf8\x47\x08\x4c\x84\x58\xfe\x3a\x6c\xad\x84\xbf\xf4\x97\x78\x69\x4b\xd3\x1c\x49\x8a\x42\x73\xed\xfd\x83\x16\x59\x7a\x24\x8b\x2c\x45\x30\xde\x8b\x4b\x29\xf9\x02\xb7\xe3\x3b\x00\x00\xff\xff\x36\xe9\x6b\x90\xd5\x01\x00\x00")

func templatesInfoGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesInfoGomd,
		"templates/info.gomd",
	)
}

func templatesInfoGomd() (*asset, error) {
	bytes, err := templatesInfoGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/info.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOperationGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x6a\x84\x30\x14\x46\xf7\x3e\xc5\xc5\xa5\x10\x1f\xa0\x8b\x2e\xca\x6c\x0a\xfd\x63\xa6\x0f\x60\xd0\xaf\x34\x60\x34\x4d\xae\x0b\xb9\xe4\xdd\xcb\x95\x8c\x16\x66\xba\x3c\xf9\x4e\x8e\x51\xc4\x90\xfb\xa2\xf6\x15\xfc\x3d\x0f\x9f\x8e\x47\x50\xce\x54\x19\x63\x2a\x56\x7a\x20\x91\xeb\xac\x8b\xd2\x9b\xf5\x6a\x6d\x92\x08\xc6\x84\x02\x7f\x6e\xbc\x07\x44\xcb\x6e\x9e\x9e\x4f\x87\x6a\x08\xd3\x90\x73\xd5\x75\x5d\xf5\x7f\x56\x57\x9d\xf5\x5d\x27\x84\x88\xde\x32\xd4\x6a\x9a\x03\x9b\xa6\xe4\xf4\x46\x91\x2f\x8b\xf7\x36\xae\xda\x7b\x14\xb9\xe2\x56\xdf\xd5\x23\x9c\xfa\xe8\x82\xbe\x90\x72\xd6\xcf\xdf\x9c\xec\x71\x43\x0c\x1f\x46\xcb\xa0\x3a\xd8\x68\x3d\x18\x31\xbd\xb8\xc4\x35\xb5\x1f\xfb\xc1\xad\x1c\xf1\xb3\x20\xf1\xd3\x3c\xac\x35\xb5\xe7\x83\xee\xa9\x29\xcc\x53\x42\xa9\x9e\x0b\xde\x89\x26\xf4\x4b\x74\xbc\x16\xf3\x52\x70\xfb\xb9\xdf\x00\x00\x00\xff\xff\x39\x4e\xed\xbc\xcf\x01\x00\x00")

func templatesOperationGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesOperationGomd,
		"templates/operation.gomd",
	)
}

func templatesOperationGomd() (*asset, error) {
	bytes, err := templatesOperationGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/operation.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsContentGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3f\x6f\xb3\x30\x10\xc6\x77\x3e\xc5\x23\x8b\xc9\x7a\x03\x7b\xa4\x77\xea\x9f\xa9\x55\x2a\x9a\xee\x71\xf1\xd1\x58\xaa\x0d\x05\x67\x88\x2c\x7f\xf7\x0a\x02\xb6\x4b\xda\xa1\x65\x42\xbe\xdf\xd9\xcf\xfd\xce\xb9\x0d\x4a\x8e\x9b\xd6\x58\x32\x16\x96\x74\xf7\x2e\x2c\x81\x97\xd8\x78\x9f\x8d\x65\x49\x8d\x32\x04\x56\x5f\x18\xe6\x7d\x06\x00\x63\x29\xef\x7a\x1a\x94\x54\x27\x5d\x51\xf3\x52\x3d\x60\xfb\x1f\xc5\xd3\xea\x2c\xe1\x7b\x61\xde\x08\xb9\x11\x9a\xfe\x21\xd7\x24\x95\xd8\x9f\x3b\x9a\xda\x96\x08\x33\x3e\x7e\x9c\xdf\xb7\xbd\x16\x76\xcb\x39\x0e\xce\x4d\x7d\xde\x1f\xb2\x00\x38\x17\x13\xb3\x70\x1d\x83\x54\xb5\x05\x7b\x8c\x07\xc9\x5b\x6c\x95\x8f\x5d\x4f\x91\x24\x26\x23\x67\x0d\xf1\xaf\xe4\xb8\x33\x12\x6d\xf3\xa3\xb6\x05\xab\xc8\x48\xea\x07\x08\x84\x2c\xa9\xd9\x92\x63\xbf\xbb\xdd\xcd\x18\xec\x91\x30\xe5\xc4\x1a\x5c\x56\x10\x47\xfc\xc3\x12\x42\x83\x6a\x50\x84\x3c\xc5\x73\x7d\x24\x2d\x52\xed\x5f\xac\x0e\x53\x79\x51\x7a\x81\x2b\x6a\xd8\x37\x57\xfc\xda\x2c\xa2\x5a\x5c\xb9\xed\xe9\xe3\x44\x83\xc5\x6b\x2b\xcf\xb3\x8b\xcf\x00\x00\x00\xff\xff\x8e\x9d\xe9\x63\xad\x02\x00\x00")

func templatesPartialsContentGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsContentGomd,
		"templates/partials/content.gomd",
	)
}

func templatesPartialsContentGomd() (*asset, error) {
	bytes, err := templatesPartialsContentGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/content.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeadersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x31\x4f\xf3\x30\x14\xdc\xfb\x2b\x4e\x51\x87\xef\xb3\x68\xcb\x8c\x80\x09\xa4\x0e\x85\xa1\x54\xec\x26\x7e\x6e\x2d\x25\x4e\x70\x5c\x21\xf4\xe2\xff\x8e\x9c\xa4\xc1\xa1\x74\x20\x93\x75\xef\xce\x79\x77\x67\xe6\x05\x56\x02\x6b\x92\x8a\x1c\x76\x54\xd6\x85\xf4\x04\xb1\xc2\x22\x84\x19\xb3\x22\x6d\x2c\x21\x3b\x74\x84\xac\x43\x01\x20\xea\xe6\x3d\x88\x9b\x3b\x2c\x5f\x65\x71\x24\xa4\x43\x47\xba\x9b\x6c\x49\xa7\xb8\xd1\xa3\x6e\x40\xcf\x27\xcb\x2d\xbd\x1f\x8d\x23\x85\x10\x70\xfb\xe6\xee\x21\xdc\x80\x08\x30\x93\x55\x21\x80\x39\x55\x3c\x50\xed\x28\x97\x3e\xd5\xa8\x11\xfb\x56\xb5\x60\xf6\x27\x97\x59\x55\x93\x93\xde\x54\xf6\x25\x3f\x50\x29\x77\x9f\x35\x65\xe3\x95\x3d\x86\x4e\x24\xe2\x82\xbe\x5a\xef\x9e\x36\xcf\xf4\xb1\x31\x96\x9a\xe4\xd7\x4d\xee\x4c\x1d\xaf\x89\xf1\x08\xb4\xa3\x59\xb2\x71\x9d\xd9\x70\x1c\x4e\x2b\x81\x47\xab\x50\xe9\x4b\xa9\xcf\x26\xa5\x6c\x4c\xe3\xe1\xcf\x8a\xc1\xb4\x99\xc8\x9a\xb6\x63\x34\xf6\x1e\xff\x0a\xb2\x58\xfe\xc7\xf5\xcf\xb4\x9d\xb4\x7b\xc2\xdc\xca\x92\xae\x26\x4d\x26\xbc\xf8\xb5\x10\x82\xb9\x27\x22\x04\x21\x26\x01\x9e\x9e\xc5\x85\x4a\x07\xff\x7f\x8a\xe3\x57\xbf\x5f\x01\x00\x00\xff\xff\xe6\x6d\x44\x2a\xa7\x02\x00\x00")

func templatesPartialsHeadersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeadersGomd,
		"templates/partials/headers.gomd",
	)
}

func templatesPartialsHeadersGomd() (*asset, error) {
	bytes, err := templatesPartialsHeadersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/headers.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsParametersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x6e\xd4\x3c\x14\xdd\xe7\x29\x8e\xd2\x59\xb4\xd1\x37\x99\x6f\x8d\x80\x15\x20\x46\x1a\x2a\x28\x15\x7b\x93\xdc\x74\x2c\x12\x27\xb5\x3d\x94\x2a\xf1\xbb\x23\x3b\x4e\x62\xcf\x4f\xa9\x17\x33\xd1\x3d\x3e\xf7\xf7\xf8\xf6\xfd\x1a\x9b\x0c\x7a\xcf\x15\x34\x35\x5d\xcd\x34\x41\x52\x41\xfc\x37\x29\x30\x7c\x65\x92\x35\xa4\x49\xde\x51\x85\xa7\x3d\x2f\xf6\x28\x5a\xa1\x19\x17\x16\xb5\x46\x26\xca\xf0\x1e\xb2\x0d\xd6\xc6\x24\xd6\x71\x49\x15\x17\x84\xb4\x9b\xc0\x14\xc6\x24\x00\x60\xd1\xd5\x6c\xc6\x9b\x77\xc8\x7f\xb0\xfa\x40\x11\x2e\xa9\x72\x88\x8d\x12\xd8\x79\x15\x52\x3d\x60\xcf\x80\x2c\xeb\xfb\x00\xcc\x6f\x59\x63\x5d\x66\xd9\x19\x6c\x2b\x46\xa4\xef\x63\x8f\xf9\x1d\x3d\x1e\xb8\xa4\x12\xc6\xe0\xed\x4f\xf9\x1e\x99\xf4\x16\x7b\x99\x44\x69\xcc\x29\xe9\x03\x75\x92\x0a\xa6\x43\x5a\x39\xdb\x16\xe2\xe0\x4a\x98\x3b\xbd\xb4\xe6\xfe\xb9\xa3\x34\xf4\xf8\xbd\xd8\x53\xc3\xe0\x39\xd0\xed\xe7\xfb\x2f\xbb\x5b\x7a\xda\x71\x41\x2a\x0e\xad\x0a\xc9\x3b\xcd\x5b\x61\x2f\xcf\x7d\x22\x61\x73\x49\xfc\xa7\xff\xda\x64\xf8\x28\x4a\xb4\x15\xba\xe3\x89\x25\x97\xb4\xc0\x69\xd4\x82\xcf\xa8\x6a\x25\xd8\x29\xfd\xec\xc0\xc7\xaa\x5e\x31\xd4\x95\x1a\x9d\x47\x4a\x88\x46\x2e\x17\xc2\x64\x1e\x39\x3b\x2e\x7e\x45\xb0\xab\xb8\x56\xe4\x68\x6a\x6a\x63\xc4\xe4\x15\xe8\x71\x02\x73\x9b\x25\x52\x26\x25\x7b\x4e\x5d\x2d\x08\xce\xcb\xf3\xf2\x1e\xb6\x9a\x1a\x15\x51\xc3\x24\x44\xab\xe3\x58\xa7\x31\x82\x10\x35\x57\xfa\xdb\x81\x09\xcd\x2b\x4e\x52\xa5\x97\x6a\x70\xde\xcf\x24\x1b\x45\x72\x5a\x5d\x07\x9d\xc8\x3f\xb5\xb2\x61\xda\x02\xd7\x7d\x1f\x1b\x8d\xb9\x99\x84\x1a\x47\x1a\x95\x74\x5e\x58\x58\x94\x85\xa8\x3b\xff\xd4\xd5\xb4\x63\x76\x5c\x69\xab\xc8\x68\xd7\xbc\xa4\x2a\x65\x19\xe9\xd1\x4e\x78\xd0\xb8\xae\x49\x20\xbf\xc1\xff\xb3\x78\xec\xb9\xba\x82\x7d\xd2\xa4\xf4\x12\x41\x25\xc1\xd6\x70\x5b\x62\xc0\x56\x60\x80\x4b\x7c\x40\xf0\xa6\xfc\x8b\x72\x57\xd7\xee\x0c\xf3\xcf\xfc\xe7\xcf\x10\xb5\x4d\x32\xf1\x40\x58\x71\x51\xd2\x9f\xff\x8e\xd7\xdd\xeb\x54\x96\x5e\x58\x75\x41\xef\x7d\x0f\x96\x51\x1c\x0d\xc5\x3f\xf7\xa5\xf4\xb1\xdf\xbe\xbf\x7f\x03\x00\x00\xff\xff\xb3\x49\x16\x48\x00\x06\x00\x00")

func templatesPartialsParametersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsParametersGomd,
		"templates/partials/parameters.gomd",
	)
}

func templatesPartialsParametersGomd() (*asset, error) {
	bytes, err := templatesPartialsParametersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/parameters.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsRequest_bodyGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcb\x6e\x83\x30\x10\xbc\xf3\x15\x23\x92\x13\x2a\xe4\x1e\x29\x97\x3e\x8e\xed\x81\x56\xbd\xbb\xb0\x04\x4b\xc1\xa6\xe0\xb4\x8a\x8c\xff\xbd\x32\xaf\xda\x2e\xf5\xc9\xbb\x33\xb3\xf6\x7a\xd6\x5a\xa7\x38\x24\x50\x35\xef\xa1\xa8\x69\x2f\x4c\x11\x3a\x2a\x88\x7f\x51\x0f\x86\x9c\xce\x57\xea\xd5\xbd\x2c\x6f\x39\x55\xf8\xae\x79\x51\xa3\x90\x42\x31\x2e\x26\xbc\x02\x13\x25\x18\xde\xd9\xe5\x4a\x48\x0e\x48\x8d\x89\x6c\xd9\x92\x2a\x2e\x08\x71\x47\x9f\x4b\x89\xd8\x98\x08\x00\x2c\xcc\x2b\x64\x70\xe2\xbd\xc3\xc3\xf1\x84\x6c\x2c\xe8\x13\xaa\x11\xc8\xa9\x9a\xd3\x4e\x2d\x4f\xee\xc0\x76\xed\x76\xc8\x27\x14\x16\x8e\x3c\x50\xeb\x50\x9e\x59\x32\xef\xa8\x84\x31\x49\xb2\x04\x49\xa2\x35\x5d\x7a\xb2\xb9\x17\xa9\xe0\xe5\x45\x69\x8c\x5f\x76\xc0\x33\x95\x9c\xbd\xdd\x5a\xc2\x80\x47\xea\x8b\x8e\xb7\x8a\x4b\x81\x01\xaf\x45\x4d\x0d\xc3\xe0\x0b\xd2\xdf\xe5\xee\x9d\x68\x08\x2e\x9e\xa2\x63\xe2\x4c\xd8\x0b\xd6\xd0\x1d\xf6\xcd\x7a\xe2\xf1\xe4\x77\xf4\x20\x85\x22\xa1\xc2\x87\x71\xdf\x6f\x15\x67\xf3\xf5\x36\xb8\xab\x15\xfd\x48\xc9\x27\x43\xfe\x48\x03\x87\xfe\x51\x6f\x4b\x5d\xd7\xc3\x35\x40\xeb\xb1\x57\x63\xc6\xbd\xdf\xa3\xfb\xc6\x0b\x61\x1d\xe9\x58\xb6\xd4\x31\x8b\x4d\xe7\xd8\x23\xe3\xcd\xa6\x03\x5b\x96\x4b\x4f\x16\x6f\x67\xa3\x20\xe5\x8e\xf5\x1c\x06\xdb\x43\x82\x27\x51\x42\x56\x98\x3b\xc0\x87\x9d\xdb\xf9\xf7\xfc\x04\x00\x00\xff\xff\x24\xd9\x72\x61\x95\x03\x00\x00")

func templatesPartialsRequest_bodyGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsRequest_bodyGomd,
		"templates/partials/request_body.gomd",
	)
}

func templatesPartialsRequest_bodyGomd() (*asset, error) {
	bytes, err := templatesPartialsRequest_bodyGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/request_body.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcb\x6e\xdb\x3a\x10\xdd\xeb\x2b\x06\x92\x17\xf7\x06\xb1\xd2\x75\x81\x76\xe3\x16\xf0\xc2\x31\x02\xc5\xed\xb6\x10\xac\x51\x42\xd4\xa6\x04\x91\x46\x51\x48\xfa\xf7\x82\x0f\xf1\x25\xc6\x55\xe0\x6a\x25\x92\x67\xc8\x79\x9c\x39\xd3\xf7\x6b\x78\xb8\x83\x02\x59\xdb\x50\x86\xc0\xf1\xdc\x9e\x4a\x8e\x70\xf7\x00\xeb\x71\x4c\xc4\x79\x85\x35\xa1\x08\x69\xa7\x41\x29\x8c\x63\x02\x00\x20\x0e\x57\x1d\xd6\xf0\xf1\x13\xe4\xd3\x15\x79\x81\x75\x00\xd0\x77\x7b\xa8\xef\xe5\xe9\x82\x1e\x8e\xf1\x92\x5f\x98\x44\x3d\xab\x5f\xe7\x94\xd4\x50\xd2\x4a\xbd\x66\x6e\xcc\x37\x0d\xe5\x48\xb9\xc6\x4d\xd8\xae\xa4\x2f\x08\x2b\x5a\x9e\xf1\x1e\x56\x67\xac\x48\x79\xf8\xdd\xca\xf7\x67\xa6\xe0\xd8\x8a\x6f\x80\xbe\xd7\x9e\x8c\xa3\x5c\x39\x36\x5f\x90\x1d\x3b\xd2\x72\xd2\x50\x30\xa7\xe2\x19\xb3\x62\xc7\x57\x3c\x97\x3b\x42\x7f\x2a\x57\xc5\xbe\xe7\x1b\xd2\xca\x0d\x0b\x4f\x0c\x45\x6c\x12\xed\xb8\xf2\x3e\x37\xd6\x7f\x79\xdc\x7d\xe9\x6a\x06\x6e\xcd\x9e\xae\x94\xb5\xca\x9f\xa5\x4f\x21\xce\xd6\x5c\x1e\x17\x8a\x42\x33\x33\x41\xa5\xeb\x96\x71\x33\xc9\xad\x88\x61\x24\xab\xbc\xd9\x1e\x1e\x77\x7b\xfc\xb5\x23\x14\xd9\xbb\x6a\x6d\x5a\x25\x6d\x5a\xec\x4a\x81\x54\xef\x0b\x57\xd2\x68\x12\x1c\x32\x38\x84\x08\x0a\x60\x77\x4c\xdd\x6e\x62\xc6\xda\x65\x81\xbc\xdb\x21\xa2\xee\xff\xaf\xb4\x82\xa6\x7e\x5b\x06\x92\x40\x27\x76\x84\xf1\x45\x5a\x21\x80\x8e\x5e\x08\x76\xbc\x70\xf8\xef\x84\x14\xf2\xff\xe1\x83\x1b\x59\x96\x99\xeb\x59\xe2\xc4\xbb\x3d\x1c\x9e\x60\xd3\x54\x08\x03\xb8\x01\x0e\xf0\x68\xc8\x39\x80\xce\xb1\x4d\xf0\xb0\xb6\x9f\xfb\xef\xaf\xcc\xff\x10\x6b\x02\x95\xe7\xfb\x40\xc3\x62\xac\xb7\x64\xb0\x2a\x59\x91\x23\x87\xb4\x30\x6b\x7b\x4b\xaa\x04\x2e\x35\xa2\x37\xa7\x80\xd8\xba\xcd\xa5\x49\x99\x2d\x3d\x1c\x65\x0e\x80\x0a\xa0\x34\xd9\x33\xf1\x64\x3a\x68\xf3\xa9\x90\xbe\x7d\xbe\xc5\xb2\xc2\x8e\xe9\xea\xce\x9a\x30\xcb\xb2\x4c\xb2\xd6\x84\x0e\xda\x62\x8e\x1d\x60\x2f\x3a\x6e\x00\x5d\x64\xaf\xfc\x73\xb4\x57\xd2\xa0\xe6\x51\x15\xb1\x55\x7b\x95\x2e\x28\xb6\xc6\xe3\x89\x25\xc1\x51\xf3\xc8\x56\xd0\x66\xb7\x75\xdc\x0f\x2d\x78\x4b\x9a\x4e\xf5\x42\x7a\x6d\x4a\x17\x58\x2f\x1b\xd4\x02\x38\x9f\xd5\x6d\x87\x8c\x54\xe4\x72\x2e\xb0\xfe\x56\xec\xa4\xc5\x53\xb0\xe7\xe2\xa5\x70\x0a\xd0\x5e\x29\x68\xe2\x0e\x76\xda\xf0\x69\x60\x99\x54\x7e\xee\xfb\xa8\xac\xf9\x5d\x11\x65\xe1\x35\x02\x2e\x27\xd4\x72\x32\x2d\x20\x52\x8c\x43\xf1\x3e\x8f\x47\xa4\xc7\x6d\x20\x98\xda\xc2\xbe\x7d\x54\xb0\x49\x79\x36\xd3\x72\x3e\xb7\xd3\xa0\x58\xe9\x9b\xe5\xfb\xe7\xbc\x4e\xfe\x04\x00\x00\xff\xff\xd7\xcb\xcb\xa9\x73\x0a\x00\x00")

func templatesPartialsResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsResponsesGomd,
		"templates/partials/responses.gomd",
	)
}

func templatesPartialsResponsesGomd() (*asset, error) {
	bytes, err := templatesPartialsResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSchemaGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xdd\x6e\xdb\x3a\x12\xbe\xcf\x53\x0c\x94\x14\xb0\x85\xca\xd9\xee\xa5\xb1\x29\x10\x74\x5b\x6c\x81\xb4\xf1\x3a\xed\xb9\x29\x8a\x03\xc5\xa6\x12\x9e\x43\x53\x8e\x7e\xd2\x04\xb2\xde\xfd\x80\xa4\x28\x0e\x29\xca\x56\x62\x27\xed\x4d\x2c\x72\x34\x9c\x3f\x7e\xfc\x86\x6a\x55\x45\xb0\x24\x09\xe5\x04\x82\x7c\x71\x4b\x56\x71\x50\xd7\x47\x00\x00\x62\xe6\x24\x23\x09\x4c\xcf\x60\x72\x25\xa7\xe6\x24\x99\xcc\x49\x02\x58\x42\xbd\xe4\x08\xfd\x11\xb3\x92\x58\x62\xeb\x8c\xe4\x74\x49\xcb\xd5\x9c\x24\xdf\xe7\x17\x52\x7e\xe6\x8c\x61\x79\x1e\xaf\x88\x14\xfa\x2a\x7e\xa0\x99\xd3\x10\x3e\x27\x50\xdc\xd2\x1c\x9a\xa5\x69\x0e\x31\x64\x24\x21\x19\xe1\x0b\x02\xe1\x29\x44\x48\x9e\x26\xc0\xd3\x42\x79\x52\xd7\x47\x72\x1c\xcd\xc5\x7c\xd9\xfa\xd0\xfc\x9d\xfc\x97\xe4\x8b\x8c\xae\x0b\x9a\x72\xa8\x6b\x08\x43\x34\x30\x0d\x43\xf8\xcf\x75\xf6\x1e\xaa\xaa\x4f\x5e\x4f\x13\xbe\x74\x56\x14\x0b\xea\x97\xbe\x3d\xae\x5b\xbf\x06\xd8\xd4\x88\x43\x18\x8a\x5f\xc2\x0a\x64\x80\x9e\xc4\x2b\x47\x75\xad\xf5\x69\xb1\x39\x89\x97\x97\x9c\x3d\x2a\x3d\xe2\x09\xc4\xa3\xf1\x28\xea\x7b\xf3\x6b\xc9\x58\x7c\xcd\x1a\x0b\xf4\x93\xe7\xc5\x23\xc7\x1f\x28\xc8\x6a\xcd\xe2\x82\x40\x90\x91\xbc\xc8\xe8\x42\x44\x29\x0f\x5a\xff\x50\x04\xbc\x6a\xec\xa0\xcd\xb2\x74\x4d\xb2\x82\x92\x1c\xdc\xb5\xc2\xd0\x4c\x4e\xc3\x70\x8b\x21\xeb\x56\x2e\x80\x25\x5d\x14\x10\xa8\xc2\x35\x46\x05\x4e\x65\x06\xdd\xfa\x0d\xe6\x69\x5a\x88\xda\x0c\x9a\x5a\xdd\xea\x3b\xe5\x8c\x72\x32\x7b\xf1\x85\xfd\x55\x87\x5d\xa7\xbc\xf8\x7f\x19\xf3\x82\x26\x94\x64\x07\xb5\x23\xf0\x19\xa5\x73\x5a\xd7\x47\x56\x7a\x31\xec\xe0\x7c\xd8\xd8\x73\x57\xd2\x8c\x2c\x11\xb6\x4c\xe6\x7a\x0c\x0b\x96\x19\xdb\x89\x27\x59\x63\xad\x14\xd4\xa6\xb7\x66\x6e\x40\x3e\x6e\x40\xee\xa4\x0d\xe0\x1d\xbd\x81\x39\xaa\x5c\xd8\xa8\x17\x22\xf9\xcf\xfe\x13\xf9\x9e\xa2\x4d\x6b\x44\x16\xf3\x1b\xa2\x02\xf4\x56\x04\x54\xba\xfd\x88\xdd\xb3\xeb\x1b\x6f\x8c\x4e\xf9\x3e\xea\xdc\xcd\xda\x67\xa3\x32\xf8\x54\x32\xd6\x9b\x1c\x9c\xba\x36\x2e\x9e\x94\x8b\xb8\x62\x28\xd5\xd9\xeb\xcd\x24\x2d\xc8\x2a\x9f\xf5\xa4\x73\xaf\x2c\xb5\x12\x8b\x32\xcb\x08\x37\x42\x1f\xd0\x33\x2e\xba\xdd\xb1\x96\x67\xd4\x96\x88\x9f\x24\x5c\x88\xcb\x2d\x93\x40\xf0\x26\x87\xf7\xf0\x46\x20\x17\x36\xa1\xad\xf6\xc3\xe4\x2a\xe1\xaf\x94\x29\x63\xd8\xb3\x76\x9c\x15\x4f\xed\xd4\xb0\xf3\xfb\x24\x69\xdc\x95\xb3\xda\xf7\x17\xa8\x94\x7b\xc9\x41\xa6\x67\xc6\x5a\x0f\x2d\x29\x6e\xc9\x5c\x51\x1c\x23\x85\x18\xce\x46\x9e\xb2\xad\xc5\x51\x3b\x6c\x9d\xd5\x23\x49\x30\x94\xaa\x31\x8c\xc8\x5d\xb3\xb8\x3a\x97\x83\xf4\xfa\x2f\xb2\x28\x82\xb1\x1e\x45\x25\x17\xa1\xca\xf9\x51\x55\x32\x6a\x75\xfd\x73\x54\x55\x41\x55\xe5\xb4\x20\x93\xeb\x38\x27\x65\xc6\xea\x3a\xa8\xeb\xaa\x3a\x91\x3f\x4f\x17\xe9\x6a\x9d\x72\xc2\x8b\xfc\x54\x01\x76\x7e\x7a\x6c\x17\x5e\xe6\xa9\x9b\xba\x8e\xaa\x0a\x58\xfa\x8b\x64\x6d\xdd\x8e\x4d\xc9\xb0\x7c\x4b\x21\xab\x65\x84\x3f\x5b\x4b\x79\xdf\xda\x45\x24\x68\x44\xf9\x55\x91\x51\x7e\x73\xc5\xe8\x82\xa0\xda\x94\xda\xc7\x2d\xdd\x11\x44\x46\xcd\x48\x4e\x64\xea\xdd\xd1\xd7\x04\x1f\x73\xa0\xf6\x7d\x43\x84\x76\x2b\xc0\x54\xa8\x51\x80\xf8\x90\xfb\xbe\xfb\xbc\xd1\x84\x46\x29\x73\x98\xa3\x38\xab\xd3\xff\x7d\xfb\x72\xf1\x95\xfc\xba\xa0\x9c\xe4\xfd\x72\x1d\xa5\xbd\x44\xeb\xbe\x29\x7a\xd8\xb8\x9c\x78\xb4\x57\xf1\x8e\xdd\x6a\xd1\x90\x2b\xf0\x56\xee\xa8\x4e\xb9\x7b\xe8\x6e\x2f\xca\x72\x05\xaf\xbe\x77\x86\xe1\x6b\x2f\xb0\xee\x55\x99\x7d\xc9\xed\x3f\x13\x3b\xd4\xcf\x1c\x53\x43\x11\x77\x00\x24\xee\x62\x38\xfb\xf2\x8f\xb6\x13\x44\xe8\xd8\x85\x5a\x83\xb0\xbe\x3e\x6b\xa4\x1b\xb1\xa7\x81\xa4\x53\x01\xc7\xc7\xd2\x5d\xf7\xe0\x95\x6b\x4d\xe1\x99\x38\x08\x6e\x95\x75\xb0\xcf\xa6\xca\x73\x92\xf4\x03\x9f\xbf\x92\x06\x16\xd2\x6f\xc9\x16\xf2\x5b\xe7\x2a\xcd\x74\x2a\xce\x19\xbb\x6c\x11\xeb\x9c\x3f\x9a\x87\x4b\x4e\x2e\x45\x32\x4d\x5e\x5f\x29\x57\x6e\xb2\x0e\x89\xa8\xdb\x1a\xc7\x1d\xdd\x93\x8a\x6c\x4f\xfe\xfd\xa8\xe3\x34\x4d\x68\xdd\xa6\x6d\x1a\x0c\x34\x5d\xeb\x10\x38\x74\x6e\x69\xd0\xdc\x93\xae\x66\x7a\x99\xdd\x4e\x4a\x86\xfb\x78\x59\x38\x7a\x2a\x0c\x2f\x39\x81\xcb\x44\x74\xed\x9d\x98\xdf\xf5\x85\xdb\xdc\x21\x34\xda\x9e\xd8\xb3\x6e\x4d\x81\xd3\x47\xdb\xc6\xab\xfd\xd0\x1a\x7f\xce\xd8\x3e\xc6\x2b\x6d\xaf\x67\xbc\xdc\xbf\xc6\x78\xfe\xb8\x97\xf1\x52\xdb\xcb\x18\xdf\x5b\xe8\x77\x4e\x8d\x1f\xe4\x90\xdc\x5a\xdd\xcf\xbd\x17\x18\x78\x21\x40\x97\x0f\x7e\x84\xef\xe2\xba\x62\x13\x1f\xd2\x92\x17\x42\xee\x5d\x2f\xb6\xf7\x34\x3d\x30\xb0\xf1\x81\x97\xea\x72\x10\xc0\x69\xce\x77\xb5\x4e\x0b\xf8\xf7\x14\xde\x1c\xdf\x77\x8f\x4a\xfd\xef\xc7\x67\xe9\x39\xa8\xc0\x40\x55\xe1\x50\x1c\xa4\x65\xf2\x55\xa8\x3c\x7e\xd0\xe9\x53\xd7\x91\x5a\x36\x52\x4a\x22\xd7\x8e\xb1\xc7\x51\x27\x6d\x67\x90\x97\x2b\x7b\xe8\x9d\x8f\xe5\xba\x0d\x19\x9e\xfb\x2d\x8d\x99\x7b\x12\x99\x3a\x79\x81\x9e\x06\x9e\xd3\xd7\xf4\x71\xa8\x03\x6e\xb0\xdf\x4a\x83\x1d\x6e\x75\x0c\xee\xa6\xb0\xed\x7f\x3e\xe3\x7a\x4a\xc9\x1f\x88\x3a\xef\xaa\xc4\xe7\xf6\x61\xa7\x21\x98\x3d\x02\xdf\xb4\x69\xcd\x57\xa2\xee\xe7\x2f\xb5\x95\x7c\xdf\xc0\x66\x1e\x9c\x74\x3f\x81\xcd\xfa\xaf\x9a\xfa\x6f\xc4\x76\xdf\x65\x0d\xb8\x11\x13\x1b\xd0\xf7\x8d\x4b\x19\x77\x41\xf9\xdf\xf6\x7c\x0b\x31\x86\x1c\xb8\x31\xa6\x09\x88\xfa\xc4\x1f\x99\x82\x38\xcb\xe2\xc7\xc0\x8b\x0b\x27\xf2\xfa\x57\x1e\x29\xcd\x2b\x9f\xe5\x80\x4f\x96\x26\x20\x1a\x0c\xf9\x46\x73\x13\xdb\x74\x16\xd6\x90\xea\x3c\xf0\x90\xe2\x7a\xfe\x13\x05\x97\x36\xa3\xb9\x4d\x86\xb1\x16\x3f\xac\x89\x60\xf8\x14\xff\x78\x02\xe2\x5a\x8e\xef\x83\xba\x3f\x77\xc2\x2e\x4e\x60\x27\x4d\x0d\x8e\xf8\xf3\xe4\xbb\xb3\xd6\x9a\x24\x36\x61\x55\xae\x86\xd7\xb9\xa6\xb4\x00\x68\xdc\xb5\xd4\xe7\x96\xf3\x31\xd4\xf9\x84\xf9\x29\xcd\x56\xb1\xc0\x44\x18\x55\x95\x3d\x58\xd7\x63\xa8\x2a\xc2\x97\x1e\x8c\xb1\x21\x06\x01\x4c\xf3\xf3\x34\x84\x8f\x7c\x09\x69\xb2\x0d\x65\xb4\x24\x3e\xc1\x4c\x14\x3c\x50\x64\x1f\x75\x91\x59\x6b\x4e\xf8\x92\x64\x10\x33\x66\x2b\xeb\x7e\xf4\x9e\x7c\x29\x59\x41\xd7\x4c\x35\x5a\x10\x86\xfa\x19\xd2\x24\x0c\xa7\x02\xa7\x1d\x91\xce\xb7\x5c\x4b\x5b\xfc\xd0\xa8\x89\x1f\xe8\xaa\x5c\xb5\x2a\xd4\xf8\xd6\x77\x3f\x3e\x2c\x58\x99\xd3\x7b\xd2\x2a\x69\x47\x60\x65\xd4\x15\x59\x49\x76\x18\x41\x9b\x0f\xf2\x5f\x28\xb7\x8c\xa0\xfc\x09\x46\x68\x25\xc8\x08\xa3\x6e\x80\x11\xf1\xc3\x05\xe1\x37\xc5\xad\x15\x0f\x60\x72\x0c\x85\xc5\x08\xed\xf2\xc9\x52\xa7\x4c\x71\xd5\x61\xa1\xad\xea\x66\x71\x51\x90\xac\xf1\xb0\x79\xd0\x5a\xd0\xdc\x2e\x0f\x15\x80\x59\x0e\x4a\xfc\x44\xfe\xb5\x22\xbb\xdc\xc3\xba\x1a\xef\x6c\x5d\x48\x64\xab\xae\xef\x9c\xde\x95\x04\xa9\x43\x03\x83\x73\x27\xc0\xda\xf1\xcc\x7c\x80\x46\xee\xb5\x72\xbb\xdc\xc3\x0a\x1b\xf7\x3c\x0a\x91\xdc\x56\x85\xe7\xcb\x25\x15\x5b\x3a\x66\x86\xfa\x9d\x33\x01\x87\x4b\xb5\x86\x11\x40\xcb\x08\x40\x10\x22\x83\xa2\x70\x53\xc0\x88\x11\x0e\x93\x8f\xbc\x5c\x8d\xe1\x5f\x16\xc4\x87\xa1\x18\x0d\xc3\xa9\xd0\xe0\xbb\xde\x57\x5c\xda\x50\x5d\x21\xee\x3f\x66\xa4\x4c\x5d\x77\x14\x0d\xa1\x6e\x36\xb4\x7a\x71\xd3\xc1\xd6\x06\x19\xc5\x31\x02\xf2\x80\xf3\xc1\x6a\x7b\xdc\x38\x51\xef\x1c\xac\x19\x59\xb3\x78\x41\x60\xa4\x0e\xa2\xc9\x18\x82\x3f\x03\x08\xa2\x60\xa8\xe5\x7d\xe6\xe8\x79\x91\xb9\x58\x38\x74\x35\x8c\x9c\x7a\xe4\xfd\x2c\x75\x0b\x39\xb5\xbb\x12\x87\x34\x62\xef\x3d\x9c\xd1\xe5\x09\xfd\x94\xb1\x3d\x87\x69\xc1\xfc\x4c\xab\x5f\xa2\x97\x87\x3d\x91\x8e\x42\x97\xb6\x79\x03\xd8\x21\xaa\x1e\xda\x35\x94\x18\x81\xdb\xfc\x74\x29\x68\x37\x66\x30\xa0\xd9\x3f\x2c\xb1\x81\x2e\xb9\xf1\x0c\x0d\xdb\x97\x43\x8a\xd8\xaa\x62\x37\x24\xdd\x42\x95\xfd\x43\x43\xfc\xf1\x56\x3b\x49\xe5\x37\xc5\x40\xce\x04\x2e\x68\xe2\x4b\xcd\x8e\xc2\x33\x2d\xe0\x56\x9a\xd0\x29\x54\x8a\xc9\xc0\x57\xe4\xf6\x3d\xb5\x4f\x71\xb7\x1d\x41\x8a\xe5\xa4\x1f\x31\x9a\xeb\x57\xd1\xb1\xa7\x6b\xa8\x6b\xfd\xdf\x0a\x3b\x40\x6b\xb6\x6f\xbb\x6c\x24\x28\xf6\xd0\xd2\x16\xd2\x6f\x5b\xd5\xbe\x94\xfe\x13\x00\x00\xff\xff\x27\x4b\xc7\x7e\x02\x2a\x00\x00")

func templatesPartialsSchemaGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSchemaGomd,
		"templates/partials/schema.gomd",
	)
}

func templatesPartialsSchemaGomd() (*asset, error) {
	bytes, err := templatesPartialsSchemaGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/schema.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSecurityGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbf\x4e\xc3\x40\x0c\xc6\xf7\x3c\xc5\xa7\xb4\x03\x44\xbd\x86\x19\x89\x81\x81\x0d\xb1\x94\x17\x38\x25\x4e\x39\xd4\x38\x55\xe3\x4a\xa0\xe4\xde\x1d\xf9\x9a\xff\x04\x09\x0f\x51\xe2\x9f\xed\xf8\xfb\xdc\x34\x06\x69\x82\x03\x65\xd7\x8b\x93\x6f\xbc\x53\x79\x3e\x59\x21\x24\x29\x8c\xf7\x91\xf2\x9c\x0a\xc7\x84\xb8\xee\x8a\xe2\x81\x5c\x2c\x1f\x09\x5b\xb6\x25\xed\xb0\xad\xb3\xea\x4c\x35\x1e\x9f\xb0\x87\xf7\x51\x8b\xa6\xb9\x31\x78\x8f\xf0\xf5\x59\x39\x1e\xea\xe2\x1d\xe2\x40\xc2\x28\xe2\xbc\x1b\x3a\xbe\xa5\x09\x5e\x38\x47\x55\xfc\xbd\x5f\xb4\x10\xf0\xea\x6a\x59\x11\xf1\x4b\x83\xd6\xe9\xdf\x23\x00\xd0\x19\xae\xb8\x6d\x8d\x2e\xba\xdc\x51\x70\x77\x22\xc6\xfe\x1e\x0f\x8a\x07\xae\xb1\xd9\xe0\xf9\x2a\x1f\xc4\xe2\x32\x2b\xae\xe2\x39\x6e\xdf\x6c\x49\xed\x21\xa8\x6d\xe7\xc4\x18\x63\xc2\xc3\x98\x39\x99\xb8\xea\x38\xa7\x2f\xb5\xb5\xd7\xde\x1b\x8b\x45\x68\x8f\xf4\x92\x27\x57\x1a\x3b\x17\x4d\xa3\xcb\xeb\x99\xff\xdf\x63\xcd\xee\x9f\x00\x00\x00\xff\xff\x45\xb9\xf2\x04\x53\x02\x00\x00")

func templatesPartialsSecurityGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSecurityGomd,
		"templates/partials/security.gomd",
	)
}

func templatesPartialsSecurityGomd() (*asset, error) {
	bytes, err := templatesPartialsSecurityGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/security.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\xcc\x3e\x39\x80\x67\x10\x91\x88\x07\x08\xed\x14\x03\x8d\x96\xe6\xb9\x0a\xbd\xbb\x04\xb2\x90\x2e\xe7\x5b\xfc\xe3\xbd\x77\x96\x6d\xd5\x05\xad\x21\xdc\x52\x11\x8e\xc3\x75\x76\xad\xc1\x54\xb6\x35\x99\xc0\x5d\x75\xfb\xbc\xab\x1e\xd3\x4b\x25\x11\x73\x9e\x0c\x8c\x43\xa3\x16\x22\xfc\x2d\xb0\xa7\x38\x8a\xbc\xef\xaa\x79\xce\xdf\x12\xb5\x3c\xe3\x95\x08\x27\xe9\xa7\xbf\x00\x00\x00\xff\xff\x56\x01\xc5\xa0\x8c\x00\x00\x00")

func templatesResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesResponsesGomd,
		"templates/responses.gomd",
	)
}

func templatesResponsesGomd() (*asset, error) {
	bytes, err := templatesResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemasGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x09\x73\x55\x57\x2b\x94\xa4\xe6\x16\xe4\x24\x96\xa4\x2a\x28\x15\x27\x67\xa4\xe6\x26\x2a\x29\xa4\x64\x26\x97\x28\x28\x05\x83\x79\x41\xa9\x69\x4a\x0a\x7a\x70\xb6\x82\x12\x48\xbb\x12\xd4\x14\xa5\x80\xa2\xd4\xe2\xcc\x94\xcc\xd2\xdc\xa0\xd4\xb4\xd0\x20\x1f\x25\x05\x3d\x34\x11\x90\x45\x80\x00\x00\x00\xff\xff\xf5\x76\x34\x32\x80\x00\x00\x00")

func templatesSchemasGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemasGomd,
		"templates/schemas.gomd",
	)
}

func templatesSchemasGomd() (*asset, error) {
	bytes, err := templatesSchemasGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTagGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\x28\xc9\x77\x4e\xcc\x4d\xcd\x51\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x49\x73\x55\x57\x2b\xe8\xb9\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x81\xc4\xb9\xaa\xab\x75\x15\x32\xd3\x14\xf4\x5c\x2b\x4a\x52\x8b\xf2\x12\x73\x5c\xf2\x93\x8b\x41\x12\x0a\x0a\x0a\x0a\xd8\xe4\x30\x0c\x50\x80\x82\x68\x90\xe9\x78\x54\xc6\x6a\x60\x28\x08\x0d\xf2\x51\xa8\xad\xd5\x84\xdb\x95\x9a\x53\x9c\x0a\xb3\x1b\x04\x6c\x70\xe8\xb0\x43\xe8\xc8\x4b\x01\x69\x40\x30\x01\x01\x00\x00\xff\xff\xd8\x77\x01\x1a\x07\x01\x00\x00")

func templatesTagGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesTagGomd,
		"templates/tag.gomd",
	)
}

func templatesTagGomd() (*asset, error) {
	bytes, err := templatesTagGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tag.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.gomd":                 templatesIndexGomd,
	"templates/info.gomd":                  templatesInfoGomd,
	"templates/operation.gomd":             templatesOperationGomd,
	"templates/partials/content.gomd":      templatesPartialsContentGomd,
	"templates/partials/headers.gomd":      templatesPartialsHeadersGomd,
	"templates/partials/parameters.gomd":   templatesPartialsParametersGomd,
	"templates/partials/request_body.gomd": templatesPartialsRequest_bodyGomd,
	"templates/partials/responses.gomd":    templatesPartialsResponsesGomd,
	"templates/partials/schema.gomd":       templatesPartialsSchemaGomd,
	"templates/partials/security.gomd":     templatesPartialsSecurityGomd,
	"templates/responses.gomd":             templatesResponsesGomd,
	"templates/schemas.gomd":               templatesSchemasGomd,
	"templates/tag.gomd":                   templatesTagGomd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.gomd":     &bintree{templatesIndexGomd, map[string]*bintree{}},
		"info.gomd":      &bintree{templatesInfoGomd, map[string]*bintree{}},
		"operation.gomd": &bintree{templatesOperationGomd, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"content.gomd":      &bintree{templatesPartialsContentGomd, map[string]*bintree{}},
			"headers.gomd":      &bintree{templatesPartialsHeadersGomd, map[string]*bintree{}},
			"parameters.gomd":   &bintree{templatesPartialsParametersGomd, map[string]*bintree{}},
			"request_body.gomd": &bintree{templatesPartialsRequest_bodyGomd, map[string]*bintree{}},
			"responses.gomd":    &bintree{templatesPartialsResponsesGomd, map[string]*bintree{}},
			"schema.gomd":       &bintree{templatesPartialsSchemaGomd, map[string]*bintree{}},
			"security.gomd":     &bintree{templatesPartialsSecurityGomd, map[string]*bintree{}},
		}},
		"responses.gomd": &bintree{templatesResponsesGomd, map[string]*bintree{}},
		"schemas.gomd":   &bintree{templatesSchemasGomd, map[string]*bintree{}},
		"tag.gomd":       &bintree{templatesTagGomd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
