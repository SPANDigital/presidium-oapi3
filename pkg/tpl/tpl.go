// Code generated for package tpl by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/index.gomd
// templates/info.gomd
// templates/operation.gomd
// templates/partials/content.gomd
// templates/partials/headers.gomd
// templates/partials/parameters.gomd
// templates/partials/request_body.gomd
// templates/partials/responses.gomd
// templates/partials/schema.gomd
// templates/partials/security.gomd
// templates/responses.gomd
// templates/schemas.gomd
// templates/tag.gomd
package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\x0b\x01\x31\x15\x6a\x6b\xb9\x40\xe2\x80\x00\x00\x00\xff\xff\xff\xd8\xd2\xd8\x1c\x00\x00\x00")

func templatesIndexGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexGomd,
		"templates/index.gomd",
	)
}

func templatesIndexGomd() (*asset, error) {
	bytes, err := templatesIndexGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInfoGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\xbd\x0a\x83\x30\x10\x07\xf0\x3d\x4f\x71\x90\x2d\x90\x3c\x80\x88\x4b\xdb\x4d\x5a\xb0\xda\x5d\x6c\x84\x80\x1f\x25\x06\x17\xf1\xdd\xcb\x9d\xa9\x1f\x69\x87\x3a\xe5\xfe\xf7\xf7\x17\x95\x52\x32\x67\x5c\xa3\x23\x98\x26\x50\x39\x1e\x61\x9e\x19\xe6\x8c\x73\x7e\x48\x61\x54\x38\x3e\xb4\x1d\x4c\xdf\x61\x8d\xe1\x7c\xd6\x43\x65\xcd\xcb\x6d\x99\x04\x53\x83\xca\xb5\x6d\x87\x5b\x7d\xd7\x76\x34\x15\xa9\x0c\x00\x80\x73\xa0\x0d\xf4\x35\xf8\x5d\x44\x8b\x98\xee\x0a\x5f\x4a\x16\x50\x77\x4f\x14\x3e\xf6\xa9\xef\x5c\x59\xb9\x3d\xea\x23\x1a\x83\x9a\xba\x96\x2d\x7d\x00\xf8\x47\x08\x4c\x84\x58\xfe\x3a\x6c\xad\x84\xbf\xf4\x97\x78\x69\x4b\xd3\x1c\x49\x8a\x42\x73\xed\xfd\x83\x16\x59\x7a\x24\x8b\x2c\x45\x30\xde\x8b\x4b\x29\xf9\x02\xb7\xe3\x3b\x00\x00\xff\xff\x36\xe9\x6b\x90\xd5\x01\x00\x00")

func templatesInfoGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesInfoGomd,
		"templates/info.gomd",
	)
}

func templatesInfoGomd() (*asset, error) {
	bytes, err := templatesInfoGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/info.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOperationGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x6a\x84\x30\x14\x46\xf7\x3e\xc5\xc5\xa5\x10\x1f\xa0\x8b\x2e\xca\x6c\x0a\xfd\x63\xa6\x0f\x60\xd0\xaf\x34\x60\x34\x4d\xae\x0b\xb9\xe4\xdd\xcb\x95\x8c\x16\x66\xba\x3c\xf9\x4e\x8e\x51\xc4\x90\xfb\xa2\xf6\x15\xfc\x3d\x0f\x9f\x8e\x47\x50\xce\x54\x19\x63\x2a\x56\x7a\x20\x91\xeb\xac\x8b\xd2\x9b\xf5\x6a\x6d\x92\x08\xc6\x84\x02\x7f\x6e\xbc\x07\x44\xcb\x6e\x9e\x9e\x4f\x87\x6a\x08\xd3\x90\x73\xd5\x75\x5d\xf5\x7f\x56\x57\x9d\xf5\x5d\x27\x84\x88\xde\x32\xd4\x6a\x9a\x03\x9b\xa6\xe4\xf4\x46\x91\x2f\x8b\xf7\x36\xae\xda\x7b\x14\xb9\xe2\x56\xdf\xd5\x23\x9c\xfa\xe8\x82\xbe\x90\x72\xd6\xcf\xdf\x9c\xec\x71\x43\x0c\x1f\x46\xcb\xa0\x3a\xd8\x68\x3d\x18\x31\xbd\xb8\xc4\x35\xb5\x1f\xfb\xc1\xad\x1c\xf1\xb3\x20\xf1\xd3\x3c\xac\x35\xb5\xe7\x83\xee\xa9\x29\xcc\x53\x42\xa9\x9e\x0b\xde\x89\x26\xf4\x4b\x74\xbc\x16\xf3\x52\x70\xfb\xb9\xdf\x00\x00\x00\xff\xff\x39\x4e\xed\xbc\xcf\x01\x00\x00")

func templatesOperationGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesOperationGomd,
		"templates/operation.gomd",
	)
}

func templatesOperationGomd() (*asset, error) {
	bytes, err := templatesOperationGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/operation.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsContentGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4d\x6e\xc2\x30\x10\x85\xf7\x39\xc5\x93\xc5\xca\x2a\x64\x8f\xd4\x55\x7f\x76\x15\x12\xe5\x00\xb8\xf1\x4b\x89\x54\x3b\x34\x71\x17\xc8\x9a\xbb\x57\x09\x06\x5b\x20\xbc\xb2\x3c\xdf\xcc\xbc\xcf\x31\x2e\x51\x6b\xbc\xf4\x3e\xd0\x07\x04\xba\xe3\x8f\x09\x84\xae\xb1\x14\xa9\xa6\xb2\x65\xdb\x79\x42\x35\x67\x46\x89\x54\x00\x30\x95\x06\xe3\xbf\x89\x85\x37\x8e\x4f\x58\x38\xda\xce\xec\x4e\x47\x62\xfd\x8c\x15\x44\xaa\x19\x9c\x8e\xd6\xef\xfd\xe0\x4c\x58\x6b\x8d\x7d\x8c\x73\x87\xc8\x3e\x03\x31\xe6\xdd\xea\x3a\x48\x15\x43\x8b\xb5\xf4\x36\x65\xcb\xb7\x5a\xe3\xcd\x5b\xf4\xed\x43\x97\x0b\xb6\xa5\xb7\x1c\x46\x18\x7c\x5c\x03\x17\xba\xb5\xc6\x6e\xf3\xba\x49\x18\xc2\x81\x98\x33\xe0\x16\xbc\xfc\x4b\x4e\x5b\x44\xec\x5a\xac\x3e\x9b\x03\x9d\x41\x7a\xbd\xb3\x1c\xe7\xb2\x82\xed\x9a\x00\x75\x86\xb7\x6c\xd5\x6d\x63\xf2\x44\x56\xc6\x9d\xf3\xc0\xdf\x3f\x8e\x01\x5f\xbd\x3d\xa5\x8c\xff\x01\x00\x00\xff\xff\xf4\xfa\x1f\xcc\xda\x01\x00\x00")

func templatesPartialsContentGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsContentGomd,
		"templates/partials/content.gomd",
	)
}

func templatesPartialsContentGomd() (*asset, error) {
	bytes, err := templatesPartialsContentGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/content.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeadersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x31\x4f\xf3\x30\x14\xdc\xfb\x2b\x4e\x51\x87\xef\xb3\x68\xcb\x8c\x80\x09\xa4\x0e\x85\xa1\x54\xec\x26\x7e\x6e\x2d\x25\x4e\x70\x5c\x21\xf4\xe2\xff\x8e\x9c\xa4\xc1\xa1\x74\x20\x93\x75\xef\xce\x79\x77\x67\xe6\x05\x56\x02\x6b\x92\x8a\x1c\x76\x54\xd6\x85\xf4\x04\xb1\xc2\x22\x84\x19\xb3\x22\x6d\x2c\x21\x3b\x74\x84\xac\x43\x01\x20\xea\xe6\x3d\x88\x9b\x3b\x2c\x5f\x65\x71\x24\xa4\x43\x47\xba\x9b\x6c\x49\xa7\xb8\xd1\xa3\x6e\x40\xcf\x27\xcb\x2d\xbd\x1f\x8d\x23\x85\x10\x70\xfb\xe6\xee\x21\xdc\x80\x08\x30\x93\x55\x21\x80\x39\x55\x3c\x50\xed\x28\x97\x3e\xd5\xa8\x11\xfb\x56\xb5\x60\xf6\x27\x97\x59\x55\x93\x93\xde\x54\xf6\x25\x3f\x50\x29\x77\x9f\x35\x65\xe3\x95\x3d\x86\x4e\x24\xe2\x82\xbe\x5a\xef\x9e\x36\xcf\xf4\xb1\x31\x96\x9a\xe4\xd7\x4d\xee\x4c\x1d\xaf\x89\xf1\x08\xb4\xa3\x59\xb2\x71\x9d\xd9\x70\x1c\x4e\x2b\x81\x47\xab\x50\xe9\x4b\xa9\xcf\x26\xa5\x6c\x4c\xe3\xe1\xcf\x8a\xc1\xb4\x99\xc8\x9a\xb6\x63\x34\xf6\x1e\xff\x0a\xb2\x58\xfe\xc7\xf5\xcf\xb4\x9d\xb4\x7b\xc2\xdc\xca\x92\xae\x26\x4d\x26\xbc\xf8\xb5\x10\x82\xb9\x27\x22\x04\x21\x26\x01\x9e\x9e\xc5\x85\x4a\x07\xff\x7f\x8a\xe3\x57\xbf\x5f\x01\x00\x00\xff\xff\xe6\x6d\x44\x2a\xa7\x02\x00\x00")

func templatesPartialsHeadersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeadersGomd,
		"templates/partials/headers.gomd",
	)
}

func templatesPartialsHeadersGomd() (*asset, error) {
	bytes, err := templatesPartialsHeadersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/headers.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsParametersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x6e\xd4\x30\x10\xbd\xef\x57\x3c\xa5\x3d\xb4\x11\x9b\xe5\x8c\x80\x13\x20\x56\x5a\x2a\x28\x15\x17\xc4\xc1\x24\x93\xae\xc5\xc6\x49\x6d\x2f\xa5\x4a\xfc\xef\xc8\x8e\x93\xd8\xd9\x6c\xc1\x87\xdd\x68\x9e\xdf\x8c\xfd\xe6\x79\xda\x76\x8d\x4d\x0a\xbd\xe7\x0a\x9a\xaa\xe6\xc0\x34\x41\x52\x4e\xfc\x37\x29\x30\x7c\x66\x92\x55\xa4\x49\xde\x52\x89\xc7\x3d\xcf\xf7\xc8\x6b\xa1\x19\x17\x16\xb5\x41\x26\x8a\x70\x1f\xd2\x0d\xd6\xc6\xac\x6c\xe2\x82\x4a\x2e\x08\x49\x33\x80\x09\x8c\x59\x01\x80\x45\x2f\xc7\x30\x5e\xbd\x41\xf6\x8d\x1d\x8e\x14\xe1\x92\x4a\x87\xd8\x2a\x41\x9c\x97\x21\xd5\x03\x76\x75\x48\xd3\xb6\x0d\xc0\xec\x86\x55\x36\x65\x9a\x2e\x60\x5b\xd1\x23\x6d\x1b\x67\xcc\x6e\xe9\xe1\xc8\x25\x15\x30\x06\xaf\x7f\xca\xb7\x48\xa5\x8f\xd8\xcd\x24\x0a\x63\x4e\x49\xef\xa8\x91\x94\x33\x1d\xd2\x8a\x31\x36\x11\x3b\x77\x85\x51\xe9\x49\x9a\xbb\xa7\x86\x92\x30\xe3\xd7\x7c\x4f\x15\x83\xe7\x40\xd7\x1f\xef\x3e\xed\x6e\xe8\x71\xc7\x05\xa9\xb8\xb4\xca\x25\x6f\x34\xaf\x85\xdd\x3c\xea\x44\xc2\x9e\x65\xe5\x3f\xfd\xd7\x26\xc5\x7b\x51\xa0\x2e\xd1\xcc\x3b\xb6\x3a\xe7\x05\x4e\xbd\x17\xfc\x89\xca\x5a\x82\x9d\xd2\x17\x1b\xde\xdf\xea\x3f\x9a\x7a\xa9\xfa\xe4\x91\x13\xa2\x96\xcb\x89\x30\x84\x7b\xce\x8e\x8b\x5f\x11\xec\x6e\x7c\x50\xe4\x68\x6a\x90\x31\x62\xf2\x12\xf4\x30\x80\x99\x3d\x25\x12\x26\x25\x7b\x4a\xdc\x5d\x10\x2c\x17\xfe\xfe\x7c\xd7\x7c\x9e\xad\xa6\x4a\xd9\x04\x3f\xa2\x62\xc3\x59\x44\xad\xe3\x92\xf3\x52\xb6\xcd\x63\x8d\x03\x57\xfa\xcb\x91\x09\xcd\x4b\x4e\x52\x25\xe7\xae\xe2\xb2\x9f\x24\x5a\xc7\x95\x9c\x65\xd7\x81\x20\xd9\x87\x5a\x56\x4c\x5b\xe0\xaa\x6d\xe3\xa0\x31\xd7\x83\x5f\xe3\x4a\xbd\xa1\x96\xfd\x85\xc9\x60\x88\xe4\xf9\xa7\xbd\x86\x51\xb3\xe3\x4a\x5b\x63\x46\x23\xe7\x39\x73\x29\xcb\x48\x66\xa3\xe1\x5e\xe3\xea\x40\x02\xd9\x35\x5e\x8e\x1e\xb2\xeb\xe2\x02\xf6\x65\x93\xd2\x53\x05\xb5\x0a\x86\x87\x1b\x16\x1d\xb6\x02\x1d\xdc\xc1\x3b\x04\x4f\xcb\x3f\x2c\xb7\x75\xed\x56\x37\xfe\x8c\x7f\x7e\x75\x91\x6c\x92\x89\x7b\xc2\x25\x17\x05\xfd\x79\x31\x9f\x7a\x0b\x8d\x5b\xb0\x59\x72\x66\xe2\x05\xda\x7b\x0d\xa6\x56\xcc\x9a\xe2\x5f\xfd\x74\xf5\x5e\x6f\xaf\xef\xdf\x00\x00\x00\xff\xff\x16\x0d\x03\xfe\x07\x06\x00\x00")

func templatesPartialsParametersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsParametersGomd,
		"templates/partials/parameters.gomd",
	)
}

func templatesPartialsParametersGomd() (*asset, error) {
	bytes, err := templatesPartialsParametersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/parameters.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsRequest_bodyGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcb\x6e\x83\x30\x10\xbc\xf3\x15\x23\x92\x13\x2a\xe4\x1e\x29\x97\x3e\x8e\xed\x81\x56\xbd\xbb\xb0\x04\x4b\xc1\xa6\xe0\xb4\x8a\x8c\xff\xbd\x32\xaf\xda\x2e\xf5\xc9\xbb\x33\xb3\xf6\x7a\xd6\x5a\xa7\x38\x24\x50\x35\xef\xa1\xa8\x69\x2f\x4c\x11\x3a\x2a\x88\x7f\x51\x0f\x86\x9c\xce\x57\xea\xd5\xbd\x2c\x6f\x39\x55\xf8\xae\x79\x51\xa3\x90\x42\x31\x2e\x26\xbc\x02\x13\x25\x18\xde\xd9\xe5\x4a\x48\x0e\x48\x8d\x89\x6c\xd9\x92\x2a\x2e\x08\x71\x47\x9f\x4b\x89\xd8\x98\x08\x00\x2c\xcc\x2b\x64\x70\xe2\xbd\xc3\xc3\xf1\x84\x6c\x2c\xe8\x13\xaa\x11\xc8\xa9\x9a\xd3\x4e\x2d\x4f\xee\xc0\x76\xed\x76\xc8\x27\x14\x16\x8e\x3c\x50\xeb\x50\x9e\x59\x32\xef\xa8\x84\x31\x49\xb2\x04\x49\xa2\x35\x5d\x7a\xb2\xb9\x17\xa9\xe0\xe5\x45\x69\x8c\x5f\x76\xc0\x33\x95\x9c\xbd\xdd\x5a\xc2\x80\x47\xea\x8b\x8e\xb7\x8a\x4b\x81\x01\xaf\x45\x4d\x0d\xc3\xe0\x0b\xd2\xdf\xe5\xee\x9d\x68\x08\x2e\x9e\xa2\x63\xe2\x4c\xd8\x0b\xd6\xd0\x1d\xf6\xcd\x7a\xe2\xf1\xe4\x77\xf4\x20\x85\x22\xa1\xc2\x87\x71\xdf\x6f\x15\x67\xf3\xf5\x36\xb8\xab\x15\xfd\x48\xc9\x27\x43\xfe\x48\x03\x87\xfe\x51\x6f\x4b\x5d\xd7\xc3\x35\x40\xeb\xb1\x57\x63\xc6\xbd\xdf\xa3\xfb\xc6\x0b\x61\x1d\xe9\x58\xb6\xd4\x31\x8b\x4d\xe7\xd8\x23\xe3\xcd\xa6\x03\x5b\x96\x4b\x4f\x16\x6f\x67\xa3\x20\xe5\x8e\xf5\x1c\x06\xdb\x43\x82\x27\x51\x42\x56\x98\x3b\xc0\x87\x9d\xdb\xf9\xf7\xfc\x04\x00\x00\xff\xff\x24\xd9\x72\x61\x95\x03\x00\x00")

func templatesPartialsRequest_bodyGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsRequest_bodyGomd,
		"templates/partials/request_body.gomd",
	)
}

func templatesPartialsRequest_bodyGomd() (*asset, error) {
	bytes, err := templatesPartialsRequest_bodyGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/request_body.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xc9\x6e\xdb\x30\x10\xbd\xeb\x2b\x06\x92\x0f\x6d\x10\x2b\x3d\x17\x68\x2f\x69\x01\x1f\x1c\x23\x50\xdc\x5e\x0b\xc1\x1a\x25\x44\x6d\x4a\x10\x69\x14\x85\xa4\x7f\x2f\xb8\x88\x9b\x58\x47\x81\xe3\x93\x48\xbe\xe1\x6c\x6f\x1e\xdd\xf7\x6b\xb8\xbb\x81\x02\x59\xdb\x50\x86\xc0\xf1\xd4\x1e\x4b\x8e\x70\x73\x07\xeb\x71\x4c\xc4\x79\x85\x35\xa1\x08\x69\xa7\x41\x29\x8c\x63\x02\x00\x20\x0e\x57\x1d\xd6\xf0\xf9\x0b\xe4\xd3\x15\x79\x81\x75\x00\xd0\x77\x7b\xa8\x9f\xe5\xf1\x8c\x1e\x8e\xf1\x92\x9f\x99\x44\x3d\xa9\x4f\xe7\x94\xd4\x50\xd2\x4a\x79\x33\x37\xe6\xf7\x0d\xe5\x48\xb9\xc6\x4d\xd8\xae\xa4\xcf\x08\x2b\x5a\x9e\xf0\x16\x56\x27\xac\x48\xb9\xff\xdb\x4a\xff\x33\x53\x70\x6c\xc5\x6f\x80\xbe\xd7\x91\x8c\xa3\x5c\x39\x36\xdf\x90\x1d\x3a\xd2\x72\xd2\x50\x30\xa7\xc2\x8d\x59\xb1\xc3\x0b\x9e\xca\x2d\xa1\xbf\x55\xa8\x62\xdf\x8b\x0d\x69\xe5\xa6\x85\x47\x86\x22\x37\x89\x76\x42\x79\x5b\x18\xeb\x57\x9c\xbb\x9e\x2e\x56\xe0\xda\xea\xe9\x4e\x59\xab\xfc\x49\xc6\x14\xe2\x6c\xcf\xe5\x71\xa1\x28\x34\x33\x13\x54\xba\x6c\x19\x37\x93\xdc\x8a\x18\x46\xaa\xca\x9b\xcd\xfe\x61\xbb\xc3\x3f\x5b\x42\x91\xbd\xa9\xd7\x66\x54\xd2\xa6\xc5\xae\x14\x48\xe5\x5f\x84\x92\x46\x8b\xe0\x90\xc1\x21\x44\xd0\x00\xbb\x63\xfa\x76\x15\x33\xd6\x2e\x0b\xe4\xdd\x0e\x11\xf5\xfc\x7f\xa7\x15\x34\xf5\xff\x65\x20\x09\x74\x62\x4b\x18\x5f\xa4\x15\x02\xe8\xe8\x85\x60\xc7\x33\x87\x0f\x47\xa4\x90\x7f\x84\x4f\x6e\x66\x59\x66\xae\x67\x89\x93\xef\x66\xbf\x7f\x84\xfb\xa6\x42\x18\xc0\x4d\x70\x80\x07\x43\xce\x01\x74\x8d\x6d\x81\x87\xb5\xfd\xb9\xdf\xfe\xca\x7c\x0f\xb1\x21\x50\x75\xbe\x0d\x34\x2c\xc6\x7a\x4b\x06\xab\x92\x15\x39\x70\x48\x0b\xb3\xb6\xb7\xa4\x4a\xe0\x52\x23\x7a\x73\x0a\x88\xad\xeb\x42\x9a\x94\xd9\xd2\xc3\x51\xe6\x00\xa8\x00\x4a\x93\x3d\x13\x4f\xa6\x83\x31\x9f\x1a\xe9\xdb\xe7\x1b\x2c\x2b\xec\x98\xee\xee\x6c\x08\xb3\x2c\xcb\x24\x6b\x4d\xea\xa0\x2d\xe6\xd8\x01\x76\x62\xe2\x06\xd0\x4d\xf6\xda\x3f\x47\x7b\x2d\x0d\x7a\x1e\x55\x11\xdb\xb5\x17\x19\x82\x62\x6b\x3c\x9f\x58\x11\x1c\x35\x8f\x6c\x05\x63\x76\xdd\xc4\xfd\xd2\x82\xb7\x64\xe8\xd4\x2c\xa4\x97\x5e\xe9\x02\xeb\x65\x0f\xb5\x00\xce\xdf\xea\xb6\x43\x46\x2a\x72\x3e\x15\x58\xff\x28\xb6\xd2\xe2\x31\xd8\x73\xf1\x52\x38\x05\x68\xa7\x14\x34\x71\x1f\x76\xda\xf0\xe9\xc1\x32\xa5\xfc\xda\xf7\x51\x59\xf3\xa7\x22\xca\xc2\x4b\x04\x5c\x4e\xa8\xe5\x64\x5a\x40\xa4\x18\x87\xe2\x73\x1e\xcf\x48\x3f\xb7\x81\x60\x6a\x0b\xeb\xfb\xa0\x60\xe9\xab\xff\x90\xde\x8d\xa4\xc9\xbf\x00\x00\x00\xff\xff\x2f\x75\x74\xf2\x40\x0a\x00\x00")

func templatesPartialsResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsResponsesGomd,
		"templates/partials/responses.gomd",
	)
}

func templatesPartialsResponsesGomd() (*asset, error) {
	bytes, err := templatesPartialsResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSchemaGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdd\x6e\xdb\x3a\x12\xbe\xcf\x53\x0c\x94\x14\xb0\x85\xca\xd9\xde\x06\x9b\x02\xc1\x6e\x8b\x2d\x90\x36\x5e\xa7\xdd\x9b\xa2\x58\x28\x36\x95\xf0\x1c\x9a\x72\xf4\x93\x26\x90\xf5\xee\x07\xa4\x44\x71\xf8\x23\x59\x4e\x9c\x16\xa7\x37\xb1\xc4\xd1\x70\x86\x33\xfc\xe6\x1b\xb2\x55\x15\xc1\x8a\x24\x94\x13\x08\xf2\xe5\x1d\x59\xc7\x41\x5d\x1f\x01\x00\x88\x91\x93\x8c\x24\x70\x76\x0e\xb3\x6b\x39\xb4\x20\xc9\x6c\x41\x12\xc0\x12\xcd\x47\x96\xd0\xff\x62\x56\x12\x43\x6c\x93\x91\x9c\xae\x68\xb9\x5e\x90\xe4\xdb\xe2\x52\xca\xcf\xad\x77\x58\x9e\xc7\x6b\x22\x85\xbe\x88\x1f\x68\xe4\x34\x84\x4f\x09\x14\x77\x34\x87\x76\x6a\x9a\x43\x0c\x19\x49\x48\x46\xf8\x92\x40\x78\x0a\x11\x92\xa7\x09\xf0\xb4\x68\x3c\xa9\xeb\x23\xf9\x1e\x8d\xc5\x7c\xd5\xf9\xd0\xfe\x9d\xfd\x9b\xe4\xcb\x8c\x6e\x0a\x9a\x72\xa8\x6b\x08\x43\xf4\xe2\x2c\x0c\xe1\x9f\x37\xd9\x7b\xa8\xaa\x3e\x79\x35\x4c\xf8\xca\x9a\x51\x4c\xa8\x3e\xfa\xfa\xb4\xe9\xfc\x1a\x61\x53\x2b\x0e\x61\x28\x7e\x09\x2b\x90\x01\x6a\x10\xcf\x1c\xd5\xb5\xd2\xa7\xc4\x16\x24\x5e\x5d\x71\xf6\xd4\xe8\x11\x4f\x20\x1e\xb5\x47\x51\xdf\x97\x5f\x4a\xc6\xe2\x1b\xd6\x5a\xa0\x9e\x3c\x1f\x1e\x59\xfe\x40\x41\xd6\x1b\x16\x17\x04\x82\x8c\xe4\x45\x46\x97\x62\x95\xf2\xa0\xf3\x0f\xad\x80\x57\x8d\xb9\x68\xf3\x2c\xdd\x90\xac\xa0\x24\x07\x7b\xae\x30\xd4\x83\x67\x61\x38\x60\xc8\xa6\x93\x0b\x60\x45\x97\x05\x04\x4d\xe2\x6a\xa3\x02\x2b\x33\x03\x37\x7f\x83\x45\x9a\x16\x22\x37\x83\x36\x57\x07\x7d\xa7\x9c\x51\x4e\xe6\xaf\x3e\xb1\x3f\xeb\xb0\xeb\x94\x17\xff\x2d\x63\x5e\xd0\x84\x92\xec\xa0\x76\x04\x3e\xa3\x54\x4c\xeb\xfa\xc8\x08\x2f\x86\x1d\x1c\x0f\x13\x7b\xee\x4b\x9a\x91\x15\xc2\x96\xd9\x42\xbd\xc3\x82\x65\xc6\x76\xe2\x49\xd6\x5a\x2b\x05\x95\xe9\x9d\x99\x5b\x90\x8f\x5b\x90\x3b\x69\x0b\x78\x47\x6f\x61\x81\x32\x17\xb6\xcd\x07\x91\xfc\x67\xfe\x89\x7c\x4f\xd1\xb6\x33\x22\x8b\xf9\x2d\x69\x16\xe8\xad\x58\x50\xe9\xf6\x13\x76\xcf\xcc\x6f\xbc\x31\x9c\xf4\x7d\x52\xb1\x9b\x77\xcf\x5a\x65\xf0\xb1\x64\xac\x37\x38\x38\x74\xdd\xba\x78\x42\x2e\xd6\x15\x43\xa9\x8a\x5e\x6f\x24\x69\x41\xd6\xf9\xbc\x27\x9c\x2f\x8f\xd2\xb8\x35\x94\xb5\xe7\xef\xbe\x92\xda\xb4\x67\xed\x08\x63\x5d\x94\x5b\xe3\xea\xeb\x49\xd2\x3a\x2c\x47\x95\xf7\x87\x8b\x64\x27\xf1\x20\x39\xc2\xd9\xb9\xb6\xd6\x43\x1b\x8a\x3b\xb2\x68\x28\x88\x96\x42\x0c\x64\x2b\xab\x60\x67\x71\xd4\xbd\x36\x6a\xe9\x44\x12\x80\x46\xd5\x14\x26\xe4\xbe\x9d\xbc\xa9\x9b\x41\x7a\xf3\x07\x59\x16\xc1\x54\xbd\x45\xa9\x13\xa1\xdc\xf9\x5e\x55\x72\xd5\xea\xfa\xc7\xa4\xaa\x82\xaa\xca\x69\x41\x66\x37\x71\x4e\xca\x8c\xd5\x75\x50\xd7\x55\x75\x22\x7f\x9e\x2e\xd3\xf5\x26\xe5\x84\x17\xf9\x69\x03\xa8\xf9\xe9\xb1\x99\x7a\x99\x27\x6f\xea\x3a\xaa\x2a\x60\xe9\x4f\x92\x75\x28\x3a\xd5\x29\xc3\x72\xd2\x9f\xca\xcd\x34\xc2\x9f\xc1\x64\x7e\x69\xee\x22\x92\x32\xa1\xfc\xba\xc8\x28\xbf\xbd\x66\x74\x49\x50\x6e\x4a\xed\xd3\x8e\x8e\x08\xa2\xd1\x8c\x48\xce\xa2\xf3\xdd\xd2\xd7\x2e\x3e\xe6\x28\xdd\xf7\x9a\xa8\xec\x56\x80\xa9\x4a\xab\x00\xf1\x15\xfb\x7b\xfb\x79\xab\x08\x47\xa3\xcc\x62\x76\xa2\x96\xa6\xff\xf9\xfa\xf9\xf2\x0b\xf9\x79\x49\x39\xc9\xfb\xe5\x1c\xa5\xbd\x44\xe8\xa1\x4d\x7a\x70\x0b\x85\x40\x38\x99\xfb\x4e\x62\x5a\xee\x9f\x24\x5c\xc8\xc9\xf2\x9e\x40\xf0\x26\x87\xf7\xf0\x26\x57\x91\x3e\xe1\xcf\xc3\x40\x03\xfc\x12\xae\xd3\xe7\xc5\xb8\xe7\x86\xed\x93\x28\x1d\xfd\x66\x3a\x95\xc5\xe2\x2d\x58\x49\x8f\x1d\x5e\x9b\x6d\xe3\x06\xab\x9b\x43\xe2\x74\x61\x1a\x8b\xcd\x23\xc0\xf3\x30\x55\x70\x20\x57\x54\x4f\x87\x70\xd4\x05\x65\x8d\xc5\xbe\x8e\x69\xa2\x5a\xaa\xfd\xe0\xd4\x6a\x77\x8e\x8f\xa5\xbb\x1c\x55\x86\x6e\xae\x33\x78\x26\x62\x82\xdd\x52\x39\x28\x69\x26\xcf\x82\x24\xfd\x10\xe9\xcf\xa4\x9e\x9e\xc5\x7e\xfe\x2d\xd1\x42\x7e\xab\x58\xa5\x99\x0a\xc5\x05\x63\x57\xdd\x8e\xbb\xe0\x4f\xfa\xe1\x8a\x93\x2b\x11\x4c\x1d\xd7\x5f\x14\x2b\x3b\x58\x87\xc4\xde\xa1\x16\x70\x47\x1f\xd4\xac\xec\x3e\x48\x62\xb7\x3f\x68\xde\x16\x58\xec\xfc\x18\x20\x7f\xb6\x75\x08\x1c\x9c\xf3\x16\x34\xb6\xd7\x21\x4b\x2f\x07\xdc\x49\xde\x70\x47\x2e\x13\x47\x0d\x85\xe1\x15\x27\x70\x95\x88\xfe\xdb\x59\xf3\xfb\xbe\xe5\xd6\xa7\x01\xad\xb6\x3d\xbb\xcf\xc1\x10\x58\x1d\xb1\x69\x7c\xb3\x1f\x3a\xe3\x2f\x18\x7b\x89\xf1\x8d\xb6\x5f\x67\xbc\xdc\xbf\xda\x78\xfe\xf4\x22\xe3\xa5\xb6\xd7\x31\xbe\x37\xd1\xef\xad\x1c\x3f\x48\x91\x1c\xcc\xee\xe7\x76\xf8\x23\x5b\x7b\xba\x7a\xf4\x23\xbc\x8b\xeb\x0d\x9b\xf8\x57\x5a\xf2\x42\xc8\xbd\xeb\xc5\xf6\x9e\xf6\x08\x46\xb6\x48\xf0\x5a\xfd\x90\xfa\xf7\xfd\x93\xf4\x04\x1a\x47\xa1\xaa\xb0\x6b\x07\x69\x96\x7c\x19\x27\xcb\x09\xaa\x26\x75\x1d\x35\xd3\x46\x8d\x92\xc8\xb6\x63\xea\x18\xee\x84\xe1\x1c\xf2\x72\x6d\xbe\x7a\xe7\x3b\xa2\xb5\x5b\x31\x3c\xf6\x5b\x5a\x32\xbb\xb2\xe8\xb8\xbf\x42\x37\x03\xcf\xe9\x68\xfa\x38\xd1\x01\x37\xcc\x6f\xa5\xb5\x16\x57\x3a\x06\x7b\x53\x98\xf6\x3f\x9f\x41\xed\x93\xf2\x07\xa2\xc2\xbb\x32\x71\x24\x1d\x76\xaa\xc0\x69\x08\x7a\x8f\xc0\x57\x65\x5a\x7b\x7f\xe3\x5e\x4c\x35\x5b\xc9\x77\x3b\x35\xf7\xe0\x9e\x7d\x39\x35\xef\x3f\x64\xea\x3f\x0b\xdb\x7d\x8a\x35\xe2\x2c\x4c\x6c\x40\xdf\xed\x53\x63\xdc\x25\xe5\x7f\x9a\xe3\x1d\xc4\xe8\x62\x6f\xaf\x31\x4d\x40\xe4\x27\xbe\xfe\x09\xe2\x2c\x8b\x9f\x02\x07\x17\xbe\xef\x81\x4a\xad\xbe\xb6\x8d\x7e\x01\x32\xfd\x38\x72\xf0\xd2\x67\x72\xbb\xa7\xbc\x58\xe6\x21\xd2\x5a\x93\xdc\xa7\x58\x95\xc7\xeb\x5f\x70\x58\x67\x6c\xc6\xa9\x6b\xa9\xcf\x2d\xeb\xca\xce\xba\x68\xfb\x98\x66\xeb\x58\xe0\x03\x4c\xaa\xca\x7c\x59\xd7\x53\xa8\x2a\xc2\x57\x9e\xfd\x66\x6e\x37\xb4\xd9\xda\x9f\xa7\x21\x7c\xe0\x2b\x48\x93\xa1\x1d\xa7\x24\x31\x9a\xeb\x55\xf0\x6c\x4b\x13\xf6\x23\x3d\xd7\x82\xf0\x15\xc9\x20\x66\xcc\x54\xe6\x5e\xcd\xce\x3e\x97\xac\xa0\x1b\xd6\x34\x11\x10\x86\xea\x19\xd2\x24\x0c\xcf\x04\x66\x59\x22\xce\x8d\xa3\xa1\x2d\x7e\x6c\xd5\xc4\x8f\x74\x5d\xae\x3b\x15\xcd\xfb\xc1\x6f\x3f\x3c\x2e\x59\x99\xd3\x07\xd2\x29\xe9\xde\xc0\x5a\xab\x2b\xb2\x92\xec\x30\x82\xb6\xd7\xc6\x9f\x29\x37\x8c\xa0\x7c\x0f\x23\x94\x12\x64\x84\x56\x37\xc2\x88\xf8\xf1\x92\xf0\xdb\xe2\xce\x58\x0f\x60\xf2\x1d\x5a\x16\x2d\xb4\xcb\x27\x43\x5d\x63\x8a\xad\x0e\x0b\x0d\xaa\x9b\xc7\x45\x41\xb2\xd6\xc3\xf6\x41\x69\x41\x63\xbb\x3c\x54\x87\x86\xc8\x41\x79\x50\x88\xfc\xeb\x44\x76\xb9\x87\x75\xb5\xde\x99\xba\x90\xc8\xa0\xae\x6f\x9c\xde\x97\x04\xa9\x43\x2f\x46\xc7\x4e\x80\xb2\xe5\x99\xbe\x26\x45\xee\x75\x72\xbb\xdc\xc3\x0a\x5b\xf7\x3c\x0a\x91\xdc\xa0\xc2\x8b\xd5\x8a\x8a\x2d\x1d\x33\x4d\x83\x2e\x98\x80\xc3\x55\x33\x87\x16\x40\xd3\x08\x40\x10\x22\xa3\x56\xe1\xb6\x80\x09\x23\x1c\x66\x1f\x78\xb9\x9e\xc2\x3f\x0c\x88\x0f\x43\xf1\x36\x0c\xcf\x84\x06\x03\x0d\x0d\x5e\xa9\x69\x9f\x10\xf7\x97\x19\x29\x53\xd7\x8e\xa2\x31\x34\xc6\x84\x56\x2f\x6e\x5a\xd8\xda\x22\xa3\x28\x23\x20\x0b\x9c\x0f\x56\xbb\x72\x63\xad\xba\x73\xeb\x91\x91\x0d\x8b\x97\x04\x26\x4d\x21\x9a\x4d\x21\xf8\x7f\x00\x41\x14\x8c\xb5\xbc\xcf\x1c\x35\x2e\x22\x17\x0b\x87\xae\xc7\x11\x35\x8f\xbc\x9f\xb1\x0d\x10\x35\x93\xa1\x57\x95\xbe\xd5\x38\x7e\x08\xc0\xa5\x6f\x88\x5e\xed\x60\x57\xe3\xc9\x55\x57\xa5\x69\xc1\x5c\x72\x61\xd4\x71\x47\xa2\x9b\xc1\xf7\xd9\x1e\xc4\x0d\x5c\xf2\xe6\x5d\x5e\x93\xb5\x19\xe4\xcb\x76\x78\x27\x6d\x02\xbb\x4d\x60\x34\x37\x4f\x22\x3d\x6b\x06\x23\xda\xe2\xc3\xd2\x1e\x70\xa9\x8f\xe7\xd5\xb8\x5d\x3b\x26\xc5\x8d\x1c\xb7\x97\xc4\x4d\xe3\x5c\xe6\x71\x73\x1c\x88\x37\xe2\x49\x2a\x6f\xf3\x02\x39\x12\xd8\x90\x8a\x8f\xf3\x1c\x85\xe7\x4a\xc0\xce\x34\xa1\x53\xa8\x14\x83\x81\x2f\xc9\xcd\x13\x5a\x9f\xe2\x46\xa0\x47\xb1\x1c\xf4\xe3\x49\x7b\xf0\x28\x7a\xdb\x74\x03\x75\xad\xfe\x6b\x9c\x03\xc3\x7a\x73\x77\xd3\x46\x82\x80\x8f\x4d\x6d\x21\xfd\xb6\x53\xed\x0b\xe9\x5f\x01\x00\x00\xff\xff\xe5\xa3\xa7\x38\xc6\x28\x00\x00")

func templatesPartialsSchemaGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSchemaGomd,
		"templates/partials/schema.gomd",
	)
}

func templatesPartialsSchemaGomd() (*asset, error) {
	bytes, err := templatesPartialsSchemaGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/schema.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSecurityGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbf\x4e\xc3\x40\x0c\xc6\xf7\x3c\xc5\xa7\xb4\x03\x44\xbd\x86\x19\x89\x81\x81\x0d\xb1\x94\x17\x38\x25\x4e\x39\xd4\x38\x55\xe3\x4a\xa0\xe4\xde\x1d\xf9\x9a\xff\x04\x09\x0f\x51\xe2\x9f\xed\xf8\xfb\xdc\x34\x06\x69\x82\x03\x65\xd7\x8b\x93\x6f\xbc\x53\x79\x3e\x59\x21\x24\x29\x8c\xf7\x91\xf2\x9c\x0a\xc7\x84\xb8\xee\x8a\xe2\x81\x5c\x2c\x1f\x09\x5b\xb6\x25\xed\xb0\xad\xb3\xea\x4c\x35\x1e\x9f\xb0\x87\xf7\x51\x8b\xa6\xb9\x31\x78\x8f\xf0\xf5\x59\x39\x1e\xea\xe2\x1d\xe2\x40\xc2\x28\xe2\xbc\x1b\x3a\xbe\xa5\x09\x5e\x38\x47\x55\xfc\xbd\x5f\xb4\x10\xf0\xea\x6a\x59\x11\xf1\x4b\x83\xd6\xe9\xdf\x23\x00\xd0\x19\xae\xb8\x6d\x8d\x2e\xba\xdc\x51\x70\x77\x22\xc6\xfe\x1e\x0f\x8a\x07\xae\xb1\xd9\xe0\xf9\x2a\x1f\xc4\xe2\x32\x2b\xae\xe2\x39\x6e\xdf\x6c\x49\xed\x21\xa8\x6d\xe7\xc4\x18\x63\xc2\xc3\x98\x39\x99\xb8\xea\x38\xa7\x2f\xb5\xb5\xd7\xde\x1b\x8b\x45\x68\x8f\xf4\x92\x27\x57\x1a\x3b\x17\x4d\xa3\xcb\xeb\x99\xff\xdf\x63\xcd\xee\x9f\x00\x00\x00\xff\xff\x45\xb9\xf2\x04\x53\x02\x00\x00")

func templatesPartialsSecurityGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSecurityGomd,
		"templates/partials/security.gomd",
	)
}

func templatesPartialsSecurityGomd() (*asset, error) {
	bytes, err := templatesPartialsSecurityGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/security.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\xcc\x3e\x39\x80\x67\x10\x91\x88\x07\x08\xed\x14\x03\x8d\x96\xe6\xb9\x0a\xbd\xbb\x04\xb2\x90\x2e\xe7\x5b\xfc\xe3\xbd\x77\x96\x6d\xd5\x05\xad\x21\xdc\x52\x11\x8e\xc3\x75\x76\xad\xc1\x54\xb6\x35\x99\xc0\x5d\x75\xfb\xbc\xab\x1e\xd3\x4b\x25\x11\x73\x9e\x0c\x8c\x43\xa3\x16\x22\xfc\x2d\xb0\xa7\x38\x8a\xbc\xef\xaa\x79\xce\xdf\x12\xb5\x3c\xe3\x95\x08\x27\xe9\xa7\xbf\x00\x00\x00\xff\xff\x56\x01\xc5\xa0\x8c\x00\x00\x00")

func templatesResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesResponsesGomd,
		"templates/responses.gomd",
	)
}

func templatesResponsesGomd() (*asset, error) {
	bytes, err := templatesResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemasGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x09\x73\x55\x57\x2b\x94\xa4\xe6\x16\xe4\x24\x96\xa4\x2a\x28\x15\x27\x67\xa4\xe6\x26\x2a\x29\xa4\x64\x26\x97\x28\x28\x05\x83\x79\x41\xa9\x69\x4a\x0a\x7a\x70\xb6\x82\x12\x48\xbb\x12\xd4\x14\xa5\x80\xa2\xd4\xe2\xcc\x94\xcc\xd2\xdc\xa0\xd4\xb4\xd0\x20\x1f\x25\x05\x3d\x34\x11\x90\x45\x80\x00\x00\x00\xff\xff\xf5\x76\x34\x32\x80\x00\x00\x00")

func templatesSchemasGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemasGomd,
		"templates/schemas.gomd",
	)
}

func templatesSchemasGomd() (*asset, error) {
	bytes, err := templatesSchemasGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTagGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\x28\xc9\x77\x4e\xcc\x4d\xcd\x51\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x49\x73\x55\x57\x2b\xe8\xb9\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x81\xc4\xb9\xaa\xab\x75\x15\x32\xd3\x14\xf4\x5c\x2b\x4a\x52\x8b\xf2\x12\x73\x5c\xf2\x93\x8b\x41\x12\x0a\x0a\x0a\x0a\xd8\xe4\x30\x0c\x50\x80\x82\x68\x90\xe9\x78\x54\xc6\x6a\x60\x28\x08\x0d\xf2\x51\xa8\xad\xd5\x84\xdb\x95\x9a\x53\x9c\x0a\xb3\x1b\x04\x6c\x70\xe8\xb0\x43\xe8\xc8\x4b\x01\x69\x40\x30\x01\x01\x00\x00\xff\xff\xd8\x77\x01\x1a\x07\x01\x00\x00")

func templatesTagGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesTagGomd,
		"templates/tag.gomd",
	)
}

func templatesTagGomd() (*asset, error) {
	bytes, err := templatesTagGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tag.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.gomd":                 templatesIndexGomd,
	"templates/info.gomd":                  templatesInfoGomd,
	"templates/operation.gomd":             templatesOperationGomd,
	"templates/partials/content.gomd":      templatesPartialsContentGomd,
	"templates/partials/headers.gomd":      templatesPartialsHeadersGomd,
	"templates/partials/parameters.gomd":   templatesPartialsParametersGomd,
	"templates/partials/request_body.gomd": templatesPartialsRequest_bodyGomd,
	"templates/partials/responses.gomd":    templatesPartialsResponsesGomd,
	"templates/partials/schema.gomd":       templatesPartialsSchemaGomd,
	"templates/partials/security.gomd":     templatesPartialsSecurityGomd,
	"templates/responses.gomd":             templatesResponsesGomd,
	"templates/schemas.gomd":               templatesSchemasGomd,
	"templates/tag.gomd":                   templatesTagGomd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.gomd":     &bintree{templatesIndexGomd, map[string]*bintree{}},
		"info.gomd":      &bintree{templatesInfoGomd, map[string]*bintree{}},
		"operation.gomd": &bintree{templatesOperationGomd, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"content.gomd":      &bintree{templatesPartialsContentGomd, map[string]*bintree{}},
			"headers.gomd":      &bintree{templatesPartialsHeadersGomd, map[string]*bintree{}},
			"parameters.gomd":   &bintree{templatesPartialsParametersGomd, map[string]*bintree{}},
			"request_body.gomd": &bintree{templatesPartialsRequest_bodyGomd, map[string]*bintree{}},
			"responses.gomd":    &bintree{templatesPartialsResponsesGomd, map[string]*bintree{}},
			"schema.gomd":       &bintree{templatesPartialsSchemaGomd, map[string]*bintree{}},
			"security.gomd":     &bintree{templatesPartialsSecurityGomd, map[string]*bintree{}},
		}},
		"responses.gomd": &bintree{templatesResponsesGomd, map[string]*bintree{}},
		"schemas.gomd":   &bintree{templatesSchemasGomd, map[string]*bintree{}},
		"tag.gomd":       &bintree{templatesTagGomd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
