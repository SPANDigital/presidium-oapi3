// Code generated for package tpl by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/index.gomd
// templates/info.gomd
// templates/operation.gomd
// templates/partials/content.gomd
// templates/partials/headers.gomd
// templates/partials/parameters.gomd
// templates/partials/request_body.gomd
// templates/partials/responses.gomd
// templates/partials/schema.gomd
// templates/partials/security.gomd
// templates/responses.gomd
// templates/schemas.gomd
// templates/tag.gomd
package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\x0b\x01\x31\x15\x6a\x6b\xb9\x40\xe2\x80\x00\x00\x00\xff\xff\xff\xd8\xd2\xd8\x1c\x00\x00\x00")

func templatesIndexGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexGomd,
		"templates/index.gomd",
	)
}

func templatesIndexGomd() (*asset, error) {
	bytes, err := templatesIndexGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInfoGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x3b\xab\x83\x30\x14\xc7\xf7\x7c\x8a\x03\xd9\x02\x09\xdc\x55\xc4\xe5\xde\xbb\x49\x0b\x56\xbb\x8b\x8d\x6d\xc0\x47\x89\xc1\x0e\xe2\x77\x2f\x27\x49\x7d\xa4\x1d\xea\x74\xfe\x8f\xf3\x3b\x12\xce\x39\x31\xca\x34\x32\x82\x69\x02\x91\xe3\x08\xf3\x4c\x1e\x52\x5d\x6f\x26\x82\x1f\x82\x0d\x42\x29\xdd\xe5\x30\x0a\x94\x67\xa9\x07\xd5\x77\xb8\x40\x50\xff\xc9\xa1\xd2\xea\x6e\x56\x8f\x83\xaa\x41\xe4\x52\xb7\xc3\xb1\x3e\x49\x3d\xaa\xca\xf2\x09\x00\x00\xa5\x60\x13\xe8\x6b\xf0\x59\xe4\x92\xd8\x1e\x0b\xb7\x12\x47\x94\xdd\x05\x11\x2f\xf8\x6f\xdf\x99\xb2\x32\x5b\xaa\xb7\x9c\x0e\x7a\xe2\x50\xb6\xf6\x17\xc0\x7f\x8c\xa1\xc3\x98\x7b\x81\xb0\xb5\x20\xfc\xd5\x4f\xc4\xff\xb6\x54\xcd\x1e\x69\xad\x90\xb9\xf4\xbe\x81\x16\x59\xba\x47\x16\x59\x8a\xc0\x78\x4b\x74\xa5\xe4\x0d\xb8\x8e\xcf\x00\x00\x00\xff\xff\x83\x10\xc4\x02\xe1\x01\x00\x00")

func templatesInfoGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesInfoGomd,
		"templates/info.gomd",
	)
}

func templatesInfoGomd() (*asset, error) {
	bytes, err := templatesInfoGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/info.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOperationGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcb\x6a\xc4\x30\x0c\x45\xf7\xf9\x0a\x91\x65\xc0\xf9\x80\x2e\xba\x28\xd9\x14\xfa\x62\xa6\xd0\x6d\x4c\xe6\xb6\x63\xc8\xc3\xb5\x15\x4a\x10\xfe\xf7\xa2\x4c\xd2\x94\x36\xb3\xf3\x91\x8e\xae\x84\x8d\x31\x99\x88\x21\xf7\x4e\xe5\x23\xf8\x3c\x9c\x5e\x1d\xb7\xa0\x94\x32\xd6\xc7\x0d\x89\xac\x1d\x4a\x69\xa6\x27\xdb\xcd\x82\x08\xa1\x8d\x7f\xdd\x67\x8f\x60\xd9\x0d\xfd\x7d\x75\x91\x0c\xa1\xd7\xd9\xec\x0b\xee\xe3\xcc\x17\xeb\x6d\x7e\x6b\x55\x2f\xc8\xea\xba\xce\xae\x2f\xd2\xae\xb6\xf5\xc8\x0a\x3e\xa0\xb1\x0c\xb5\x8a\x62\xc3\xa2\xf8\xb5\x6a\xb5\x8f\x63\xd7\xd9\x30\x69\xe0\xad\xc8\x8a\x73\xfc\x3f\xb7\x42\x6c\x82\xf3\x7a\x3a\xa5\x24\x42\x3b\xa5\x6d\xc4\x10\xa3\xf3\xad\x65\x50\xee\x6d\xb0\x1d\x18\x21\x3e\xb8\xc8\x39\x95\x2f\x3f\x85\xf5\x0b\x36\x39\xe0\x73\x44\xe4\xbb\xe1\x34\xe5\x54\x1e\x36\xda\x53\xa3\x1f\xfa\x88\x25\xf5\xb0\xe0\x4e\x68\x44\x33\x06\xc7\xd3\x62\x1e\x17\xa4\x94\xbe\x03\x00\x00\xff\xff\x7a\xb2\x89\xd0\xe1\x01\x00\x00")

func templatesOperationGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesOperationGomd,
		"templates/operation.gomd",
	)
}

func templatesOperationGomd() (*asset, error) {
	bytes, err := templatesOperationGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/operation.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsContentGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3d\x6f\x83\x30\x10\x86\x77\x7e\xc5\x2b\x8b\xc9\x6a\x60\x8f\xd4\xa9\x1f\x53\xdb\x54\x34\xdd\xe3\xe2\xa3\xb1\x54\x1b\x0a\xce\x10\x59\xfe\xef\x15\x04\xb0\x4b\x52\xa9\x0a\x0b\xc8\xf7\x9c\x79\xef\x39\xe7\x56\xc8\x39\xee\x6a\x63\xc9\x58\x58\xd2\xcd\x97\xb0\x04\x9e\x63\xe5\x7d\xd2\x97\x25\x55\xca\x10\x58\x79\x62\x98\xf7\x09\x00\xf4\xa5\xb4\x69\xa9\x53\x52\x1d\x74\x41\xd5\x7b\xf1\x84\xf5\x2d\xb2\xd7\xc5\x59\xc4\xb7\xc2\x7c\x12\x52\x23\x34\xdd\x20\xd5\x24\x95\xd8\x1e\x1b\x1a\xda\xa6\x08\x23\xde\x3f\x9c\x3f\xd6\xad\x16\x76\xcd\x39\x76\xce\x0d\x7d\xde\xef\x92\x19\x70\x2e\x24\x66\xf3\x75\x0c\x52\x95\x16\xec\x39\x1c\x44\xff\x62\x8b\x7c\xec\x7c\x0a\xf6\x22\x74\xdf\x94\xf5\xef\x38\x3f\x19\x39\x4a\x09\x5f\x39\xc7\x83\x91\xa8\xab\x3f\x25\x4e\x58\x41\x46\x52\xdb\x41\x60\x4e\x16\x7b\xce\x39\xb6\x9b\xfb\xcd\x88\xc1\xee\x09\x43\x6a\x2c\xc1\x69\x21\x61\xe0\x2b\x56\x32\x37\xa8\x0a\xd9\x9c\x27\x7b\x2b\xf7\xa4\x45\xbc\x84\x5f\x8e\xbb\xa1\x3c\x09\x3e\xc1\x05\x55\xec\xc2\x15\xff\xf7\x7c\x49\x33\x82\x67\x9c\x89\x6e\xe9\xfb\x40\x9d\xc5\x47\x2d\x8f\xa3\x98\x9f\x00\x00\x00\xff\xff\xc5\x1a\x74\x85\xc8\x02\x00\x00")

func templatesPartialsContentGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsContentGomd,
		"templates/partials/content.gomd",
	)
}

func templatesPartialsContentGomd() (*asset, error) {
	bytes, err := templatesPartialsContentGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/content.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsHeadersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x3d\x4f\xc3\x30\x14\xdc\xfb\x2b\x4e\x51\x07\xb0\x68\xca\x8c\xc4\x56\x24\x06\xa6\x52\xb1\x5b\xf1\xb9\xb5\x94\x38\xc1\x75\x07\xe4\xe4\xbf\xa3\x7c\x34\xb2\x1b\x3a\x90\xe9\xe9\xde\xdd\x29\xef\xce\x21\x6c\xb0\x15\x78\xa7\x54\x74\x38\xb0\x6a\x4a\xe9\x09\xb1\xc5\xa6\xeb\x56\x21\x28\x6a\x63\x89\xec\x34\x10\xb2\x01\x05\x80\x5e\xb7\x1e\x41\xbc\xbc\x22\xff\x92\xe5\x85\x88\x97\x8e\x7a\xd8\xec\xa9\x63\xdc\xe8\x59\x37\xa1\xcb\x4d\xbe\xe7\xf7\xc5\x38\xaa\x98\x22\xdc\x04\x8a\x48\x45\xab\x12\x97\xd8\x64\xc7\xc6\xb1\x90\xfe\xc6\x46\xcd\xf0\xc2\x08\x2d\x42\xf0\xd7\x0c\xb2\xba\xa1\x93\xde\xd4\xf6\xb3\x38\xb1\x92\x87\x9f\x86\xd9\xec\x3e\x62\x18\x44\x22\x4a\x23\xdf\xf1\x5c\x38\xd3\xf4\xba\x3e\x2d\x81\x76\xbe\x9d\x76\xf8\x95\x69\x9c\xa6\xad\xc0\x9b\x55\xa8\xf5\xbd\x12\x56\x49\x47\x1f\xe6\xec\xe1\x17\x3d\x21\x2d\xaa\x67\xa5\x65\x19\x8d\xa3\xc7\x43\x49\x8b\xfc\x11\xcf\xb7\xe1\x3b\x69\x8f\xc4\xda\xca\x8a\x4f\x49\xb1\x11\xaf\xff\x5a\x08\x11\xc2\x48\x44\xd7\x09\x91\x24\x76\x7d\x25\x77\x1a\x9e\xee\xff\x57\x1c\x7f\xde\xfb\x1b\x00\x00\xff\xff\x1b\x02\x9f\x55\xb6\x02\x00\x00")

func templatesPartialsHeadersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsHeadersGomd,
		"templates/partials/headers.gomd",
	)
}

func templatesPartialsHeadersGomd() (*asset, error) {
	bytes, err := templatesPartialsHeadersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/headers.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsParametersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x06\x8a\x0f\x09\x51\xcb\x3d\x17\xe8\xad\x2d\x60\xc0\x28\xda\xb4\xe8\x9d\x95\x56\x31\x11\x89\x52\x48\xba\x6d\x20\xf1\xdf\x0b\x52\x94\x44\xfa\x91\x84\x07\x5b\xe4\x70\xf6\x31\xbb\xdc\xbe\xdf\x60\xcb\x60\x0e\x42\xc3\x50\xd3\xd5\xdc\x10\x14\x15\x24\xfe\x90\x06\xc7\x37\xae\x78\x43\x86\xd4\x3d\x55\xf8\x7b\x10\xc5\x01\x45\x2b\x0d\x17\xd2\xa1\xee\x90\xcb\x32\xbe\x07\xb6\xc5\xc6\xda\x95\x33\x5c\x52\x25\x24\x21\xeb\x26\x30\x83\xb5\x2b\x00\x70\xe8\x7a\x3e\xc6\x87\x8f\xc8\x7f\xf1\xfa\x48\x09\xae\xa8\xf2\x88\xf3\x12\x9d\x8b\x2a\xa6\x06\xc0\xad\x01\x8c\xf5\x7d\x04\xe6\x5f\x79\xe3\x4c\x32\x76\x01\xdb\xc9\x11\xe9\xfb\xd4\x62\x7e\x4f\x4f\x47\xa1\xa8\x84\xb5\x60\x2a\x6c\xdc\x3d\x92\xa5\xb5\xe7\xf7\x3f\x51\xa7\xa8\xe0\x66\x64\x80\x95\xf3\x7e\x21\x0d\x3e\xf2\x59\xe0\x45\x91\x9f\xcf\x1d\x65\xb1\xb5\x1f\xc5\x81\x1a\x8e\xc0\xc1\x6f\x45\xfc\x71\xef\x54\x4c\x3c\xea\x42\x89\xce\x88\x56\xba\x7b\xb3\x32\x24\x5d\x08\xab\xf0\x19\xbe\xb6\x0c\x9f\x65\x89\xb6\x42\x77\x5a\xa3\xd5\xb5\xea\x0b\x1a\xab\x1f\x82\xa9\x5a\x05\x7e\x4e\xbf\x58\xe2\x31\xa1\x37\x94\x71\xad\x47\xe3\x49\xed\x93\x22\xab\x85\x30\x1d\x8f\x9c\xbd\x90\x8f\x09\xec\x33\xae\x35\x79\x9a\x9e\x14\x4c\x98\xa2\x02\x3d\x4d\x60\xee\xa2\x44\xc6\x95\xe2\xcf\x99\xcf\x05\xd1\x7a\xb9\x54\xc1\xc2\xce\x50\xa3\x13\x6a\x1c\x84\x6c\x4d\xea\xeb\xdc\x47\xe4\xa2\x16\xda\x7c\x3f\x72\x69\x44\x25\x48\xe9\xec\x5a\x0e\xde\xfa\x85\x60\x13\x4f\xbe\x45\x37\x91\x12\xf9\x97\x56\x35\xdc\x38\xe0\xb6\xef\xd3\x43\x6b\xef\xa6\x1e\x4d\x3d\x8d\x9d\x74\xb9\xb1\xb0\x74\x16\x12\x75\x5e\xed\xab\x69\xaa\xec\x85\x36\xae\x23\x93\xe9\xf2\x52\x57\x69\xc7\xc8\x4e\xa6\xc0\x83\xc1\x6d\x4d\x12\xf9\x1d\xde\xcf\xcd\xe3\xd6\xcd\x0d\xdc\x23\x26\x6d\x16\x0f\x7a\x15\xcd\x09\x3f\x17\x06\xec\x24\x06\xf8\xc0\x07\x44\x6f\x2a\xbc\x28\x7f\x75\xe3\xd7\x30\xff\xcc\x7f\x61\x0d\x89\x6c\x8a\xcb\x07\xc2\x5a\xc8\x92\xfe\xbd\x3b\x1d\x70\x6f\xeb\xb2\xec\xca\x70\x8b\xb4\x0f\x1a\x2c\xa5\x38\x29\x4a\x78\xee\x4b\xea\xa3\xde\x41\xdf\xff\x01\x00\x00\xff\xff\xcb\x87\x72\x8a\xf2\x05\x00\x00")

func templatesPartialsParametersGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsParametersGomd,
		"templates/partials/parameters.gomd",
	)
}

func templatesPartialsParametersGomd() (*asset, error) {
	bytes, err := templatesPartialsParametersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/parameters.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsRequest_bodyGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x4d\x6f\xab\x30\x10\xbc\xf3\x2b\x46\x24\x27\xf4\x20\xf7\x48\xb9\xbc\x8f\xdb\x6b\x0f\xb4\xea\xdd\x81\x25\x58\x0d\x86\x1a\xa7\x55\x64\xfc\xdf\x2b\xf3\x55\xdb\xa5\x3e\x79\x77\x66\xd6\x5e\xcf\x5a\xeb\x14\x87\x04\xaa\xe6\x3d\x14\x35\xdd\x95\x29\x82\xa4\x82\xf8\x3b\xf5\x60\xc8\xe9\x72\xa3\x5e\xfd\x6e\xcb\x7b\x4e\x15\x3e\x6a\x5e\xd4\x28\x5a\xa1\x18\x17\x13\x5e\x81\x89\x12\x0c\x2f\xec\x7a\x23\x24\x07\xa4\xc6\x44\xb6\x6c\x49\x15\x17\x84\x58\xd2\xdb\x52\x22\x36\x26\x02\x00\x0b\xf3\x0a\x19\x9c\x78\xef\xf0\x70\x3c\x21\x1b\x0b\xfa\x84\x6a\x04\x72\xaa\xe6\xb4\x53\xcb\x93\x3b\xb0\x5d\xbb\x1d\xf2\x09\x85\x85\x23\x0f\xd4\x3a\x94\x67\x96\xcc\x25\x95\x30\x26\x49\x96\x20\x49\xb4\xa6\x6b\x4f\x36\xf7\xd8\x2a\x78\x79\x51\x1a\xe3\x97\x1d\xf0\x40\x25\x67\xcf\xf7\x8e\x30\xe0\x2f\xf5\x85\xe4\x9d\xe2\xad\xc0\x80\xa7\xa2\xa6\x86\x61\xf0\x05\xe9\xd7\x72\xf7\x4e\x34\x04\x17\x4f\x21\x99\xb8\x10\xf6\x82\x35\xf4\x0b\xfb\x66\x3d\xf1\x78\xf2\x3b\xfa\xd3\x0a\x45\x42\x85\x0f\xe3\xbe\xdf\x2a\xce\xe6\xeb\x6d\x70\x57\x2b\xfa\x91\x92\x4f\x86\x7c\x93\x06\x0e\xfd\xa0\xde\x96\xba\xae\x87\x6b\x80\xd6\x63\xaf\xc6\x8c\x7b\x9c\x25\xb1\xd7\xff\x76\xca\xbc\x6e\xdd\xd7\x5e\xa8\xeb\x70\xc7\x6d\x47\x92\x59\x6c\x3a\xd1\x1e\x1e\x6f\xb6\x1f\x18\xb4\x5c\x7f\x32\x7b\x3b\x1b\x05\x29\x77\xc0\xe7\x30\xd8\x1e\x12\xfc\x13\x25\xda\x0a\x73\x07\x38\xdb\x09\x9e\xff\xd1\x67\x00\x00\x00\xff\xff\xc3\xef\x05\xfd\x9f\x03\x00\x00")

func templatesPartialsRequest_bodyGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsRequest_bodyGomd,
		"templates/partials/request_body.gomd",
	)
}

func templatesPartialsRequest_bodyGomd() (*asset, error) {
	bytes, err := templatesPartialsRequest_bodyGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/request_body.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\x9c\x3c\x10\xbe\xf3\x2b\x46\x66\x0f\xef\x1b\x65\x49\xcf\x95\xda\xcb\xb6\x52\x0e\xdb\x28\x22\xdb\x5e\x2b\x77\x19\x12\x94\xc5\x20\xec\x3d\x54\xc0\x7f\xaf\xfc\x81\x6d\x8c\xbb\x45\xdd\x94\x13\xb6\x9f\xb1\xe7\xe3\x99\x67\xfa\x7e\x0b\x77\x37\x90\x23\x6f\x1b\xc6\x11\x04\xd6\xed\x89\x0a\x84\x9b\x3b\xd8\x8e\x63\x22\xcf\x0b\x2c\x2b\x86\x40\x3a\x03\x22\x30\x8e\x09\x00\x80\x3c\xdc\x74\x58\xc2\xfb\x0f\x90\x4d\x57\x64\x39\x96\x01\xc0\xdc\x3d\x43\x7d\xa3\xa7\x33\xce\x70\x5c\x50\x71\xe6\x0a\xf5\xa4\x7f\xbd\xd3\xaa\x04\xca\x0a\xfd\x9a\xbd\x31\xdb\x35\x4c\x20\x13\x06\x37\x61\x3b\xca\x9e\x11\x36\x8c\xd6\x78\x0b\x9b\x1a\x8b\x8a\x1e\x7e\xb6\xea\xfd\x85\x29\x78\xb6\xf2\x1b\xa0\xef\x8d\x27\xe3\xa8\x56\xf0\xa3\x43\xfa\xba\x97\x19\x70\xd6\x9f\x90\x1f\xbb\xaa\x15\x55\xc3\x60\xc2\xa9\x07\xed\x8a\x1f\x5f\xb0\xa6\xfb\x8a\xbd\x6a\xa7\xe5\xfe\xcc\x4b\x64\x85\x1f\x20\x9e\x38\xca\x28\x15\xda\x73\xea\x6f\x1d\xda\xfe\xc1\x0d\xff\xcd\x8b\x59\xb9\x36\xa3\xa6\x7a\xce\x2a\x7b\x52\x3e\x85\x38\xc7\x03\x75\x9c\x6b\x5a\x2d\xcc\x24\xbd\x2e\x5b\xc6\xcd\x14\xdf\x22\x86\x6f\x56\x70\xdb\x39\xa4\x69\xb1\xa3\x12\xa9\x9f\x96\x5e\x90\x68\xfc\x1e\x23\x3c\x56\x04\xb9\x77\x3b\xb6\x64\x6f\x44\x8f\xad\x4f\x05\xf5\x8a\xc7\x4b\x23\x0c\x9f\x59\x01\x4d\xf9\x7b\x7d\x48\x02\x01\xd9\x57\x5c\xac\x12\x11\x09\xf4\x84\x44\x52\xe4\x59\xc0\x7f\x27\x64\x90\xfd\x0f\xef\xfc\x18\xd3\xd4\x5e\xcf\x13\x2f\xf2\xfb\xc3\xe1\x11\x76\x4d\x81\x30\x80\x1f\xe0\x00\x5f\x2c\x43\x07\x30\xd9\x76\xa9\x1e\xb6\xee\xf3\xff\xe7\x2b\xfb\x3f\xc4\x3a\x41\x67\xfc\x36\x10\xb7\x18\xf5\x1d\x2d\x9c\x7c\x16\xd5\x51\x00\xc9\xed\xda\xdd\x42\xb4\xf2\x11\xab\x86\x4b\x32\xc8\xad\xeb\x5c\x9a\x24\xdb\xd1\xc3\x93\xec\x00\xa8\x01\x5a\xac\x67\x26\x33\xfd\x0e\x7a\x7d\x2a\xe4\xdc\x3e\xbb\x47\x5a\x60\xc7\x4d\x75\x17\x9d\x98\xa6\x69\xaa\xda\xca\x86\x0e\xc6\x62\x89\x1d\xe0\x41\xf6\xde\x00\xa6\xc8\xb3\xf2\x2f\xd1\xb3\x92\x06\x35\x8f\x4a\x89\xab\xda\x8b\x72\x41\xb3\x35\x1e\x4f\x2c\x09\x9e\xb8\x47\xb6\x82\x36\xbb\xae\xe3\xbe\x1b\xd5\x5b\xd3\x74\xba\x17\xc8\xa5\xf1\x9d\x63\xb9\x6e\x82\x4b\xe0\x72\x88\xb7\x1d\xf2\xaa\xa8\xce\x75\x8e\xe5\xd7\x7c\xaf\x2c\x1e\x83\x3d\x1f\xaf\x24\x54\x82\x1e\xb4\x96\x26\xfe\xc4\x67\x8d\x98\xa6\x96\x4d\xe5\xc7\xbe\x8f\xca\xda\xbc\x2b\xa2\x2c\xbc\x44\xc0\xf5\x84\x5a\x4f\xa6\x15\x44\x8a\x71\x28\xde\xe7\xf1\x88\xcc\xcc\x0d\x04\xd3\x58\xb8\xb7\x8f\x1a\x36\x29\xcf\x6e\x5a\x2e\x87\x37\x09\x8a\x45\x96\xe5\x23\x32\x53\xc4\x55\xec\x9f\x90\x3c\xf9\x15\x00\x00\xff\xff\x3b\x63\xf5\xf8\x99\x0a\x00\x00")

func templatesPartialsResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsResponsesGomd,
		"templates/partials/responses.gomd",
	)
}

func templatesPartialsResponsesGomd() (*asset, error) {
	bytes, err := templatesPartialsResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSchemaGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xdf\x73\xdb\xb8\x11\x7e\xf7\x5f\xb1\x03\xc7\x1d\x89\x73\x94\x7b\x7d\x54\xeb\x9b\xf1\x5c\x7d\xd3\xcc\x24\xb1\x2b\xdf\xf5\x25\x73\x0f\xb4\x08\xda\xe8\x41\xa0\xcc\x1f\xa9\x35\x14\xff\xf7\x0e\x00\x82\x5c\x80\xe0\x0f\xe7\xe4\x24\x2f\x11\x81\xc5\x62\x01\x7e\xf8\xf6\x5b\xd0\x55\x15\x42\x4c\x13\x26\x28\x90\x7c\xfb\x44\x77\x11\xa9\xeb\x33\x00\x00\xd9\xf3\x2e\xa3\x09\xac\xaf\x60\x75\xaf\xba\x36\x34\x59\x6d\x68\x02\xd8\x42\x0f\x72\x8c\xfe\x13\xf1\x92\x5a\x66\xfb\x8c\xe6\x2c\x66\xe5\x6e\x43\x93\xdf\x36\x1f\x94\xfd\x9d\xd3\x86\xed\x45\xb4\xa3\xca\xe8\x93\xfc\x81\x7b\xb6\xa9\x48\xd8\xa3\xea\xfb\x59\xff\xb4\x02\x4e\xd3\xe2\x93\x19\xbb\x31\x0f\x47\xb9\xc6\xa8\xe4\x45\xe3\x2f\x44\x43\x2e\x03\x78\x9f\x40\xf1\xc4\x72\x68\xd6\xc2\x72\x88\x20\xa3\x09\xcd\xa8\xd8\x52\x08\x2e\x2d\x7b\x96\x80\x48\x0b\xbd\x35\x75\x7d\xa6\xda\x51\x5f\x24\xe2\x76\x53\x9a\xff\x57\xff\xa4\xf9\x36\x63\xfb\x82\xa5\x02\xea\x1a\x82\x00\x35\xac\x83\x40\x8e\x1d\xb2\x95\x5d\x54\xc4\xce\x4c\x72\x22\x33\xe0\xd7\xc3\xbe\xdd\xa0\x19\xb1\x34\xe6\x10\x04\xf2\x97\x9c\x1d\x4d\xde\x74\xfe\xe3\x21\xfb\xa9\x9d\x39\xac\x6b\xe3\xcf\x98\x6d\x68\x14\xdf\x0a\x7e\xd0\x7e\xe4\x13\xc8\x47\xbd\x92\x70\x68\xd4\xa7\x92\xf3\xe8\x81\x37\xb3\x9b\x27\x67\xd0\x99\xb3\x0e\x28\xe8\x6e\xcf\xa3\x82\x02\xc9\x68\x5e\x64\x6c\x2b\x77\x26\x27\xed\xba\xd0\xca\xbd\x6e\xec\xcd\xba\xcb\xd2\x3d\xcd\x0a\x46\x73\x70\xe7\x0a\x82\xae\x73\x1d\x04\x23\x81\xec\x5b\x3b\x02\x31\xdb\x16\x40\x34\xf2\xbb\xa0\x88\x03\x6d\xd2\x3f\x00\xc4\x80\x93\x20\xd0\x12\x8d\x68\xd2\xa2\xbc\xbf\x21\x2d\x00\x1b\xf4\xaf\xde\x0b\xce\x04\x45\x0b\x0b\x1d\x30\xf4\xe2\x17\x34\x2f\x68\x7c\xf7\x4d\x57\xe1\x2e\xc2\xbc\x27\x14\xa0\x07\xe6\x78\xcf\x99\x28\xfe\x5d\x46\xa2\x60\x09\xa3\xd9\xa9\x62\x56\x34\x43\xdc\x05\x98\x28\x4c\xa0\x75\x7d\x66\x61\x0b\x93\x26\x06\x83\xcd\x9c\xcf\x25\xcb\x68\x8c\x98\x71\xb5\x31\x6d\xd8\xb0\xcc\xf8\x24\x1b\xfa\x59\x6d\x3e\x2b\x6e\x53\x9e\xcb\xbe\x9c\xb3\x6d\xbb\x5e\x22\x4f\x3b\x01\x82\x18\x87\xb8\x4c\xd7\xf8\x5d\xbd\x17\x5b\x5e\xc6\xf4\xe6\x25\xda\xed\xb9\x83\x31\xc9\x1f\x6a\x82\x2b\x88\xf6\x7b\xb9\x49\xfa\x91\x34\xd6\xd6\xbe\xe0\xf7\xee\x9f\x63\x83\x8e\xf9\xbc\x79\x36\x16\x31\x78\x26\x3b\x33\x70\x92\x84\xf3\x2f\x1a\xc5\x34\x6b\xc6\xe2\x50\xb2\x48\x3c\x52\x0d\x89\x1f\x24\x6a\xd4\x7b\x3d\xe0\xf7\x67\xb3\x07\x86\x73\x8f\x1c\x0e\x06\xa0\x77\xed\x73\xe7\x92\xfc\x52\x72\xee\x43\xa0\x7e\xf0\x9e\xa9\x3e\xae\x25\x70\x7a\x47\x2d\xf4\x2c\x7f\x0a\xbb\x87\xaf\x44\xae\xb5\x45\x66\x9d\x33\xb3\x78\xd2\xec\x80\xea\x35\xdb\xf1\x06\xe7\xe2\x8b\x52\x22\xeb\xab\x2e\x5a\x8f\x38\x29\x9e\xe8\x46\x0b\x9d\xce\xca\xd5\x39\x83\x07\xec\xa8\x80\xd9\xae\x27\x6c\x9b\xad\x34\xbc\x50\x9a\x41\x4f\xb4\x84\x05\x7d\x6e\x42\xd3\x29\x97\xa4\x0f\xff\xa5\xdb\x82\x2c\x4d\xeb\x00\x9d\x7f\xae\x2a\xb5\xa7\x75\xfd\xfb\xe2\xdc\xc6\x5d\x24\xb6\x4f\x69\x46\x60\x25\x07\x2c\x3b\x0c\xf0\x9c\x0e\x83\x55\x93\xa6\xe6\x81\x11\xb8\x7e\x2d\x3a\x43\x67\x62\x96\xc0\x82\x89\xfb\x22\x63\xe2\xf1\x5e\x51\x51\x07\x36\xe5\x7d\xa9\x24\x8f\x94\x14\xba\x55\xa9\x13\x5f\xb2\xd0\xc4\xa1\xf7\x0a\xab\x11\x47\x8e\x4c\x0f\xc6\xa2\xc4\x56\x25\x3e\xb6\xc2\xcf\x47\x23\x2d\xb4\x23\x47\xb7\x55\x15\x3c\x64\x34\xfa\xe3\x83\x3c\x68\x83\x26\xd3\x6c\xd8\x63\xdc\xa3\x32\xdc\x45\x59\xfe\x14\x71\x9d\xfb\x8d\xff\xc6\x76\x30\xe2\x57\xf0\xed\x71\x54\x7a\x7d\x71\x4f\x90\xb5\x2f\x67\xfe\xc9\x46\x54\x8a\xc1\x86\xe7\xa0\xa4\xd9\xc8\x61\xd1\xb6\x5d\xd7\xd2\x73\x7e\x96\x3e\xf5\x61\xa8\x5e\xf2\xbc\x3a\xf6\xbd\x53\xe7\xd5\x50\x92\xb7\x84\xb4\x57\x6a\x24\x01\x72\x91\xc3\x4f\x70\x91\x9b\xb3\xf1\x4e\x0c\x8d\x9b\x97\x1f\xac\xc4\x90\x88\xee\xe0\x9d\x26\x27\xe0\x80\x7c\xa7\x62\x08\xed\x83\xf9\xa3\x2f\x24\xdb\xd1\x73\xd3\xc8\x0c\x9e\x9f\xa4\xf9\x01\x72\x3e\x49\x62\x6f\x2b\x60\x94\x0f\xfa\xc9\xa5\xcb\x29\xbe\x72\x70\x61\xea\xc5\x53\xe0\xd9\x45\xd8\xf9\xb9\xda\x01\xa1\x77\x04\x2a\x70\xf2\x42\xe6\x01\x4e\x5d\x87\x55\x05\x3c\xfd\x9f\xd4\x41\x66\xa4\x8b\x91\x5e\x9a\xb0\x25\xf7\x86\x26\xc3\x39\x62\x00\x98\x9a\x04\x08\x14\x59\x39\x94\x48\x46\x4a\x87\x91\xf2\x4e\xed\x72\x9a\x99\xdd\xba\xe6\xfc\xb6\x25\xe6\x6b\x71\xe8\x1e\x6e\x05\xbd\x4d\x96\xf8\x8d\x7c\xb3\xed\x1c\x4b\x15\xd3\x19\x62\xac\x1a\x9d\xa8\x8c\x34\x4a\x87\xde\x89\xf7\x2d\xe0\x97\x39\x55\xa4\x59\x30\xbf\xd9\xed\x8b\x83\x59\xcd\xfb\x82\xee\xf2\xa5\xf5\xa4\x0f\xca\x90\xbc\xf9\xfe\x78\x46\xa1\x7e\x6b\x48\xf7\x20\x3e\x22\xdb\xdd\x37\x8e\xa8\xb0\x77\x1f\x87\xfa\x5e\x75\x09\x37\xa8\xde\xa7\xf9\x18\x5d\xb8\xa8\x03\x67\xba\x82\xe0\x56\x50\xb8\x4d\xd6\x41\x70\xd6\x7b\x29\xcf\x43\x10\xee\x2e\x7b\x1a\x6f\x5f\x7d\x2f\xe1\x81\xb5\x03\x69\x3b\x78\xcd\x23\x6d\xf0\xd7\x9c\xff\x99\xe0\xb5\xb7\x6f\x17\xbc\xe2\xbd\x2e\x78\x71\xf8\x53\xc1\x2b\x6f\x6f\x13\xfc\x20\xd0\x9f\x1d\x8c\x9f\x54\x33\x78\xd1\x7d\x04\x95\x92\x8f\x80\x99\xf8\x08\x96\x46\x3e\x6a\xcb\x50\xfd\x6b\xfe\x0b\x7d\x4f\xe1\xd1\x95\x20\x2c\x7e\xf1\x2b\x90\xbe\xee\x60\x8a\x58\x7e\x4e\x4b\x51\x48\xbb\x1f\x07\xb5\xc7\x40\x61\x0b\x33\x8b\x5b\x78\xab\x5a\x15\x31\xaf\x91\xcb\xf7\xfb\xb4\x80\xbf\xad\xe1\xe2\xfc\x4b\xc3\x9f\x1e\xfb\xcf\x4d\x51\xa3\x37\x06\xaa\x0a\x6f\x85\x2c\x7c\xab\x8a\x54\xd5\xc5\x43\x94\xd3\x32\xe3\x17\x75\x4d\xea\xba\xaa\xa4\xb7\xba\xbe\xdc\xa6\xbb\x7d\x2a\xa8\x28\xf2\x4b\x0d\xdc\xfc\x72\x6e\xfe\x40\xe9\xa3\xae\x43\x3d\x67\xa8\x9d\x84\x6e\x10\x4b\x7f\x71\x80\xdf\xd9\x15\xe4\xe5\xce\x6e\xfa\xd1\x7b\x11\xea\x14\xe8\xb8\xef\xbb\x14\xea\xbe\xbc\x04\x6f\x50\xef\xc2\xec\x32\x13\x8e\x43\x37\x7a\x6f\x71\xb0\x4e\x2c\xf8\x5f\x71\x7a\x5c\x99\x77\x7e\x7e\x0e\xee\x61\xb0\xe3\x7f\x95\x40\x7a\x0d\xc0\x4f\x54\x0d\x4c\xe1\xee\x6b\x0b\xd0\xcb\x00\xba\x13\x01\xbf\x9a\xd0\x9a\x2f\x75\xfd\x6f\x9a\xfa\xe0\xf8\x3e\x6c\xde\x0d\xdd\xf7\x21\x1d\x75\x37\x7c\x73\x38\x7c\xc1\x39\x7d\x35\x39\xe3\x82\x53\x1e\xb7\xac\x8f\x43\x1d\xdb\x07\x26\xfe\xb0\xba\x5b\x3a\xe9\x54\x80\x3b\x92\x25\x20\x01\x89\x3f\xf7\x91\x28\xcb\xa2\x03\xf1\x72\xc0\x3b\xa6\x94\xb0\xcc\x1d\xcd\x10\x2d\x8d\x7d\xb6\x2c\x01\x59\x81\x31\x24\xf3\x9b\xd2\xcb\x6a\xd2\xa5\x19\x6e\xd2\xa2\xce\x9f\x3a\x30\xb0\x39\xcb\x6d\xd5\x8b\xbd\xf8\x29\x4c\x6e\xc6\xb4\xe3\x51\x72\xb5\xd6\xfd\xa6\x04\x8b\x5f\x5f\xef\x25\x35\xb4\xd1\x73\xf4\xb9\x83\xe1\xe8\xa5\x30\xce\x59\x1e\x9c\xac\xae\xe3\x98\x49\xde\x8d\xf8\x48\x3a\xd7\x41\x78\xfd\x28\xc6\xc3\x11\x9f\x34\x50\x1f\x34\x9d\xef\xd9\xce\xc7\xe6\x5f\xd2\x6c\x17\x29\x82\x5c\x54\x95\xdd\x58\xd7\x4b\xa8\x2a\x2a\x62\x0f\xfb\xd8\xe4\x83\xa8\xa7\xf9\x79\x19\xc0\x8d\x88\x21\x4d\xc6\xf8\xc7\x58\xe2\x74\xd6\xad\xd5\x43\x52\x76\xde\x0b\xbb\xb9\x36\x54\xc4\x34\x83\x88\x73\xdb\x59\xff\x4f\x12\x56\x1f\x4b\x5e\xb0\x3d\xd7\xd5\x16\x04\x81\x79\x86\x34\x09\x82\xb5\x64\x70\xdb\xc4\x7c\xe3\xf7\x5e\x11\xaf\x3e\x46\x2f\x8d\x9b\xe8\x85\xed\xca\x5d\xeb\x42\xb5\x8f\x8f\xbd\x79\xd9\xf2\x32\x67\x5f\x68\xeb\xa4\x6d\x81\x5d\xe7\x4e\x56\xcc\x13\x41\xb0\xe6\xcf\x25\x3e\x32\x61\x05\xa1\xda\xe7\x06\x61\x9c\xa0\x20\x3a\x77\x33\x82\x88\x5e\x3e\x50\xf1\x58\x3c\x59\xfb\x01\x5c\xb5\xa1\x6d\x69\x8d\x26\xd7\x64\xb9\xd3\xa1\xb8\xee\x90\xd1\xb8\xbb\xbb\xa8\x28\x68\xd6\xac\xb0\x79\x30\x5e\xba\xbe\xc9\x15\x6a\x76\xb3\x16\xa8\xb8\x15\xad\xcf\x98\x4c\x2e\x0f\xfb\x6a\x56\x67\xfb\xea\x4c\xc6\x7d\xfd\x26\xd8\x73\x49\x91\x3b\xd4\x30\xfb\xdd\x49\x36\x73\x56\xd6\x7d\xb1\x47\xcb\x33\x76\x93\xcb\xc3\x0e\x9b\xe5\x79\x1c\x76\x76\x43\x0e\x95\x3f\x1f\xeb\x5e\x73\x29\xd4\x62\x3d\x45\x67\x80\x66\x91\x7c\x20\x4d\x66\x6d\xc2\x63\x01\x0b\x4e\x05\xac\x6e\x44\xb9\x5b\xc2\x5f\x2d\x62\x0e\x02\xd9\x1a\x04\xeb\xbf\x88\x87\x7c\xff\x77\x8b\x0e\x2d\x65\xdd\x09\x5f\x39\xc0\xaf\x15\x94\x4d\x5d\x7b\x5c\xcd\xd1\x75\x36\xbb\x7a\xa9\xd3\xa1\xd7\x86\x1c\x65\xea\x05\x95\x57\x7c\xcc\xda\xa6\x68\xe7\x4d\xf6\x32\xef\x22\xe7\xe5\x23\x4b\x0e\xb0\xd0\x3a\x79\xb5\x5c\xce\x8d\x79\x28\x10\x2b\x12\x93\xe1\xb0\xcf\xde\x9c\x46\x51\xe8\xb9\x5b\xcd\xae\xd4\xe5\x80\x0e\x96\xa0\x88\xe4\x3e\xdd\xcf\x13\xc4\x1e\x7b\xbf\x32\x1e\x11\xc4\x76\xf1\xf3\x56\x42\xb5\xcd\xf0\xac\xe0\x7e\x7d\x37\x6c\x31\xa8\xfe\x5e\x29\x82\x5b\xe5\xd2\x49\x15\xef\x06\xf6\xe4\xf1\xef\x7e\x31\x3a\x47\x29\x81\x5b\x70\xf5\x85\x6f\x7f\xcf\x60\xc6\x75\xc2\x69\x25\x13\xf4\x65\x93\xa7\x69\xde\x71\x9f\x03\x62\x0b\xc5\xee\x96\xf4\x81\xaa\xaa\x96\xa6\xdc\xc0\x67\xee\x5d\xaa\xbe\xf8\x12\xd5\x43\x1c\x56\xb0\xee\x4c\x7b\x0e\xaf\x8c\x81\x8b\x34\xe9\x53\xba\x94\x9d\xc4\x07\x72\xfb\x1a\xdc\xe7\xb8\x5f\x04\x21\xc7\xaa\x93\xf8\xbf\x12\x80\xa2\xf1\xaa\x52\xb6\x75\xbd\x6e\xfe\x72\xc1\x62\xef\xee\xe8\xb6\x53\x86\x75\x3d\x1f\xd6\xd2\xfa\x87\xc1\x57\xf9\xff\x00\x00\x00\xff\xff\x80\x78\x8b\x13\x43\x2c\x00\x00")

func templatesPartialsSchemaGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSchemaGomd,
		"templates/partials/schema.gomd",
	)
}

func templatesPartialsSchemaGomd() (*asset, error) {
	bytes, err := templatesPartialsSchemaGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/schema.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPartialsSecurityGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbf\x4e\xc3\x40\x0c\xc6\xf7\x3c\xc5\xa7\xb4\x03\x44\xbd\x86\x19\x89\x81\x81\x0d\xb1\x94\x17\x38\x25\x4e\x39\xd4\x38\x55\xe3\x4a\xa0\xe4\xde\x1d\xf9\x9a\xff\x04\x09\x0f\x51\xe2\x9f\xed\xf8\xfb\xdc\x34\x06\x69\x82\x03\x65\xd7\x8b\x93\x6f\xbc\x53\x79\x3e\x59\x21\x24\x29\x8c\xf7\x91\xf2\x9c\x0a\xc7\x84\xb8\xee\x8a\xe2\x81\x5c\x2c\x1f\x09\x5b\xb6\x25\xed\xb0\xad\xb3\xea\x4c\x35\x1e\x9f\xb0\x87\xf7\x51\x8b\xa6\xb9\x31\x78\x8f\xf0\xf5\x59\x39\x1e\xea\xe2\x1d\xe2\x40\xc2\x28\xe2\xbc\x1b\x3a\xbe\xa5\x09\x5e\x38\x47\x55\xfc\xbd\x5f\xb4\x10\xf0\xea\x6a\x59\x11\xf1\x4b\x83\xd6\xe9\xdf\x23\x00\xd0\x19\xae\xb8\x6d\x8d\x2e\xba\xdc\x51\x70\x77\x22\xc6\xfe\x1e\x0f\x8a\x07\xae\xb1\xd9\xe0\xf9\x2a\x1f\xc4\xe2\x32\x2b\xae\xe2\x39\x6e\xdf\x6c\x49\xed\x21\xa8\x6d\xe7\xc4\x18\x63\xc2\xc3\x98\x39\x99\xb8\xea\x38\xa7\x2f\xb5\xb5\xd7\xde\x1b\x8b\x45\x68\x8f\xf4\x92\x27\x57\x1a\x3b\x17\x4d\xa3\xcb\xeb\x99\xff\xdf\x63\xcd\xee\x9f\x00\x00\x00\xff\xff\x45\xb9\xf2\x04\x53\x02\x00\x00")

func templatesPartialsSecurityGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPartialsSecurityGomd,
		"templates/partials/security.gomd",
	)
}

func templatesPartialsSecurityGomd() (*asset, error) {
	bytes, err := templatesPartialsSecurityGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/partials/security.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x0a\xc2\x30\x14\x84\xe1\x7d\x4e\x31\xcc\x3e\x39\x80\x67\x10\x91\x88\x07\x08\xed\x14\x03\x8d\x96\xe6\xb9\x0a\xbd\xbb\x04\xb2\x90\x2e\xe7\x5b\xfc\xe3\xbd\x77\x96\x6d\xd5\x05\xad\x21\xdc\x52\x11\x8e\xc3\x75\x76\xad\xc1\x54\xb6\x35\x99\xc0\x5d\x75\xfb\xbc\xab\x1e\xd3\x4b\x25\x11\x73\x9e\x0c\x8c\x43\xa3\x16\x22\xfc\x2d\xb0\xa7\x38\x8a\xbc\xef\xaa\x79\xce\xdf\x12\xb5\x3c\xe3\x95\x08\x27\xe9\xa7\xbf\x00\x00\x00\xff\xff\x56\x01\xc5\xa0\x8c\x00\x00\x00")

func templatesResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesResponsesGomd,
		"templates/responses.gomd",
	)
}

func templatesResponsesGomd() (*asset, error) {
	bytes, err := templatesResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemasGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x31\x0a\x02\x31\x14\x44\xfb\x9c\x62\x98\x3e\x39\x80\xad\xad\x88\x44\x3c\x40\xd8\xfd\xd1\x0f\x1b\x15\xf7\x5b\x7d\x72\x77\x89\x8a\x85\xdd\x9b\x07\x33\x13\x63\x0c\xa6\xb6\xc8\x06\xee\x48\xfb\xd2\x04\xbd\x87\xa1\x83\x3b\x4c\xda\x7d\x29\x26\xe0\x3a\x5d\xa4\x15\x62\xd6\xc9\xc0\xe3\x3b\x65\xa9\x44\xfa\x31\x38\xea\xfc\xae\xf0\xf0\x90\x55\x67\x7d\xb6\x2c\xf5\x94\x77\x44\xfa\x33\xe0\xf6\x76\xad\x7a\x26\xd2\x07\xc6\xf3\x2b\x00\x00\xff\xff\x0f\xc4\x94\xab\x91\x00\x00\x00")

func templatesSchemasGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemasGomd,
		"templates/schemas.gomd",
	)
}

func templatesSchemasGomd() (*asset, error) {
	bytes, err := templatesSchemasGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTagGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\x28\xc9\x77\x4e\xcc\x4d\xcd\x51\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x49\x73\x55\x57\x2b\xe8\xb9\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x81\xc4\xb9\xaa\xab\x75\x15\x32\xd3\x14\xf4\x5c\x2b\x4a\x52\x8b\xf2\x12\x73\x5c\xf2\x93\x8b\x41\x12\x0a\x0a\x0a\x0a\xd8\xe4\xd0\x0d\x50\x80\x82\x68\x90\xe1\x78\x14\xc6\x6a\x60\x28\x08\x0d\xf2\x51\xa8\xad\xd5\x84\x5b\x95\x9a\x53\x9c\x8a\x6c\xa4\x0d\x0e\x1d\x76\x08\x1d\x79\x29\x20\x0d\x08\x26\x20\x00\x00\xff\xff\x21\xf8\x46\x74\x06\x01\x00\x00")

func templatesTagGomdBytes() ([]byte, error) {
	return bindataRead(
		_templatesTagGomd,
		"templates/tag.gomd",
	)
}

func templatesTagGomd() (*asset, error) {
	bytes, err := templatesTagGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tag.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.gomd":                 templatesIndexGomd,
	"templates/info.gomd":                  templatesInfoGomd,
	"templates/operation.gomd":             templatesOperationGomd,
	"templates/partials/content.gomd":      templatesPartialsContentGomd,
	"templates/partials/headers.gomd":      templatesPartialsHeadersGomd,
	"templates/partials/parameters.gomd":   templatesPartialsParametersGomd,
	"templates/partials/request_body.gomd": templatesPartialsRequest_bodyGomd,
	"templates/partials/responses.gomd":    templatesPartialsResponsesGomd,
	"templates/partials/schema.gomd":       templatesPartialsSchemaGomd,
	"templates/partials/security.gomd":     templatesPartialsSecurityGomd,
	"templates/responses.gomd":             templatesResponsesGomd,
	"templates/schemas.gomd":               templatesSchemasGomd,
	"templates/tag.gomd":                   templatesTagGomd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.gomd":     &bintree{templatesIndexGomd, map[string]*bintree{}},
		"info.gomd":      &bintree{templatesInfoGomd, map[string]*bintree{}},
		"operation.gomd": &bintree{templatesOperationGomd, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"content.gomd":      &bintree{templatesPartialsContentGomd, map[string]*bintree{}},
			"headers.gomd":      &bintree{templatesPartialsHeadersGomd, map[string]*bintree{}},
			"parameters.gomd":   &bintree{templatesPartialsParametersGomd, map[string]*bintree{}},
			"request_body.gomd": &bintree{templatesPartialsRequest_bodyGomd, map[string]*bintree{}},
			"responses.gomd":    &bintree{templatesPartialsResponsesGomd, map[string]*bintree{}},
			"schema.gomd":       &bintree{templatesPartialsSchemaGomd, map[string]*bintree{}},
			"security.gomd":     &bintree{templatesPartialsSecurityGomd, map[string]*bintree{}},
		}},
		"responses.gomd": &bintree{templatesResponsesGomd, map[string]*bintree{}},
		"schemas.gomd":   &bintree{templatesSchemasGomd, map[string]*bintree{}},
		"tag.gomd":       &bintree{templatesTagGomd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
