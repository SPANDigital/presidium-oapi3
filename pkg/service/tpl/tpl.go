// Code generated for package tpl by go-bindata DO NOT EDIT. (@generated)
// sources:
// pkg/templates/index.gomd
// pkg/templates/info.gomd
// pkg/templates/operation.gomd
// pkg/templates/partials/content.gomd
// pkg/templates/partials/headers.gomd
// pkg/templates/partials/parameters.gomd
// pkg/templates/partials/request_body.gomd
// pkg/templates/partials/responses.gomd
// pkg/templates/partials/schema.gomd
// pkg/templates/partials/security.gomd
// pkg/templates/schemas.gomd
// pkg/templates/tag.gomd
package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgTemplatesIndexGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\x0b\x01\x31\x15\x6a\x6b\xb9\x40\xe2\x80\x00\x00\x00\xff\xff\xff\xd8\xd2\xd8\x1c\x00\x00\x00")

func pkgTemplatesIndexGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesIndexGomd,
		"pkg/templates/index.gomd",
	)
}

func pkgTemplatesIndexGomd() (*asset, error) {
	bytes, err := pkgTemplatesIndexGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/index.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesInfoGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\xcd\x8a\x83\x30\x14\x05\xe0\x7d\x9e\xe2\x80\xbb\x40\x7c\x00\x11\x37\x33\xb3\x93\x19\x70\xb4\x7b\xb1\x11\x02\xfe\x94\x18\xba\x11\xdf\xbd\xdc\x6b\xea\x4f\xda\x45\x5d\xe5\x9e\x7b\xfc\xa2\x4a\x29\xe1\x8c\xeb\x74\x82\x79\x46\x5c\xd2\x11\xcb\x22\x28\x17\xd1\x29\xe3\xe1\xa2\xed\x64\xc6\x81\x2a\x82\xe6\x6f\x3d\x35\xd6\xdc\xdc\x9e\x29\x98\x16\x71\xa9\x6d\x3f\xfd\xb5\xff\xda\xde\x4d\xc3\xa2\x00\x80\x28\x02\x6f\x30\xb6\xf0\xbb\x84\x17\x29\xdf\x14\xbe\x94\xad\xa0\x1e\xae\x24\x3c\xed\xaf\x71\x70\x75\xe3\x8e\xa8\x8f\x78\x0c\x6a\xf1\x6f\xdd\xf3\x07\xc0\x3f\x52\x52\x22\xe5\xfa\xc7\x61\x6b\x23\xfc\xa5\xef\xc4\x9f\xbe\x36\xdd\x99\xe4\x28\x34\xb7\xde\x27\x68\x55\xe4\x67\xb2\x2a\x72\x02\xd3\xa3\xb8\x96\xb2\x17\x70\x3f\x3e\x02\x00\x00\xff\xff\xbc\xf2\x49\x2e\xd1\x01\x00\x00")

func pkgTemplatesInfoGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesInfoGomd,
		"pkg/templates/info.gomd",
	)
}

func pkgTemplatesInfoGomd() (*asset, error) {
	bytes, err := pkgTemplatesInfoGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/info.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesOperationGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x3d\x6a\xc4\x30\x10\x85\x7b\x9f\x62\x70\x69\x90\x0f\x90\x22\x45\xd8\x26\x90\x3f\x76\x2f\x60\xe1\x7d\x21\x82\x95\xa5\x8c\xc6\x85\x11\xba\xfb\x32\x46\x6b\x17\xeb\xf2\xbd\xf7\xf1\x49\x63\x8c\x69\xc4\xc9\x0d\x2f\x94\x33\xf5\xdf\x11\x6c\xc5\x85\xe9\xfd\x44\xa5\x34\xba\x0e\xc3\xd0\xe8\xf4\x09\xf9\x0b\x57\x2a\x65\x05\xbf\xac\x87\x12\xba\xea\xec\x7e\xa9\x3f\x21\x32\x46\x2b\x50\xaa\xeb\xf6\xd8\x75\x39\x1b\xc2\xa4\xfd\x03\xbe\xcc\xde\x5b\x5e\xd4\xf7\x9a\xf3\x23\xae\xf6\x0d\xdd\xc5\x69\x64\x17\xf5\x5f\x54\x8a\x3e\xff\xd4\x6c\x72\x43\x02\x1f\x6f\x56\x40\x6d\xb4\x6c\x3d\x04\x9c\x3e\x5c\x92\x96\xfa\x9f\xad\x78\x86\x19\xff\x33\x92\xbc\x85\xeb\xd2\x52\x7f\xde\xd3\x11\x9a\x62\x98\x12\xaa\xf5\x5c\xe3\x81\x34\x61\x9c\xd9\xc9\x52\xc9\x4b\x8d\xeb\x71\xf7\x00\x00\x00\xff\xff\xb3\xdd\x9d\x53\x7b\x01\x00\x00")

func pkgTemplatesOperationGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesOperationGomd,
		"pkg/templates/operation.gomd",
	)
}

func pkgTemplatesOperationGomd() (*asset, error) {
	bytes, err := pkgTemplatesOperationGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/operation.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsContentGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x6e\x83\x30\x10\x44\xef\x7c\xc5\xc8\xe4\x84\x9a\x70\xaf\xd4\x53\xdb\x63\x15\x29\xcd\x07\xc4\xc5\x43\x83\x54\x96\x14\xdc\x43\x84\xf6\xdf\x2b\xc0\xc1\x56\xaa\x72\x42\x9e\xe7\xdd\x79\x1e\xc7\x2d\xca\x02\xcf\x9d\x78\x8a\x87\x67\x7b\xf9\xb2\x9e\x28\x4a\x6c\x55\xb3\x29\x76\xac\x1b\x21\x4c\xb5\x30\x46\x35\x03\x80\x29\xea\xad\x7c\x12\x1b\xb1\x2d\x1f\xb0\x69\xe9\x1a\x7b\xbc\x5e\x88\xc7\x27\xec\xa0\x9a\xcd\xe0\xf4\xe5\x79\x8e\xd3\x38\xce\xa4\xea\x29\x06\xd3\x94\x75\xa9\x59\x27\x98\x64\x5a\xb2\x8f\xe2\x42\xa9\xf8\x57\x16\x78\x15\x87\xae\xfe\x57\xe2\x86\x1d\x28\x8e\xfd\x00\x8b\xb7\xb5\x69\xe2\x59\x16\x38\xee\x5f\xf6\x01\x83\x3f\x13\x73\x07\xdc\x83\xb7\x07\x89\x6d\x93\x8a\x4d\x8d\xdd\x7b\x75\x66\x6b\x11\x4e\x97\x24\xb1\x1c\xe6\xd8\xc0\x35\x95\x87\x59\xe0\x03\x6b\x73\x7f\x31\x78\x22\x2a\xe3\x8f\x73\xcf\xef\x1f\x0e\x1e\x1f\x9d\xbb\x86\x8e\xbf\x01\x00\x00\xff\xff\xd2\xed\x50\x80\xd3\x01\x00\x00")

func pkgTemplatesPartialsContentGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsContentGomd,
		"pkg/templates/partials/content.gomd",
	)
}

func pkgTemplatesPartialsContentGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsContentGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/content.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsHeadersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x31\x4f\xf3\x30\x14\xdc\xfb\x2b\x4e\x51\x87\xef\xb3\x68\xcb\x8c\x80\x09\xa4\x0e\x85\xa1\x54\xec\x26\x7e\x6e\x2d\x25\x4e\x70\x5c\x21\xf4\xe2\xff\x8e\x9c\xa4\xc1\xa1\x74\x20\x93\x75\xef\xce\x79\x77\x67\xe6\x05\x56\x02\x6b\x92\x8a\x1c\x76\x54\xd6\x85\xf4\x04\xb1\xc2\x22\x84\x19\xb3\x22\x6d\x2c\x21\x3b\x74\x84\xac\x43\x01\x20\xea\xe6\x3d\x88\x9b\x3b\x2c\x5f\x65\x71\x24\xa4\x43\x47\xba\x9b\x6c\x49\xa7\xb8\xd1\xa3\x6e\x40\xcf\x27\xcb\x2d\xbd\x1f\x8d\x23\x85\x10\x70\xfb\xe6\xee\x21\xdc\x80\x08\x30\x93\x55\x21\x80\x39\x55\x3c\x50\xed\x28\x97\x3e\xd5\xa8\x11\xfb\x56\xb5\x60\xf6\x27\x97\x59\x55\x93\x93\xde\x54\xf6\x25\x3f\x50\x29\x77\x9f\x35\x65\xe3\x95\x3d\x86\x4e\x24\xe2\x82\xbe\x5a\xef\x9e\x36\xcf\xf4\xb1\x31\x96\x9a\xe4\xd7\x4d\xee\x4c\x1d\xaf\x89\xf1\x08\xb4\xa3\x59\xb2\x71\x9d\xd9\x70\x1c\x4e\x2b\x81\x47\xab\x50\xe9\x4b\xa9\xcf\x26\xa5\x6c\x4c\xe3\xe1\xcf\x8a\xc1\xb4\x99\xc8\x9a\xb6\x63\x34\xf6\x1e\xff\x0a\xb2\x58\xfe\xc7\xf5\xcf\xb4\x9d\xb4\x7b\xc2\xdc\xca\x92\xae\x26\x4d\x26\xbc\xf8\xb5\x10\x82\xb9\x27\x22\x04\x21\x26\x01\x9e\x9e\xc5\x85\x4a\x07\xff\x7f\x8a\xe3\x57\xbf\x5f\x01\x00\x00\xff\xff\xe6\x6d\x44\x2a\xa7\x02\x00\x00")

func pkgTemplatesPartialsHeadersGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsHeadersGomd,
		"pkg/templates/partials/headers.gomd",
	)
}

func pkgTemplatesPartialsHeadersGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsHeadersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/headers.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsParametersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\xae\xd3\x30\x10\xbc\xe7\x2b\x46\x69\x0f\x60\xd1\x94\x33\x02\x4e\x20\x51\xa9\x54\xa8\x54\xdc\x4d\xb2\x69\x2c\x35\x4e\xb0\x5d\x0a\x4a\xfc\xef\x4f\x9b\xba\x89\xd3\x57\xbd\xe7\x43\x62\xed\xec\xac\x77\x77\xa6\xeb\x56\x58\x0b\xb8\x4a\x59\x38\xaa\xdb\x93\x74\x04\x43\x39\xa9\xbf\x64\x21\xf1\x43\x1a\x59\x93\x23\xb3\xa7\x12\x97\x4a\xe5\x15\xf2\x46\x3b\xa9\x34\xa3\x1c\x94\xba\x88\xf3\x20\xd6\x58\x79\x9f\x70\xe1\x82\x4a\xa5\x09\x69\x7b\x03\x53\x78\x9f\x00\x00\xa3\xcb\x31\x8c\x0f\x9f\x90\xfd\x92\xa7\x33\xcd\x70\x43\xe5\x80\xf0\x2b\x51\x5c\x95\x31\x35\x00\x7c\x7a\x08\xd1\x75\x11\x98\xed\x64\xcd\x25\x85\x78\x80\x6d\xf4\x15\xe9\xba\x79\xc5\x6c\x4f\x7f\xce\xca\x50\x01\xef\xf1\xf1\xb7\xf9\x0c\x61\x42\x84\x93\x49\x17\xde\x3f\x27\x7d\xa1\xd6\x50\x2e\x5d\x4c\x2b\xc6\xd8\x44\xec\x87\x11\xc6\x4d\xa7\x4d\x4b\x46\x3a\xd5\xe8\x9f\x79\x45\xb5\x3c\xfc\x6f\x29\x8d\xeb\x5e\xc3\x08\x4c\xb8\xe6\xdb\xe1\xfb\x76\x47\x97\xad\xd2\x64\xe7\x0d\xd8\xdc\xa8\x96\x4b\x71\xf2\xb8\x2d\xd2\xdc\x51\x12\xae\xe1\xb6\x16\xf8\xaa\x0b\x34\x25\xda\x7b\xdd\x92\xd7\x1c\xb1\x55\xd6\x31\x73\xe6\x8c\x97\x44\xb7\xcc\x48\xef\x14\x3c\x3a\xbc\x39\x91\x46\xf6\x16\xef\x19\x1a\x45\x5c\x2c\xc0\x02\x90\x75\xd3\x0b\x36\x89\x34\x1e\x34\xed\xb1\xd1\xe8\xc1\xeb\x42\x8f\x68\xf6\x30\xf9\x90\xba\x1a\x4e\x3f\x7e\xc6\x5f\x38\x53\x2a\x37\x65\xa4\x3e\x12\x96\x4a\x17\xf4\xef\xdd\xbd\x39\x23\x97\xdd\xf2\x27\x0d\x23\x7b\x3f\x36\x66\xa4\x43\xd8\xc1\x24\x4b\x2c\xd0\x24\xcb\x34\xfa\x75\xdf\x61\xbf\x4f\x01\x00\x00\xff\xff\x1b\xaf\x66\x09\xae\x03\x00\x00")

func pkgTemplatesPartialsParametersGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsParametersGomd,
		"pkg/templates/partials/parameters.gomd",
	)
}

func pkgTemplatesPartialsParametersGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsParametersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/parameters.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsRequest_bodyGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcb\x6e\x83\x30\x10\xbc\xf3\x15\x23\x92\x13\x2a\xe4\x1e\x29\x97\x3e\x8e\xed\x81\x56\xbd\xbb\xb0\x04\x4b\xc1\xa6\xe0\xb4\x8a\x8c\xff\xbd\x32\xaf\xda\x2e\xf5\xc9\xbb\x33\xb3\xf6\x7a\xd6\x5a\xa7\x38\x24\x50\x35\xef\xa1\xa8\x69\x2f\x4c\x11\x3a\x2a\x88\x7f\x51\x0f\x86\x9c\xce\x57\xea\xd5\xbd\x2c\x6f\x39\x55\xf8\xae\x79\x51\xa3\x90\x42\x31\x2e\x26\xbc\x02\x13\x25\x18\xde\xd9\xe5\x4a\x48\x0e\x48\x8d\x89\x6c\xd9\x92\x2a\x2e\x08\x71\x47\x9f\x4b\x89\xd8\x98\x08\x00\x2c\xcc\x2b\x64\x70\xe2\xbd\xc3\xc3\xf1\x84\x6c\x2c\xe8\x13\xaa\x11\xc8\xa9\x9a\xd3\x4e\x2d\x4f\xee\xc0\x76\xed\x76\xc8\x27\x14\x16\x8e\x3c\x50\xeb\x50\x9e\x59\x32\xef\xa8\x84\x31\x49\xb2\x04\x49\xa2\x35\x5d\x7a\xb2\xb9\x17\xa9\xe0\xe5\x45\x69\x8c\x5f\x76\xc0\x33\x95\x9c\xbd\xdd\x5a\xc2\x80\x47\xea\x8b\x8e\xb7\x8a\x4b\x81\x01\xaf\x45\x4d\x0d\xc3\xe0\x0b\xd2\xdf\xe5\xee\x9d\x68\x08\x2e\x9e\xa2\x63\xe2\x4c\xd8\x0b\xd6\xd0\x1d\xf6\xcd\x7a\xe2\xf1\xe4\x77\xf4\x20\x85\x22\xa1\xc2\x87\x71\xdf\x6f\x15\x67\xf3\xf5\x36\xb8\xab\x15\xfd\x48\xc9\x27\x43\xfe\x48\x03\x87\xfe\x51\x6f\x4b\x5d\xd7\xc3\x35\x40\xeb\xb1\x57\x63\xc6\xbd\xdf\xa3\xfb\xc6\x0b\x61\x1d\xe9\x58\xb6\xd4\x31\x8b\x4d\xe7\xd8\x23\xe3\xcd\xa6\x03\x5b\x96\x4b\x4f\x16\x6f\x67\xa3\x20\xe5\x8e\xf5\x1c\x06\xdb\x43\x82\x27\x51\x42\x56\x98\x3b\xc0\x87\x9d\xdb\xf9\xf7\xfc\x04\x00\x00\xff\xff\x24\xd9\x72\x61\x95\x03\x00\x00")

func pkgTemplatesPartialsRequest_bodyGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsRequest_bodyGomd,
		"pkg/templates/partials/request_body.gomd",
	)
}

func pkgTemplatesPartialsRequest_bodyGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsRequest_bodyGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/request_body.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x3c\xec\x1c\xda\xb0\x71\x7a\x2e\xf4\xb4\x2d\xe4\x90\x5d\x4a\x36\xf4\x2e\xe2\xf1\xae\x21\x91\x8d\xa5\xa5\x94\xc8\xff\xbd\xd8\x92\xf5\x65\x25\xb4\x1b\x08\x48\xd6\x9b\x91\xe6\xbd\x37\x73\xbd\x6e\xb0\x5d\xe3\x40\xa2\x6b\xb9\x20\x48\xba\x74\x67\x26\x09\xeb\x2d\x36\xc3\x90\x8d\xe7\x15\xd5\x0d\x27\xe4\xbd\x01\xe5\x18\x86\x0c\x00\xc6\xc3\x55\x4f\x35\xbe\x7e\x43\x39\xa7\x28\x0f\x54\x47\x00\x93\x3b\x40\xfd\x62\xe7\x77\x0a\x70\x42\x32\xf9\x2e\x26\xd4\x8b\x5e\x7a\xa7\x4d\xed\x12\x95\x8f\x2d\x97\xc4\xe5\x7c\x3e\x63\x7a\xc6\x5f\x09\x2b\xce\x2e\xf4\x80\xd5\x85\xaa\x86\x1d\xff\x74\xd3\xbd\x77\x63\xfd\x3b\x6c\x54\xf9\x72\x7a\xa3\x0b\x8b\x71\xee\xb5\xd3\xf1\x41\x17\xbf\x08\x1b\x49\xb8\x1f\x99\x0e\x9b\x58\x49\x04\x2a\x5c\xaf\x86\xa0\x61\x98\x76\x90\xed\xee\xf8\xb4\x7f\xa6\xdf\xfb\x86\x93\xf0\x2a\xfc\x4e\xe2\xd4\x37\x9d\x6c\x5a\x8e\x19\x3c\x91\x62\x77\x56\xe4\xbc\xed\xa8\x67\x23\x52\xdf\x3f\x3e\x25\x4f\x92\x00\xb5\xa0\x8b\x78\x15\x09\xa0\xbf\x58\xcd\xe8\x2c\xc8\xe7\x2f\x51\xc4\x9d\x57\x6f\xf4\x3f\x0b\x93\x9b\x15\xcc\x72\xbb\xc6\x0f\x5e\xa1\xad\x6f\x3b\x38\x8b\x2c\xbe\x6f\x84\xfc\x27\x9b\x8f\x40\xcf\xea\xa3\x3d\x5e\x25\x3e\x9d\x89\xa3\xfc\x8c\x2f\x7e\x65\x45\x61\xd3\x8b\xcc\xab\x77\x77\x3c\xfe\xc4\x63\x5b\x11\x14\xfc\x02\x15\x9e\xac\x3b\x15\x0c\xc9\x8e\x61\xb5\x71\x3f\x7f\x1d\xee\xec\x5a\xa5\xba\x40\xf3\xfc\x10\xb5\x5f\xca\xf6\xce\x0d\xae\xc1\xab\xe6\x24\x91\x1f\xec\xde\x65\xc9\x75\x6f\xe6\xb6\x5f\x97\x1e\xc0\x6c\x82\x0f\x3f\x69\x1e\x2a\xce\x1e\xde\x50\x89\x80\x1a\xa0\xc7\x49\x10\x12\x4c\x98\xa8\xcf\x67\x21\xc3\xf8\x72\x47\xac\xa2\x5e\x18\x75\x17\x5d\x58\x14\x45\x31\xb9\xd6\x96\x0e\x13\xb1\xc4\x2a\x3c\x8f\x2d\xa7\x60\x44\x0e\xe4\x5f\xa2\x03\x49\x23\xcd\x93\x63\xc4\xa9\xf6\x36\x3d\x41\xbb\x35\x5d\x4f\x8a\x04\xa3\xd3\x8d\x4f\x51\x9b\xfd\x5f\xc7\xfd\x0d\x00\x00\xff\xff\xed\xb6\x1c\x3b\x54\x06\x00\x00")

func pkgTemplatesPartialsResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsResponsesGomd,
		"pkg/templates/partials/responses.gomd",
	)
}

func pkgTemplatesPartialsResponsesGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsSchemaGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdf\x6f\xdb\x36\x10\x7e\xcf\x5f\x71\x50\xf2\x60\x0b\x95\xbd\xbe\x1a\xcb\x80\xa0\xeb\xb0\x02\x69\x13\x38\xed\x5e\x8a\x62\x50\x2c\x2a\xe1\x46\x53\xae\x7e\xb4\x31\x64\xfd\xef\x03\x49\x51\x3c\x52\x94\x7f\x24\x71\xba\xf6\x25\x16\x79\xfa\x78\x47\xde\x7d\xfc\x48\xb5\xae\x23\x48\x48\x4a\x39\x81\xa0\x58\xdc\x93\x65\x1c\x34\xcd\x09\x00\x80\xe8\x39\xcb\x49\x0a\xb3\x73\x98\xdc\xc8\xae\x39\x49\x27\x73\x92\x02\xb6\x50\x2f\x39\x46\x7f\xc5\xac\x22\x96\xd9\x2a\x27\x05\x4d\x68\xb5\x9c\x93\xf4\xd3\xfc\x52\xda\x5f\x3b\x6d\xd8\x9e\xc7\x4b\x22\x8d\x3e\x88\x1f\xa8\x67\x1a\xc2\xbb\x14\xca\x7b\x5a\x40\x3b\x34\x2d\x20\x86\x9c\xa4\x24\x27\x7c\x41\x20\x9c\x42\x84\xec\x69\x0a\x3c\x2b\x55\x24\x4d\x73\x22\xdb\x51\x5f\xcc\x93\x2e\x86\xf6\xef\xe4\x77\x52\x2c\x72\xba\x2a\x69\xc6\xa1\x69\x20\x0c\x51\xc3\x2c\x0c\xe1\xd7\xdb\xfc\x37\xa8\xeb\x21\x7b\xdd\x4d\x78\xe2\x8c\x28\x06\xd4\x2f\x7d\x5c\xaf\xba\xb8\xf6\xf0\xa9\x35\x87\x30\x14\xbf\x84\x17\xc8\x01\xdd\x89\x47\x8e\x9a\x46\xe3\x69\xb3\x39\x89\x93\x2b\xce\xd6\x0a\x47\x3c\x81\x78\x34\x11\x45\x43\x6f\x7e\xa8\x18\x8b\x6f\x59\xeb\x81\x7e\xf2\xbc\x78\xe2\xc4\x03\x25\x59\xae\x58\x5c\x12\x08\x72\x52\x94\x39\x5d\x88\x59\x2a\x82\x2e\x3e\x34\x03\x5e\x18\x7b\xd2\xae\xf3\x6c\x45\xf2\x92\x92\x02\xdc\xb1\xc2\xd0\x74\xce\xc2\x70\x8b\x23\xab\xce\x2e\x80\x84\x2e\x4a\x08\x54\xe2\x1a\xa7\x02\x27\x33\x83\x7e\xfe\x06\xf3\x2c\x2b\x45\x6e\x06\x6d\xae\x6e\x8d\x9d\x72\x46\x39\xb9\x3e\xfa\xc0\xfe\xac\xc3\xa1\x53\x5e\xbe\xa9\x62\x5e\xd2\x94\x92\xfc\x59\xfd\x08\x7c\x4e\xe9\x35\x6d\x9a\x13\x6b\x79\x31\xed\xe0\xf5\x30\xef\x89\x8a\xfd\x5a\xd1\x9c\x24\x88\x5b\x26\x73\xdd\xd6\x55\x38\x9c\x55\x39\xdb\x4e\x27\x70\x96\xb7\xbe\x4a\x3b\xed\xb8\x36\xd8\x80\x7c\xda\x80\x2c\xa3\x0d\xe0\x72\xde\xc0\x1c\xa5\x2d\x6c\xd4\x0b\x91\xfc\x67\xff\x89\x7c\x4f\xd1\xa6\x9b\x85\x3c\xe6\x77\x44\xcd\xce\x2b\x31\x9b\x32\xe6\x35\x8e\xcd\x4e\x6e\x5c\x15\x67\xdf\x24\x9f\xce\xce\xcd\x8b\x36\xc5\x76\x86\xe5\x3d\x99\x2b\xca\x36\x96\x88\xb1\x55\xb8\x62\x46\xe4\x2a\x45\x56\xb3\xc5\x3f\x23\x49\x9a\x0a\x6e\x0c\x23\xf2\xb5\x75\x42\x71\x4d\x90\xdd\xfe\x43\x16\x65\x30\xd6\xad\xc8\xf7\xc8\x21\x35\xf1\xef\x73\x5d\xcb\x11\x9b\xe6\xcb\xa8\xae\x83\xba\x2e\x68\x49\x26\xb7\x71\x41\xaa\x9c\x35\x4d\xd0\x34\x75\x7d\x26\x7f\x4e\x17\xd9\x72\x95\x71\xc2\xcb\x62\xaa\x92\xb1\x98\x9e\x0a\xbf\x10\x91\x98\xc4\xcb\xcd\x52\x46\x75\x0d\x2c\xfb\x4e\xf2\x2e\x03\xc7\x3d\x6e\x25\xac\xe8\x71\xae\xee\x33\xf8\x6a\x58\x11\xa7\x2e\x8f\x36\xba\x75\x80\x16\xce\x4a\x77\x5c\x0c\x9d\x4f\x9e\x22\x12\xa9\xea\x9b\x9f\x76\xe2\x47\x94\xdf\x94\x39\xe5\x77\x37\x8c\x2e\x08\xaa\x00\x39\xca\xb8\xa3\x78\x41\xde\xaa\x47\xee\x03\xa6\xae\x06\x70\xdb\x45\xc2\xfc\xdf\xe1\x98\x4d\x60\x7f\x20\xbc\x1d\xb4\x40\x68\x4f\x18\xc2\xf1\xb5\x6f\x34\xc1\x2b\x60\x67\x27\x15\xdc\x95\xfd\xf9\xf1\xfd\xe5\x07\xf2\xfd\x92\x72\x52\x0c\xdb\x79\x81\x07\x37\x9f\x6f\x6d\xf1\xc0\xe6\xc4\xf5\x6c\x90\xa6\xfa\x1c\xfe\xd2\x64\x65\x81\x60\x86\x7d\x12\xb7\x68\x89\xe7\xd0\x84\xcd\x3b\x86\x6e\x7c\x02\x6a\xa4\x15\xd6\x61\x4c\xe1\xe4\xc7\xe9\xa9\x61\x26\x37\x75\x66\xf0\x48\x12\x00\x37\x07\x7b\x85\x6e\xef\x81\x73\x92\x0e\x57\xb9\xbf\xa0\x07\x24\x8c\xfb\xfc\x43\x56\x0b\xc5\xad\xd7\x2a\xcb\xf5\x52\x5c\x30\x76\xd5\x95\xde\x05\x5f\x9b\x87\x2b\x4e\xae\xc4\x62\x9a\x75\x7d\xa1\xb5\x72\x17\xeb\x39\xa9\x61\x9b\x22\xdc\x21\x8b\xd4\xcc\x0e\xac\xbf\x9f\xfc\x1d\x35\x84\xc6\x6d\xf5\xd0\xde\xc4\xd3\xf7\x0e\x91\x45\xef\xf8\x85\xfa\x0e\x3a\x73\x0d\x1e\xb9\x76\xa8\x27\x5b\xa0\xcb\xc4\xd1\x5d\x61\x78\xc5\x09\x5c\xa5\x42\x8e\xf7\xe6\x7c\x31\x34\xdd\xe6\x70\xd0\xa2\x1d\x28\x46\xb7\x2e\x81\x23\x90\x6d\xe7\x55\x3d\x74\xce\x5f\x30\xf6\x14\xe7\x15\xda\xcb\x39\x2f\xeb\xd7\x38\xcf\xd7\x4f\x72\x5e\xa2\x1d\xc7\xf9\xc1\x44\x5f\x38\x39\xfe\x6c\x0a\x7f\x30\xbb\x1f\xab\xf9\xf7\x14\xfb\x34\x79\xf0\x33\x7c\x9f\xd7\x95\xba\x78\x93\x55\xbc\x14\x76\xaf\x8f\x7b\x02\x38\xa6\xd4\x7f\x27\x23\x01\x15\x28\xd4\x35\x0e\xed\xb8\xfa\x1f\xed\x26\x4d\x13\xa9\x61\x23\x05\x12\xb9\x7e\x8c\xbd\x12\xd7\x5a\x86\x73\x28\xaa\xa5\xdd\xf4\xda\x77\x63\xf3\xbf\x3c\x55\xfc\x1c\x62\xfb\x88\x05\xf3\x43\x65\xad\xa3\x95\x4e\xc1\x2d\x0a\xdb\xff\xc7\x2b\xa8\x43\x52\xfe\x99\xa4\xf0\xae\x4c\xdc\x53\x0e\xf7\x76\x81\x69\x08\xa6\x46\xe0\xa3\x76\xad\xbd\xce\xed\xdf\x53\xab\x52\xf2\x5d\x56\x5f\x7b\x78\xcf\xbd\xab\xbe\xf6\xb2\xe8\xf6\xab\xe7\x5d\x9b\x4c\xb4\xc7\x4e\xa5\x8e\xd1\xbe\xcb\x68\xe5\xdc\x25\xe5\xff\xda\xfd\x1d\xc5\x98\xcd\xde\x9d\x63\x9a\x82\xc8\x4f\x7c\x1b\x1c\xc4\x79\x1e\xaf\x83\x1e\x2f\x7c\x3e\x80\x95\x5a\xbc\x77\x25\x59\x16\x36\x33\x45\x4d\xf3\xe5\xa4\xc7\x81\xfa\xaa\x1d\xfb\xe1\x19\xff\x05\x6e\x82\xac\xb2\x18\xf7\x3d\xf5\x90\xa5\x7b\x97\xee\xdc\x80\xff\x91\xe5\xcb\x58\x54\x2a\x8c\xea\xda\x6e\x6c\x9a\x31\xd4\x35\xe1\x89\x27\xf3\xed\xc4\x47\x69\xdf\xfe\x9c\x86\xf0\x96\x27\x90\xa5\xdb\x72\x5f\x5b\x62\x5e\x35\xb3\xe0\x29\x10\x9b\x80\x23\x33\xd6\x9c\xf0\x84\xe4\x10\x33\x66\x83\xf5\xbf\x99\x4c\xde\x57\xac\xa4\x2b\xa6\xe4\x3c\x84\xa1\x7e\x86\x2c\x0d\xc3\x99\x60\x0f\xc7\xa4\xf7\x29\xc0\x42\x8b\x1f\x5a\x98\xf8\x81\x2e\xab\x65\x07\xa1\xda\xb7\xbe\xfb\xf6\x61\xc1\xaa\x82\x7e\x23\x1d\x48\xd7\x02\x4b\x03\x57\xe6\x15\xd9\xe1\x04\x6d\xbf\xe7\xbc\xa7\xdc\x72\x82\xf2\x03\x9c\xd0\x20\xc8\x09\x03\xb7\x87\x13\xf1\xc3\x25\xe1\x77\xe5\xbd\x35\x1f\xc0\x64\x1b\x9a\x16\x63\xb4\x2b\x26\x0b\x4e\xb9\xe2\xc2\x61\xa3\xad\x70\xd7\x71\x59\x92\xbc\x8d\xb0\x7d\xd0\x28\xa8\x6f\x57\x84\x8a\x32\xac\x00\xa9\x68\x42\xf1\x75\x26\xbb\xc2\xc3\x58\x6d\x74\x36\x16\x32\xd9\x8a\xf5\x89\xd3\xaf\x15\x41\x70\xa8\x61\xef\xb5\x13\xf4\xe8\x44\x66\xbe\x5f\xa0\xf0\x3a\xbb\x5d\xe1\x61\xc0\x36\x3c\x0f\x20\xb2\xdb\x0a\x78\x91\x24\x54\x94\x74\xcc\x8c\x20\xb9\x60\x82\x0e\x13\x35\x86\x31\x40\xc3\x08\x42\x10\x26\x7b\xcd\xc2\x5d\x09\x23\x46\x38\x4c\xde\xf2\x6a\x39\x86\x5f\x2c\x8a\x0f\x43\xd1\x1a\x86\x33\x81\x60\xb1\xa1\xa5\xf0\x8c\x00\x13\xe6\x5e\xf1\xaa\x6c\x9a\xa6\x07\xb4\x8f\xa0\xb0\xa9\xd5\xcb\x9b\x0e\xb7\xb6\xcc\x28\xb6\x11\x90\x5b\x9c\x8f\x56\xbb\xed\xc6\x99\x75\x2b\x00\x19\x2c\x59\xb1\x78\x41\x60\xa4\x36\xa2\xc9\x18\x82\xbf\x03\x08\xa2\x60\x5f\xcf\x87\xdc\x39\x50\x29\x89\x05\x8e\x45\xdc\x37\x3b\x24\xd3\x16\xa5\x64\x4b\x64\x47\xc1\xec\x10\x30\x47\xd7\x2f\xde\x00\x6d\xe1\xf2\x78\xad\x62\x29\x64\x46\x0b\xfb\x12\x6e\xe8\x0b\xf6\x4f\xaa\x2f\x74\xca\xb8\x71\xf6\xb3\xa2\x90\x69\xa1\xae\xb7\x70\x3a\x9f\x65\x2b\xd1\x13\xc8\x9e\xc0\x25\x26\x7c\x3d\xd5\x03\x3c\xd7\x06\x6e\x21\x09\x4c\x01\x29\x3a\x03\x5f\x46\xd9\x37\x8e\x3e\x60\x65\x30\x00\x2c\x3b\xfd\x55\xd9\x5e\xa4\x89\xb3\x5a\xb6\x82\xa6\xd1\xff\xf3\xc3\x7f\x66\x35\x05\xd3\x8d\xed\x0e\xb9\x5f\xd6\x8a\xd7\x5e\xd9\x03\xf9\x78\xe2\xbf\x00\x00\x00\xff\xff\xf2\xe5\xb5\x94\xb8\x23\x00\x00")

func pkgTemplatesPartialsSchemaGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsSchemaGomd,
		"pkg/templates/partials/schema.gomd",
	)
}

func pkgTemplatesPartialsSchemaGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsSchemaGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/schema.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsSecurityGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbf\x4e\xc3\x40\x0c\xc6\xf7\x3c\xc5\xa7\xb4\x03\x44\xbd\x86\x19\x89\x81\x81\x0d\xb1\x94\x17\x38\x25\x4e\x39\xd4\x38\x55\xe3\x4a\xa0\xe4\xde\x1d\xf9\x9a\xff\x04\x09\x0f\x51\xe2\x9f\xed\xf8\xfb\xdc\x34\x06\x69\x82\x03\x65\xd7\x8b\x93\x6f\xbc\x53\x79\x3e\x59\x21\x24\x29\x8c\xf7\x91\xf2\x9c\x0a\xc7\x84\xb8\xee\x8a\xe2\x81\x5c\x2c\x1f\x09\x5b\xb6\x25\xed\xb0\xad\xb3\xea\x4c\x35\x1e\x9f\xb0\x87\xf7\x51\x8b\xa6\xb9\x31\x78\x8f\xf0\xf5\x59\x39\x1e\xea\xe2\x1d\xe2\x40\xc2\x28\xe2\xbc\x1b\x3a\xbe\xa5\x09\x5e\x38\x47\x55\xfc\xbd\x5f\xb4\x10\xf0\xea\x6a\x59\x11\xf1\x4b\x83\xd6\xe9\xdf\x23\x00\xd0\x19\xae\xb8\x6d\x8d\x2e\xba\xdc\x51\x70\x77\x22\xc6\xfe\x1e\x0f\x8a\x07\xae\xb1\xd9\xe0\xf9\x2a\x1f\xc4\xe2\x32\x2b\xae\xe2\x39\x6e\xdf\x6c\x49\xed\x21\xa8\x6d\xe7\xc4\x18\x63\xc2\xc3\x98\x39\x99\xb8\xea\x38\xa7\x2f\xb5\xb5\xd7\xde\x1b\x8b\x45\x68\x8f\xf4\x92\x27\x57\x1a\x3b\x17\x4d\xa3\xcb\xeb\x99\xff\xdf\x63\xcd\xee\x9f\x00\x00\x00\xff\xff\x45\xb9\xf2\x04\x53\x02\x00\x00")

func pkgTemplatesPartialsSecurityGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsSecurityGomd,
		"pkg/templates/partials/security.gomd",
	)
}

func pkgTemplatesPartialsSecurityGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsSecurityGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/security.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesSchemasGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x09\x73\x55\x57\x2b\x94\xa4\xe6\x16\xe4\x24\x96\xa4\x2a\x28\x15\x27\x67\xa4\xe6\x26\x2a\x29\xa4\x64\x26\x97\x28\x28\x05\x83\x79\x41\xa9\x69\x4a\x0a\x7a\x70\xb6\x82\x12\x48\xbb\x12\xd4\x14\xa5\x80\xa2\xd4\xe2\xcc\x94\xcc\xd2\xdc\xa0\xd4\xb4\xd0\x20\x1f\x25\x05\x3d\x34\x11\x90\x45\x80\x00\x00\x00\xff\xff\xf5\x76\x34\x32\x80\x00\x00\x00")

func pkgTemplatesSchemasGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesSchemasGomd,
		"pkg/templates/schemas.gomd",
	)
}

func pkgTemplatesSchemasGomd() (*asset, error) {
	bytes, err := pkgTemplatesSchemasGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/schemas.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesTagGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\x28\xc9\x77\x4e\xcc\x4d\xcd\x51\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x49\x73\x55\x57\x2b\xe8\xb9\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x81\xc4\xb9\xaa\xab\x75\x15\x32\xd3\x14\xf4\x5c\x2b\x4a\x52\x8b\xf2\x12\x73\x5c\xf2\x93\x8b\x41\x12\x0a\x0a\x0a\x0a\xd8\xe4\x30\x0c\x50\x80\x82\x68\x90\xe9\x78\x54\xc6\x6a\x60\x28\x08\x0d\xf2\x51\xa8\xad\xd5\x84\xdb\x95\x9a\x53\x9c\x0a\xb3\x1b\x04\x6c\x70\xe8\xb0\x43\xe8\xc8\x4b\x01\x69\x40\x30\x01\x01\x00\x00\xff\xff\xd8\x77\x01\x1a\x07\x01\x00\x00")

func pkgTemplatesTagGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesTagGomd,
		"pkg/templates/tag.gomd",
	)
}

func pkgTemplatesTagGomd() (*asset, error) {
	bytes, err := pkgTemplatesTagGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/tag.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/templates/index.gomd":                 pkgTemplatesIndexGomd,
	"pkg/templates/info.gomd":                  pkgTemplatesInfoGomd,
	"pkg/templates/operation.gomd":             pkgTemplatesOperationGomd,
	"pkg/templates/partials/content.gomd":      pkgTemplatesPartialsContentGomd,
	"pkg/templates/partials/headers.gomd":      pkgTemplatesPartialsHeadersGomd,
	"pkg/templates/partials/parameters.gomd":   pkgTemplatesPartialsParametersGomd,
	"pkg/templates/partials/request_body.gomd": pkgTemplatesPartialsRequest_bodyGomd,
	"pkg/templates/partials/responses.gomd":    pkgTemplatesPartialsResponsesGomd,
	"pkg/templates/partials/schema.gomd":       pkgTemplatesPartialsSchemaGomd,
	"pkg/templates/partials/security.gomd":     pkgTemplatesPartialsSecurityGomd,
	"pkg/templates/schemas.gomd":               pkgTemplatesSchemasGomd,
	"pkg/templates/tag.gomd":                   pkgTemplatesTagGomd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"index.gomd":     &bintree{pkgTemplatesIndexGomd, map[string]*bintree{}},
			"info.gomd":      &bintree{pkgTemplatesInfoGomd, map[string]*bintree{}},
			"operation.gomd": &bintree{pkgTemplatesOperationGomd, map[string]*bintree{}},
			"partials": &bintree{nil, map[string]*bintree{
				"content.gomd":      &bintree{pkgTemplatesPartialsContentGomd, map[string]*bintree{}},
				"headers.gomd":      &bintree{pkgTemplatesPartialsHeadersGomd, map[string]*bintree{}},
				"parameters.gomd":   &bintree{pkgTemplatesPartialsParametersGomd, map[string]*bintree{}},
				"request_body.gomd": &bintree{pkgTemplatesPartialsRequest_bodyGomd, map[string]*bintree{}},
				"responses.gomd":    &bintree{pkgTemplatesPartialsResponsesGomd, map[string]*bintree{}},
				"schema.gomd":       &bintree{pkgTemplatesPartialsSchemaGomd, map[string]*bintree{}},
				"security.gomd":     &bintree{pkgTemplatesPartialsSecurityGomd, map[string]*bintree{}},
			}},
			"schemas.gomd": &bintree{pkgTemplatesSchemasGomd, map[string]*bintree{}},
			"tag.gomd":     &bintree{pkgTemplatesTagGomd, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
