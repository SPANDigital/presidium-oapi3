// Code generated for package tpl by go-bindata DO NOT EDIT. (@generated)
// sources:
// pkg/templates/index.gomd
// pkg/templates/info.gomd
// pkg/templates/operation.gomd
// pkg/templates/partials/content.gomd
// pkg/templates/partials/headers.gomd
// pkg/templates/partials/parameters.gomd
// pkg/templates/partials/request_body.gomd
// pkg/templates/partials/responses.gomd
// pkg/templates/partials/schema.gomd
// pkg/templates/partials/security.gomd
// pkg/templates/schemas.gomd
// pkg/templates/tag.gomd
package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgTemplatesIndexGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\x0b\x01\x31\x15\x6a\x6b\xb9\x40\xe2\x80\x00\x00\x00\xff\xff\xff\xd8\xd2\xd8\x1c\x00\x00\x00")

func pkgTemplatesIndexGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesIndexGomd,
		"pkg/templates/index.gomd",
	)
}

func pkgTemplatesIndexGomd() (*asset, error) {
	bytes, err := pkgTemplatesIndexGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/index.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesInfoGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\xbd\x0a\x83\x30\x10\x07\xf0\x3d\x4f\x71\x90\x2d\x90\x3c\x80\x88\x4b\xdb\x4d\x5a\xb0\xda\x5d\x6c\x84\x80\x1f\x25\x06\x17\xf1\xdd\xcb\x9d\xa9\x1f\x69\x87\x3a\xe5\xfe\xf7\xf7\x17\x95\x52\x32\x67\x5c\xa3\x23\x98\x26\x50\x39\x1e\x61\x9e\x19\xe6\x8c\x73\x7e\x48\x61\x54\x38\x3e\xb4\x1d\x4c\xdf\x61\x8d\xe1\x7c\xd6\x43\x65\xcd\xcb\x6d\x99\x04\x53\x83\xca\xb5\x6d\x87\x5b\x7d\xd7\x76\x34\x15\xa9\x0c\x00\x80\x73\xa0\x0d\xf4\x35\xf8\x5d\x44\x8b\x98\xee\x0a\x5f\x4a\x16\x50\x77\x4f\x14\x3e\xf6\xa9\xef\x5c\x59\xb9\x3d\xea\x23\x1a\x83\x9a\xba\x96\x2d\x7d\x00\xf8\x47\x08\x4c\x84\x58\xfe\x3a\x6c\xad\x84\xbf\xf4\x97\x78\x69\x4b\xd3\x1c\x49\x8a\x42\x73\xed\xfd\x83\x16\x59\x7a\x24\x8b\x2c\x45\x30\xde\x8b\x4b\x29\xf9\x02\xb7\xe3\x3b\x00\x00\xff\xff\x36\xe9\x6b\x90\xd5\x01\x00\x00")

func pkgTemplatesInfoGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesInfoGomd,
		"pkg/templates/info.gomd",
	)
}

func pkgTemplatesInfoGomd() (*asset, error) {
	bytes, err := pkgTemplatesInfoGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/info.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesOperationGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x6a\x84\x30\x14\x46\xf7\x3e\xc5\xc5\xa5\x10\x1f\xa0\x8b\x2e\xca\x6c\x0a\xfd\x63\xa6\x0f\x60\xd0\xaf\x34\x60\x34\x4d\xae\x0b\xb9\xe4\xdd\xcb\x95\x8c\x16\x66\xba\x3c\xf9\x4e\x8e\x51\xc4\x90\xfb\xa2\xf6\x15\xfc\x3d\x0f\x9f\x8e\x47\x50\xce\x54\x19\x63\x2a\x56\x7a\x20\x91\xeb\xac\x8b\xd2\x9b\xf5\x6a\x6d\x92\x08\xc6\x84\x02\x7f\x6e\xbc\x07\x44\xcb\x6e\x9e\x9e\x4f\x87\x6a\x08\xd3\x90\x73\xd5\x75\x5d\xf5\x7f\x56\x57\x9d\xf5\x5d\x27\x84\x88\xde\x32\xd4\x6a\x9a\x03\x9b\xa6\xe4\xf4\x46\x91\x2f\x8b\xf7\x36\xae\xda\x7b\x14\xb9\xe2\x56\xdf\xd5\x23\x9c\xfa\xe8\x82\xbe\x90\x72\xd6\xcf\xdf\x9c\xec\x71\x43\x0c\x1f\x46\xcb\xa0\x3a\xd8\x68\x3d\x18\x31\xbd\xb8\xc4\x35\xb5\x1f\xfb\xc1\xad\x1c\xf1\xb3\x20\xf1\xd3\x3c\xac\x35\xb5\xe7\x83\xee\xa9\x29\xcc\x53\x42\xa9\x9e\x0b\xde\x89\x26\xf4\x4b\x74\xbc\x16\xf3\x52\x70\xfb\xb9\xdf\x00\x00\x00\xff\xff\x39\x4e\xed\xbc\xcf\x01\x00\x00")

func pkgTemplatesOperationGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesOperationGomd,
		"pkg/templates/operation.gomd",
	)
}

func pkgTemplatesOperationGomd() (*asset, error) {
	bytes, err := pkgTemplatesOperationGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/operation.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsContentGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x6e\x83\x30\x10\x44\xef\x7c\xc5\xc8\xe4\x84\x9a\x70\xaf\xd4\x53\xdb\x63\x15\x29\xcd\x07\xc4\xc5\x43\x83\x54\x96\x14\xdc\x43\x84\xf6\xdf\x2b\xc0\xc1\x56\xaa\x72\x42\x9e\xe7\xdd\x79\x1e\xc7\x2d\xca\x02\xcf\x9d\x78\x8a\x87\x67\x7b\xf9\xb2\x9e\x28\x4a\x6c\x55\xb3\x29\x76\xac\x1b\x21\x4c\xb5\x30\x46\x35\x03\x80\x29\xea\xad\x7c\x12\x1b\xb1\x2d\x1f\xb0\x69\xe9\x1a\x7b\xbc\x5e\x88\xc7\x27\xec\xa0\x9a\xcd\xe0\xf4\xe5\x79\x8e\xd3\x38\xce\xa4\xea\x29\x06\xd3\x94\x75\xa9\x59\x27\x98\x64\x5a\xb2\x8f\xe2\x42\xa9\xf8\x57\x16\x78\x15\x87\xae\xfe\x57\xe2\x86\x1d\x28\x8e\xfd\x00\x8b\xb7\xb5\x69\xe2\x59\x16\x38\xee\x5f\xf6\x01\x83\x3f\x13\x73\x07\xdc\x83\xb7\x07\x89\x6d\x93\x8a\x4d\x8d\xdd\x7b\x75\x66\x6b\x11\x4e\x97\x24\xb1\x1c\xe6\xd8\xc0\x35\x95\x87\x59\xe0\x03\x6b\x73\x7f\x31\x78\x22\x2a\xe3\x8f\x73\xcf\xef\x1f\x0e\x1e\x1f\x9d\xbb\x86\x8e\xbf\x01\x00\x00\xff\xff\xd2\xed\x50\x80\xd3\x01\x00\x00")

func pkgTemplatesPartialsContentGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsContentGomd,
		"pkg/templates/partials/content.gomd",
	)
}

func pkgTemplatesPartialsContentGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsContentGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/content.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsHeadersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x31\x4f\xf3\x30\x14\xdc\xfb\x2b\x4e\x51\x87\xef\xb3\x68\xcb\x8c\x80\x09\xa4\x0e\x85\xa1\x54\xec\x26\x7e\x6e\x2d\x25\x4e\x70\x5c\x21\xf4\xe2\xff\x8e\x9c\xa4\xc1\xa1\x74\x20\x93\x75\xef\xce\x79\x77\x67\xe6\x05\x56\x02\x6b\x92\x8a\x1c\x76\x54\xd6\x85\xf4\x04\xb1\xc2\x22\x84\x19\xb3\x22\x6d\x2c\x21\x3b\x74\x84\xac\x43\x01\x20\xea\xe6\x3d\x88\x9b\x3b\x2c\x5f\x65\x71\x24\xa4\x43\x47\xba\x9b\x6c\x49\xa7\xb8\xd1\xa3\x6e\x40\xcf\x27\xcb\x2d\xbd\x1f\x8d\x23\x85\x10\x70\xfb\xe6\xee\x21\xdc\x80\x08\x30\x93\x55\x21\x80\x39\x55\x3c\x50\xed\x28\x97\x3e\xd5\xa8\x11\xfb\x56\xb5\x60\xf6\x27\x97\x59\x55\x93\x93\xde\x54\xf6\x25\x3f\x50\x29\x77\x9f\x35\x65\xe3\x95\x3d\x86\x4e\x24\xe2\x82\xbe\x5a\xef\x9e\x36\xcf\xf4\xb1\x31\x96\x9a\xe4\xd7\x4d\xee\x4c\x1d\xaf\x89\xf1\x08\xb4\xa3\x59\xb2\x71\x9d\xd9\x70\x1c\x4e\x2b\x81\x47\xab\x50\xe9\x4b\xa9\xcf\x26\xa5\x6c\x4c\xe3\xe1\xcf\x8a\xc1\xb4\x99\xc8\x9a\xb6\x63\x34\xf6\x1e\xff\x0a\xb2\x58\xfe\xc7\xf5\xcf\xb4\x9d\xb4\x7b\xc2\xdc\xca\x92\xae\x26\x4d\x26\xbc\xf8\xb5\x10\x82\xb9\x27\x22\x04\x21\x26\x01\x9e\x9e\xc5\x85\x4a\x07\xff\x7f\x8a\xe3\x57\xbf\x5f\x01\x00\x00\xff\xff\xe6\x6d\x44\x2a\xa7\x02\x00\x00")

func pkgTemplatesPartialsHeadersGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsHeadersGomd,
		"pkg/templates/partials/headers.gomd",
	)
}

func pkgTemplatesPartialsHeadersGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsHeadersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/headers.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsParametersGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\xae\xd3\x30\x10\xbc\xe7\x2b\x46\x69\x0f\x60\xd1\x94\x33\x02\x4e\x20\x51\xa9\x54\xa8\x54\xdc\x4d\xb2\x69\x2c\x35\x4e\xb0\x5d\x0a\x4a\xfc\xef\x4f\x9b\xba\x89\xd3\x57\xbd\xe7\x43\x62\xed\xec\xac\x77\x77\xa6\xeb\x56\x58\x0b\xb8\x4a\x59\x38\xaa\xdb\x93\x74\x04\x43\x39\xa9\xbf\x64\x21\xf1\x43\x1a\x59\x93\x23\xb3\xa7\x12\x97\x4a\xe5\x15\xf2\x46\x3b\xa9\x34\xa3\x1c\x94\xba\x88\xf3\x20\xd6\x58\x79\x9f\x70\xe1\x82\x4a\xa5\x09\x69\x7b\x03\x53\x78\x9f\x00\x00\xa3\xcb\x31\x8c\x0f\x9f\x90\xfd\x92\xa7\x33\xcd\x70\x43\xe5\x80\xf0\x2b\x51\x5c\x95\x31\x35\x00\x7c\x7a\x08\xd1\x75\x11\x98\xed\x64\xcd\x25\x85\x78\x80\x6d\xf4\x15\xe9\xba\x79\xc5\x6c\x4f\x7f\xce\xca\x50\x01\xef\xf1\xf1\xb7\xf9\x0c\x61\x42\x84\x93\x49\x17\xde\x3f\x27\x7d\xa1\xd6\x50\x2e\x5d\x4c\x2b\xc6\xd8\x44\xec\x87\x11\xc6\x4d\xa7\x4d\x4b\x46\x3a\xd5\xe8\x9f\x79\x45\xb5\x3c\xfc\x6f\x29\x8d\xeb\x5e\xc3\x08\x4c\xb8\xe6\xdb\xe1\xfb\x76\x47\x97\xad\xd2\x64\xe7\x0d\xd8\xdc\xa8\x96\x4b\x71\xf2\xb8\x2d\xd2\xdc\x51\x12\xae\xe1\xb6\x16\xf8\xaa\x0b\x34\x25\xda\x7b\xdd\x92\xd7\x1c\xb1\x55\xd6\x31\x73\xe6\x8c\x97\x44\xb7\xcc\x48\xef\x14\x3c\x3a\xbc\x39\x91\x46\xf6\x16\xef\x19\x1a\x45\x5c\x2c\xc0\x02\x90\x75\xd3\x0b\x36\x89\x34\x1e\x34\xed\xb1\xd1\xe8\xc1\xeb\x42\x8f\x68\xf6\x30\xf9\x90\xba\x1a\x4e\x3f\x7e\xc6\x5f\x38\x53\x2a\x37\x65\xa4\x3e\x12\x96\x4a\x17\xf4\xef\xdd\xbd\x39\x23\x97\xdd\xf2\x27\x0d\x23\x7b\x3f\x36\x66\xa4\x43\xd8\xc1\x24\x4b\x2c\xd0\x24\xcb\x34\xfa\x75\xdf\x61\xbf\x4f\x01\x00\x00\xff\xff\x1b\xaf\x66\x09\xae\x03\x00\x00")

func pkgTemplatesPartialsParametersGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsParametersGomd,
		"pkg/templates/partials/parameters.gomd",
	)
}

func pkgTemplatesPartialsParametersGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsParametersGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/parameters.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsRequest_bodyGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcb\x6e\x83\x30\x10\xbc\xf3\x15\x23\x92\x13\x2a\xe4\x1e\x29\x97\x3e\x8e\xed\x81\x56\xbd\xbb\xb0\x04\x4b\xc1\xa6\xe0\xb4\x8a\x8c\xff\xbd\x32\xaf\xda\x2e\xf5\xc9\xbb\x33\xb3\xf6\x7a\xd6\x5a\xa7\x38\x24\x50\x35\xef\xa1\xa8\x69\x2f\x4c\x11\x3a\x2a\x88\x7f\x51\x0f\x86\x9c\xce\x57\xea\xd5\xbd\x2c\x6f\x39\x55\xf8\xae\x79\x51\xa3\x90\x42\x31\x2e\x26\xbc\x02\x13\x25\x18\xde\xd9\xe5\x4a\x48\x0e\x48\x8d\x89\x6c\xd9\x92\x2a\x2e\x08\x71\x47\x9f\x4b\x89\xd8\x98\x08\x00\x2c\xcc\x2b\x64\x70\xe2\xbd\xc3\xc3\xf1\x84\x6c\x2c\xe8\x13\xaa\x11\xc8\xa9\x9a\xd3\x4e\x2d\x4f\xee\xc0\x76\xed\x76\xc8\x27\x14\x16\x8e\x3c\x50\xeb\x50\x9e\x59\x32\xef\xa8\x84\x31\x49\xb2\x04\x49\xa2\x35\x5d\x7a\xb2\xb9\x17\xa9\xe0\xe5\x45\x69\x8c\x5f\x76\xc0\x33\x95\x9c\xbd\xdd\x5a\xc2\x80\x47\xea\x8b\x8e\xb7\x8a\x4b\x81\x01\xaf\x45\x4d\x0d\xc3\xe0\x0b\xd2\xdf\xe5\xee\x9d\x68\x08\x2e\x9e\xa2\x63\xe2\x4c\xd8\x0b\xd6\xd0\x1d\xf6\xcd\x7a\xe2\xf1\xe4\x77\xf4\x20\x85\x22\xa1\xc2\x87\x71\xdf\x6f\x15\x67\xf3\xf5\x36\xb8\xab\x15\xfd\x48\xc9\x27\x43\xfe\x48\x03\x87\xfe\x51\x6f\x4b\x5d\xd7\xc3\x35\x40\xeb\xb1\x57\x63\xc6\xbd\xdf\xa3\xfb\xc6\x0b\x61\x1d\xe9\x58\xb6\xd4\x31\x8b\x4d\xe7\xd8\x23\xe3\xcd\xa6\x03\x5b\x96\x4b\x4f\x16\x6f\x67\xa3\x20\xe5\x8e\xf5\x1c\x06\xdb\x43\x82\x27\x51\x42\x56\x98\x3b\xc0\x87\x9d\xdb\xf9\xf7\xfc\x04\x00\x00\xff\xff\x24\xd9\x72\x61\x95\x03\x00\x00")

func pkgTemplatesPartialsRequest_bodyGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsRequest_bodyGomd,
		"pkg/templates/partials/request_body.gomd",
	)
}

func pkgTemplatesPartialsRequest_bodyGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsRequest_bodyGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/request_body.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsResponsesGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x3c\xec\x1c\xda\xb0\x71\x7a\x2e\xf4\xb4\x2d\xe4\x90\x5d\x4a\x36\xf4\x2e\xe2\xf1\xae\x21\x91\x8d\xa5\xa5\x94\xc8\xff\xbd\xd8\x92\xf5\x65\x25\xb4\x1b\x08\x48\xd6\x9b\x91\xe6\xbd\x37\x73\xbd\x6e\xb0\x5d\xe3\x40\xa2\x6b\xb9\x20\x48\xba\x74\x67\x26\x09\xeb\x2d\x36\xc3\x90\x8d\xe7\x15\xd5\x0d\x27\xe4\xbd\x01\xe5\x18\x86\x0c\x00\xc6\xc3\x55\x4f\x35\xbe\x7e\x43\x39\xa7\x28\x0f\x54\x47\x00\x93\x3b\x40\xfd\x62\xe7\x77\x0a\x70\x42\x32\xf9\x2e\x26\xd4\x8b\x5e\x7a\xa7\x4d\xed\x12\x95\x8f\x2d\x97\xc4\xe5\x7c\x3e\x63\x7a\xc6\x5f\x09\x2b\xce\x2e\xf4\x80\xd5\x85\xaa\x86\x1d\xff\x74\xd3\xbd\x77\x63\xfd\x3b\x6c\x54\xf9\x72\x7a\xa3\x0b\x8b\x71\xee\xb5\xd3\xf1\x41\x17\xbf\x08\x1b\x49\xb8\x1f\x99\x0e\x9b\x58\x49\x04\x2a\x5c\xaf\x86\xa0\x61\x98\x76\x90\xed\xee\xf8\xb4\x7f\xa6\xdf\xfb\x86\x93\xf0\x2a\xfc\x4e\xe2\xd4\x37\x9d\x6c\x5a\x8e\x19\x3c\x91\x62\x77\x56\xe4\xbc\xed\xa8\x67\x23\x52\xdf\x3f\x3e\x25\x4f\x92\x00\xb5\xa0\x8b\x78\x15\x09\xa0\xbf\x58\xcd\xe8\x2c\xc8\xe7\x2f\x51\xc4\x9d\x57\x6f\xf4\x3f\x0b\x93\x9b\x15\xcc\x72\xbb\xc6\x0f\x5e\xa1\xad\x6f\x3b\x38\x8b\x2c\xbe\x6f\x84\xfc\x27\x9b\x8f\x40\xcf\xea\xa3\x3d\x5e\x25\x3e\x9d\x89\xa3\xfc\x8c\x2f\x7e\x65\x45\x61\xd3\x8b\xcc\xab\x77\x77\x3c\xfe\xc4\x63\x5b\x11\x14\xfc\x02\x15\x9e\xac\x3b\x15\x0c\xc9\x8e\x61\xb5\x71\x3f\x7f\x1d\xee\xec\x5a\xa5\xba\x40\xf3\xfc\x10\xb5\x5f\xca\xf6\xce\x0d\xae\xc1\xab\xe6\x24\x91\x1f\xec\xde\x65\xc9\x75\x6f\xe6\xb6\x5f\x97\x1e\xc0\x6c\x82\x0f\x3f\x69\x1e\x2a\xce\x1e\xde\x50\x89\x80\x1a\xa0\xc7\x49\x10\x12\x4c\x98\xa8\xcf\x67\x21\xc3\xf8\x72\x47\xac\xa2\x5e\x18\x75\x17\x5d\x58\x14\x45\x31\xb9\xd6\x96\x0e\x13\xb1\xc4\x2a\x3c\x8f\x2d\xa7\x60\x44\x0e\xe4\x5f\xa2\x03\x49\x23\xcd\x93\x63\xc4\xa9\xf6\x36\x3d\x41\xbb\x35\x5d\x4f\x8a\x04\xa3\xd3\x8d\x4f\x51\x9b\xfd\x5f\xc7\xfd\x0d\x00\x00\xff\xff\xed\xb6\x1c\x3b\x54\x06\x00\x00")

func pkgTemplatesPartialsResponsesGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsResponsesGomd,
		"pkg/templates/partials/responses.gomd",
	)
}

func pkgTemplatesPartialsResponsesGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsResponsesGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/responses.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsSchemaGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x38\x50\xf2\x60\x0b\x95\xbd\xbe\x1a\xcb\x80\xa0\xeb\xb0\x02\x69\x13\x38\xed\x5e\x8a\x62\x50\xac\xa3\x84\x1b\x4d\xb9\xba\xb4\x31\x64\xfd\xf7\x81\xa4\x28\x5e\x44\xf9\x92\xc4\xe9\xda\x97\x58\xe4\xe1\xc7\x73\xc8\x73\x3e\x7e\xa2\x5a\xd7\x11\x24\x98\x12\x86\x10\x14\x8b\x7b\x5c\xc6\x41\xd3\x9c\x00\x00\xf0\x9e\xb3\x1c\x53\x98\x9d\xc3\xe4\x46\x74\xcd\x31\x9d\xcc\x31\x05\xd3\x42\x0e\x72\x8c\xfe\x8a\x69\x85\x96\xd9\x2a\xc7\x82\x24\xa4\x5a\xce\x31\xfd\x34\xbf\x14\xf6\xd7\x4e\x9b\x69\xcf\xe2\x25\x0a\xa3\x0f\xfc\x87\xd1\x33\x0d\xe1\x5d\x0a\xe5\x3d\x29\xa0\x9d\x9a\x14\x10\x43\x8e\x29\xe6\xc8\x16\x08\xe1\x14\x22\xc3\x9e\xa4\xc0\xb2\x52\x46\xd2\x34\x27\xa2\xdd\xe8\x8b\x59\xd2\xc5\xd0\xfe\x9d\xfc\x8e\xc5\x22\x27\xab\x92\x64\x0c\x9a\x06\xc2\xd0\x68\x98\x85\x21\xfc\x7a\x9b\xff\x06\x75\x3d\x64\xaf\xba\x91\x25\xce\x8c\x7c\x42\x35\xe8\xe3\x7a\xd5\xc5\xb5\x87\x4f\xad\x39\x84\x21\xff\xc5\xbd\x30\x1c\x50\x9d\xe6\xcc\x51\xd3\x28\x3c\x65\x36\xc7\x38\xb9\x62\x74\x2d\x71\xf8\x13\xf0\x47\x1d\x51\x34\x34\xf2\x43\x45\x69\x7c\x4b\x5b\x0f\xd4\x93\x67\xe0\x89\x13\x0f\x94\xb8\x5c\xd1\xb8\x44\x08\x72\x2c\xca\x9c\x2c\xf8\x2a\x15\x41\x17\x9f\xb1\x02\x5e\x18\x7b\xd1\xae\xf3\x6c\x85\x79\x49\xb0\x00\x77\xae\x30\xd4\x9d\xb3\x30\xdc\xe2\xc8\xaa\xb3\x0b\x20\x21\x8b\x12\x02\x99\xb8\xda\xa9\xc0\xc9\xcc\xa0\x9f\xbf\xc1\x3c\xcb\x4a\x9e\x9b\x41\x9b\xab\x5b\x63\x27\x8c\x12\x86\xd7\x47\x9f\xd8\x9f\x75\x66\xe8\x84\x95\x6f\xaa\x98\x95\x24\x25\x98\x3f\xab\x1f\x81\xcf\x29\xb5\xa7\x4d\x73\x62\x6d\xaf\x49\x3b\xe6\x7e\xe8\x71\xbc\x62\xbf\x56\x24\xc7\xc4\xe0\x96\xc9\x5c\xb5\x75\x15\x0e\x67\x55\x4e\xb7\xd3\x09\x9c\xe5\xad\xaf\xc2\x4e\x39\xae\x0c\x36\x20\x9e\x36\x20\xca\x68\x03\x66\x39\x6f\x60\x6e\xa4\x2d\x6c\xe4\x80\x48\xfc\xb3\xff\x44\xbe\xa7\x68\xd3\xad\x42\x1e\xb3\x3b\x94\xab\xf3\x8a\xaf\xa6\x88\x79\x6d\xc6\x66\x27\xb7\x59\x15\x67\xdf\x04\x9f\xce\xce\xf5\x40\x9b\x62\x3b\xc3\xf2\x1e\xe7\x92\xb2\xb5\xa5\xc1\xd8\x32\x5c\xbe\x22\x62\x97\x22\xab\xd9\xe2\x9f\x91\x20\x4d\x09\x37\x86\x11\x7e\x6d\x9d\x90\x5c\x13\x64\xb7\xff\xe0\xa2\x0c\xc6\xaa\xd5\xf0\x3d\x72\x48\x8d\xff\xfb\x5c\xd7\x62\xc6\xa6\xf9\x32\xaa\xeb\xa0\xae\x0b\x52\xe2\xe4\x36\x2e\xb0\xca\x69\xd3\x04\x4d\x53\xd7\x67\xe2\xe7\x74\x91\x2d\x57\x19\x43\x56\x16\x53\x99\x8c\xc5\xf4\x94\xfb\x65\x10\x89\x4e\xbc\x5c\x6f\x65\x54\xd7\x40\xb3\xef\x98\x77\x19\x38\xee\x71\x2b\xd2\xa2\xc7\xb9\xaa\x4f\xe3\xcb\x69\x79\x9c\xaa\x3c\xda\xe8\xd6\x81\xb1\x71\x56\xba\x9b\xc5\xd0\xf9\xe4\x29\x22\x9e\xaa\xbe\xf5\x69\x17\x7e\x44\xd8\x4d\x99\x13\x76\x77\x43\xc9\x02\x8d\x0a\x10\xb3\x8c\x3b\x8a\xe7\xe4\x2d\x7b\xc4\x39\xa0\xeb\x6a\x00\xb7\xdd\x24\x93\xff\x3b\x1c\x7d\x08\xec\x0f\x64\x1e\x07\x2d\x90\x71\x26\x0c\xe1\xf8\xda\x37\x8a\xe0\x25\xb0\x73\x92\x72\xee\xca\xfe\xfc\xf8\xfe\xf2\x03\x7e\xbf\x24\x0c\x8b\x61\x3b\x2f\xf0\xe0\xe1\xf3\xad\x2d\x1e\xd8\x9c\xb8\x9e\x0d\xd2\x54\x9f\xc3\x5f\x9a\xac\x9e\x87\x4b\x94\xa4\x73\x68\xc1\xe6\x19\x4d\x2f\x3e\xc1\x34\x52\x8a\xea\x30\x66\x70\xf2\xe1\xf4\x54\x33\x91\x9b\x2a\x33\x78\x64\xd1\x83\x9b\x73\xbd\xc2\xb6\xcf\xbc\x39\xa6\xc3\x55\xed\x2f\xe0\x01\xc9\xe2\x3e\xff\x90\xdd\x32\xe2\x56\x7b\x95\xe5\x6a\x2b\x2e\x28\xbd\xea\x4a\xed\x82\xad\xf5\xc3\x15\xc3\x2b\xbe\x99\x7a\x5f\x5f\x68\xaf\xdc\xcd\x7a\x4e\x2a\xd8\xa6\x00\x77\xc8\x20\xb9\xb2\x03\xfb\xef\x27\x7b\x47\xfd\x18\xf3\xb6\xfa\x67\x6f\xa2\xe9\x7b\x67\x90\x43\xef\x75\xcb\xe8\x3b\xe8\x1d\x6b\xf0\x15\x6b\x87\x5a\xb2\x05\xb9\x48\x1c\xd5\x15\x86\x57\x0c\xe1\x2a\xe5\xf2\xbb\xb7\xe6\x8b\xa1\xe5\xd6\x2f\x03\x2d\xda\x81\xe2\x73\xeb\x16\x38\x82\xd8\x76\x5e\xd6\x43\xe7\xfc\x05\xa5\x4f\x71\x5e\xa2\xbd\x9c\xf3\xa2\x7e\xb5\xf3\x6c\xfd\x24\xe7\x05\xda\x71\x9c\x1f\x4c\xf4\x85\x93\xe3\xcf\xa6\xe8\x07\xb3\xfb\xb1\x1a\x7f\x4f\x71\x4f\x92\x07\x3f\xc3\xf7\x79\x5d\xaa\x89\x37\x59\xc5\x4a\x6e\xf7\xfa\xb8\x8a\xff\x98\xd2\xfe\x9d\x88\x04\x64\xa0\x50\xd7\x66\x68\xcf\xa2\xf7\x7d\x19\x27\x8e\x13\xe3\x34\x69\x9a\x48\x4e\x1b\x49\x90\xc8\xf5\x63\xec\x95\xb4\xd6\x36\x9c\x43\x51\x2d\xed\xa6\xd7\xbe\x1b\x9a\xff\xe5\x5b\xc4\xcf\x21\xae\x8f\x58\x30\x3f\x54\xd6\x3a\x5a\xe9\x14\xdc\xa2\xb0\xfd\x7f\xbc\x82\x3a\x24\xe5\x9f\x49\x0a\xef\xca\xc4\x3d\xe5\x70\xef\x14\x98\x86\xa0\x6b\x04\x3e\x2a\xd7\xda\xeb\xdb\xfe\xbd\xb4\x2c\x25\xdf\xe5\xf4\xb5\x87\xf7\xdc\xbb\xe9\x6b\x2f\x8b\x6e\xbf\x6a\xde\x75\xc8\x44\x7b\x9c\x54\xf2\xb5\xd9\x77\xf9\x2c\x9d\xbb\x24\xec\x5f\xbb\xbf\xa3\x18\x7d\xd8\xbb\x6b\x4c\x52\xe0\xf9\x69\xde\xfe\x06\x71\x9e\xc7\xeb\xa0\xc7\x0b\x9f\x0f\x60\xa5\x16\xef\x5d\x89\xcb\xe2\x49\xcc\xf4\xe5\xa4\xc7\x97\xea\x1a\xde\xf4\xd9\xe3\xeb\x0b\xdc\x12\x59\x25\x34\xee\x7b\xea\x21\x56\xf7\x9e\xdd\xb9\x1d\xff\x23\xcb\x97\x31\xaf\x6a\x18\xd5\xb5\xdd\xd8\x34\x63\xa8\x6b\x64\x89\xa7\x4a\xec\x22\x31\x4a\xa4\xfd\x39\x0d\xe1\x2d\x4b\x20\x4b\xb7\xd5\x89\xb2\x34\x39\x58\xaf\x82\xa7\x98\x6c\xb2\x8e\xf4\x5c\x73\x64\x09\xe6\x10\x53\x6a\x83\xf5\xbf\xa7\x4c\xde\x57\xb4\x24\x2b\x2a\xa5\x3f\x84\xa1\x7a\x86\x2c\x0d\xc3\x19\x67\x1a\xc7\xa4\xf7\x99\xc0\x42\x8b\x1f\x5a\x98\xf8\x81\x2c\xab\x65\x07\x21\xdb\xb7\x8e\x7d\xfb\xb0\xa0\x55\x41\xbe\x61\x07\xd2\xb5\xc0\x52\xc3\x95\x79\x85\x3b\x9c\x20\xed\xb7\x9e\xf7\x84\x59\x4e\x10\x76\x80\x13\x0a\xc4\x70\x42\xc3\xed\xe1\x44\xfc\x70\x89\xec\xae\xbc\xb7\xd6\x03\xa8\x68\x33\x96\x45\x1b\xed\x8a\xc9\x82\x93\xae\xb8\x70\xa6\xd1\x56\xb8\xeb\xb8\x2c\x31\x6f\x23\x6c\x1f\x14\x8a\xd1\xb7\x2b\x42\x49\x2f\x56\x80\x84\x37\x19\xf1\x75\x26\xbb\xc2\x33\xb1\xda\xe8\x6c\x2c\xc3\x64\x2b\xd6\x27\x46\xbe\x56\x68\xc0\x19\x0d\x7b\xef\x1d\xa7\x52\x27\x32\xfd\x6d\xc3\x08\xaf\xb3\xdb\x15\x9e\x09\xd8\x86\xe7\x01\x34\xec\xb6\x02\x5e\x24\x09\xe1\x25\x1d\x53\x2d\x5e\x2e\x28\xa7\xc3\x44\xce\xa1\x0d\x8c\x69\x38\x21\x70\x93\xbd\x56\xe1\xae\x84\x11\x45\x06\x93\xb7\xac\x5a\x8e\xe1\x17\x8b\xe2\xc3\x90\xb7\x86\xe1\x8c\x23\x58\x6c\x68\xa9\x41\x2d\xd6\xb8\xb9\x57\xe8\x4a\x9b\xa6\xe9\x01\xed\x23\x3e\x6c\x6a\xf5\xf2\xa6\xc3\xad\x2d\x33\xf2\x63\x04\xc4\x71\xe8\xa3\xd5\xee\xb8\x71\x56\xdd\x0a\x40\x04\x8b\x2b\x1a\x2f\x10\x46\xf2\x20\x9a\x8c\x21\xf8\x3b\x80\x20\x0a\xf6\xf5\x7c\xc8\x9d\x03\x55\x15\xdf\xe0\x98\xc7\x7d\xb3\x43\x5e\x6d\x51\x55\xb6\x9c\x76\xd4\xce\x0e\xb1\x73\x74\xad\xe3\x0d\xd0\x16\x39\x8f\xd7\x2a\x96\x9a\xa6\xa4\xb0\x2f\xec\x86\xbe\x6e\xff\xa4\xfa\x42\xa5\x8c\x1b\x67\x3f\x2b\x0a\x91\x16\xf2\x2a\xcc\x4c\xe7\xb3\x6c\xc5\x7b\x02\xd1\x13\xb8\xc4\x64\x5e\x65\xf5\x00\xcf\x95\x81\x5b\x48\x1c\x93\x43\xf2\xce\xc0\x97\x51\xf6\xed\xa4\x0f\x58\x1a\x0c\x00\x8b\x4e\x7f\x55\xb6\x97\x6e\xfc\xbd\x2e\x5b\x41\xd3\xa8\xff\x15\xe2\x7f\xbf\xd5\x05\xd3\xcd\xed\x4e\xb9\x5f\xd6\xf2\x61\xaf\xec\x89\x7c\x3c\xf1\x5f\x00\x00\x00\xff\xff\x36\xfb\xea\xd9\xd4\x23\x00\x00")

func pkgTemplatesPartialsSchemaGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsSchemaGomd,
		"pkg/templates/partials/schema.gomd",
	)
}

func pkgTemplatesPartialsSchemaGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsSchemaGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/schema.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPartialsSecurityGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbf\x4e\xc3\x40\x0c\xc6\xf7\x3c\xc5\xa7\xb4\x03\x44\xbd\x86\x19\x89\x81\x81\x0d\xb1\x94\x17\x38\x25\x4e\x39\xd4\x38\x55\xe3\x4a\xa0\xe4\xde\x1d\xf9\x9a\xff\x04\x09\x0f\x51\xe2\x9f\xed\xf8\xfb\xdc\x34\x06\x69\x82\x03\x65\xd7\x8b\x93\x6f\xbc\x53\x79\x3e\x59\x21\x24\x29\x8c\xf7\x91\xf2\x9c\x0a\xc7\x84\xb8\xee\x8a\xe2\x81\x5c\x2c\x1f\x09\x5b\xb6\x25\xed\xb0\xad\xb3\xea\x4c\x35\x1e\x9f\xb0\x87\xf7\x51\x8b\xa6\xb9\x31\x78\x8f\xf0\xf5\x59\x39\x1e\xea\xe2\x1d\xe2\x40\xc2\x28\xe2\xbc\x1b\x3a\xbe\xa5\x09\x5e\x38\x47\x55\xfc\xbd\x5f\xb4\x10\xf0\xea\x6a\x59\x11\xf1\x4b\x83\xd6\xe9\xdf\x23\x00\xd0\x19\xae\xb8\x6d\x8d\x2e\xba\xdc\x51\x70\x77\x22\xc6\xfe\x1e\x0f\x8a\x07\xae\xb1\xd9\xe0\xf9\x2a\x1f\xc4\xe2\x32\x2b\xae\xe2\x39\x6e\xdf\x6c\x49\xed\x21\xa8\x6d\xe7\xc4\x18\x63\xc2\xc3\x98\x39\x99\xb8\xea\x38\xa7\x2f\xb5\xb5\xd7\xde\x1b\x8b\x45\x68\x8f\xf4\x92\x27\x57\x1a\x3b\x17\x4d\xa3\xcb\xeb\x99\xff\xdf\x63\xcd\xee\x9f\x00\x00\x00\xff\xff\x45\xb9\xf2\x04\x53\x02\x00\x00")

func pkgTemplatesPartialsSecurityGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPartialsSecurityGomd,
		"pkg/templates/partials/security.gomd",
	)
}

func pkgTemplatesPartialsSecurityGomd() (*asset, error) {
	bytes, err := pkgTemplatesPartialsSecurityGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/partials/security.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesSchemasGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x09\x73\x55\x57\x2b\x94\xa4\xe6\x16\xe4\x24\x96\xa4\x2a\x28\x15\x27\x67\xa4\xe6\x26\x2a\x29\xa4\x64\x26\x97\x28\x28\x05\x83\x79\x41\xa9\x69\x4a\x0a\x7a\x70\xb6\x82\x12\x48\xbb\x12\xd4\x14\xa5\x80\xa2\xd4\xe2\xcc\x94\xcc\xd2\xdc\xa0\xd4\xb4\xd0\x20\x1f\x25\x05\x3d\x34\x11\x90\x45\x80\x00\x00\x00\xff\xff\xf5\x76\x34\x32\x80\x00\x00\x00")

func pkgTemplatesSchemasGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesSchemasGomd,
		"pkg/templates/schemas.gomd",
	)
}

func pkgTemplatesSchemasGomd() (*asset, error) {
	bytes, err := pkgTemplatesSchemasGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/schemas.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesTagGomd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\xa8\xae\x56\x28\xc9\x77\x4e\xcc\x4d\xcd\x51\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x49\x73\x55\x57\x2b\xe8\xb9\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x81\xc4\xb9\xaa\xab\x75\x15\x32\xd3\x14\xf4\x5c\x2b\x4a\x52\x8b\xf2\x12\x73\x5c\xf2\x93\x8b\x41\x12\x0a\x0a\x0a\x0a\xd8\xe4\x30\x0c\x50\x80\x82\x68\x90\xe9\x78\x54\xc6\x6a\x60\x28\x08\x0d\xf2\x51\xa8\xad\xd5\x84\xdb\x95\x9a\x53\x9c\x0a\xb3\x1b\x04\x6c\x70\xe8\xb0\x43\xe8\xc8\x4b\x01\x69\x40\x30\x01\x01\x00\x00\xff\xff\xd8\x77\x01\x1a\x07\x01\x00\x00")

func pkgTemplatesTagGomdBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesTagGomd,
		"pkg/templates/tag.gomd",
	)
}

func pkgTemplatesTagGomd() (*asset, error) {
	bytes, err := pkgTemplatesTagGomdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/tag.gomd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/templates/index.gomd":                 pkgTemplatesIndexGomd,
	"pkg/templates/info.gomd":                  pkgTemplatesInfoGomd,
	"pkg/templates/operation.gomd":             pkgTemplatesOperationGomd,
	"pkg/templates/partials/content.gomd":      pkgTemplatesPartialsContentGomd,
	"pkg/templates/partials/headers.gomd":      pkgTemplatesPartialsHeadersGomd,
	"pkg/templates/partials/parameters.gomd":   pkgTemplatesPartialsParametersGomd,
	"pkg/templates/partials/request_body.gomd": pkgTemplatesPartialsRequest_bodyGomd,
	"pkg/templates/partials/responses.gomd":    pkgTemplatesPartialsResponsesGomd,
	"pkg/templates/partials/schema.gomd":       pkgTemplatesPartialsSchemaGomd,
	"pkg/templates/partials/security.gomd":     pkgTemplatesPartialsSecurityGomd,
	"pkg/templates/schemas.gomd":               pkgTemplatesSchemasGomd,
	"pkg/templates/tag.gomd":                   pkgTemplatesTagGomd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"index.gomd":     &bintree{pkgTemplatesIndexGomd, map[string]*bintree{}},
			"info.gomd":      &bintree{pkgTemplatesInfoGomd, map[string]*bintree{}},
			"operation.gomd": &bintree{pkgTemplatesOperationGomd, map[string]*bintree{}},
			"partials": &bintree{nil, map[string]*bintree{
				"content.gomd":      &bintree{pkgTemplatesPartialsContentGomd, map[string]*bintree{}},
				"headers.gomd":      &bintree{pkgTemplatesPartialsHeadersGomd, map[string]*bintree{}},
				"parameters.gomd":   &bintree{pkgTemplatesPartialsParametersGomd, map[string]*bintree{}},
				"request_body.gomd": &bintree{pkgTemplatesPartialsRequest_bodyGomd, map[string]*bintree{}},
				"responses.gomd":    &bintree{pkgTemplatesPartialsResponsesGomd, map[string]*bintree{}},
				"schema.gomd":       &bintree{pkgTemplatesPartialsSchemaGomd, map[string]*bintree{}},
				"security.gomd":     &bintree{pkgTemplatesPartialsSecurityGomd, map[string]*bintree{}},
			}},
			"schemas.gomd": &bintree{pkgTemplatesSchemasGomd, map[string]*bintree{}},
			"tag.gomd":     &bintree{pkgTemplatesTagGomd, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
